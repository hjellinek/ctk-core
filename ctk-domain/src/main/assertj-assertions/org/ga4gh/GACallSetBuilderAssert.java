package org.ga4gh;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link GACallSet.Builder} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GACallSetBuilderAssert extends AbstractAssert<GACallSetBuilderAssert, GACallSet.Builder> {

  /**
   * Creates a new <code>{@link GACallSetBuilderAssert}</code> to make assertions on actual GACallSet.Builder.
   * @param actual the GACallSet.Builder we want to make assertions on.
   */
  public GACallSetBuilderAssert(GACallSet.Builder actual) {
    super(actual, GACallSetBuilderAssert.class);
  }

  /**
   * An entry point for GACallSetBuilderAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGACallSet.Builder)</code> and get specific assertion with code completion.
   * @param actual the GACallSet.Builder we want to make assertions on.
   * @return a new <code>{@link GACallSetBuilderAssert}</code>
   */
  public static GACallSetBuilderAssert assertThat(GACallSet.Builder actual) {
    return new GACallSetBuilderAssert(actual);
  }

  /**
   * Verifies that the actual GACallSet.Builder's created is equal to the given one.
   * @param created the given created to compare the actual GACallSet.Builder's created to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GACallSet.Builder's created is not equal to the given one.
   */
  public GACallSetBuilderAssert hasCreated(Long created) {
    // check that actual GACallSet.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting created of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualCreated = actual.getCreated();
    if (!Objects.areEqual(actualCreated, created)) {
      failWithMessage(assertjErrorMessage, actual, created, actualCreated);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GACallSet.Builder's id is equal to the given one.
   * @param id the given id to compare the actual GACallSet.Builder's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GACallSet.Builder's id is not equal to the given one.
   */
  public GACallSetBuilderAssert hasId(String id) {
    // check that actual GACallSet.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GACallSet.Builder's info is equal to the given one.
   * @param info the given info to compare the actual GACallSet.Builder's info to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GACallSet.Builder's info is not equal to the given one.
   */
  public GACallSetBuilderAssert hasInfo(java.util.Map info) {
    // check that actual GACallSet.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting info of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.util.Map actualInfo = actual.getInfo();
    if (!Objects.areEqual(actualInfo, info)) {
      failWithMessage(assertjErrorMessage, actual, info, actualInfo);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GACallSet.Builder's name is equal to the given one.
   * @param name the given name to compare the actual GACallSet.Builder's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GACallSet.Builder's name is not equal to the given one.
   */
  public GACallSetBuilderAssert hasName(String name) {
    // check that actual GACallSet.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GACallSet.Builder's sampleId is equal to the given one.
   * @param sampleId the given sampleId to compare the actual GACallSet.Builder's sampleId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GACallSet.Builder's sampleId is not equal to the given one.
   */
  public GACallSetBuilderAssert hasSampleId(String sampleId) {
    // check that actual GACallSet.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting sampleId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualSampleId = actual.getSampleId();
    if (!Objects.areEqual(actualSampleId, sampleId)) {
      failWithMessage(assertjErrorMessage, actual, sampleId, actualSampleId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GACallSet.Builder's updated is equal to the given one.
   * @param updated the given updated to compare the actual GACallSet.Builder's updated to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GACallSet.Builder's updated is not equal to the given one.
   */
  public GACallSetBuilderAssert hasUpdated(Long updated) {
    // check that actual GACallSet.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting updated of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualUpdated = actual.getUpdated();
    if (!Objects.areEqual(actualUpdated, updated)) {
      failWithMessage(assertjErrorMessage, actual, updated, actualUpdated);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GACallSet.Builder's variantSetIds contains the given String elements.
   * @param variantSetIds the given elements that should be contained in actual GACallSet.Builder's variantSetIds.
   * @return this assertion object.
   * @throws AssertionError if the actual GACallSet.Builder's variantSetIds does not contain all given String elements.
   */
  public GACallSetBuilderAssert hasVariantSetIds(String... variantSetIds) {
    // check that actual GACallSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (variantSetIds == null) failWithMessage("Expecting variantSetIds parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getVariantSetIds(), variantSetIds);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GACallSet.Builder's variantSetIds contains <b>only<b> the given String elements and nothing else in whatever order.
   * @param variantSetIds the given elements that should be contained in actual GACallSet.Builder's variantSetIds.
   * @return this assertion object.
   * @throws AssertionError if the actual GACallSet.Builder's variantSetIds does not contain all given String elements.
   */
  public GACallSetBuilderAssert hasOnlyVariantSetIds(String... variantSetIds) {
    // check that actual GACallSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (variantSetIds == null) failWithMessage("Expecting variantSetIds parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getVariantSetIds(), variantSetIds);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GACallSet.Builder's variantSetIds does not contain the given String elements.
   *
   * @param variantSetIds the given elements that should not be in actual GACallSet.Builder's variantSetIds.
   * @return this assertion object.
   * @throws AssertionError if the actual GACallSet.Builder's variantSetIds contains any given String elements.
   */
  public GACallSetBuilderAssert doesNotHaveVariantSetIds(String... variantSetIds) {
    // check that actual GACallSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (variantSetIds == null) failWithMessage("Expecting variantSetIds parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getVariantSetIds(), variantSetIds);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GACallSet.Builder has no variantSetIds.
   * @return this assertion object.
   * @throws AssertionError if the actual GACallSet.Builder's variantSetIds is not empty.
   */
  public GACallSetBuilderAssert hasNoVariantSetIds() {
    // check that actual GACallSet.Builder we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have variantSetIds but had :\n  <%s>";
    
    // check
    if (actual.getVariantSetIds().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getVariantSetIds());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual GACallSet.Builder has created.
   * @return this assertion object.
   * @throws AssertionError - if the actual GACallSet.Builder does not have created.
   */
  public GACallSetBuilderAssert hasCreated() {
    // check that actual GACallSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasCreated()) {
      failWithMessage("\nExpecting that actual GACallSet.Builder has created but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GACallSet.Builder does not have created.
   * @return this assertion object.
   * @throws AssertionError - if the actual GACallSet.Builder has created.
   */
  public GACallSetBuilderAssert doesNotHaveCreated() {
    // check that actual GACallSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasCreated()) {
      failWithMessage("\nExpecting that actual GACallSet.Builder does not have created but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GACallSet.Builder has id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GACallSet.Builder does not have id.
   */
  public GACallSetBuilderAssert hasId() {
    // check that actual GACallSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasId()) {
      failWithMessage("\nExpecting that actual GACallSet.Builder has id but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GACallSet.Builder does not have id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GACallSet.Builder has id.
   */
  public GACallSetBuilderAssert doesNotHaveId() {
    // check that actual GACallSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasId()) {
      failWithMessage("\nExpecting that actual GACallSet.Builder does not have id but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GACallSet.Builder has info.
   * @return this assertion object.
   * @throws AssertionError - if the actual GACallSet.Builder does not have info.
   */
  public GACallSetBuilderAssert hasInfo() {
    // check that actual GACallSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasInfo()) {
      failWithMessage("\nExpecting that actual GACallSet.Builder has info but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GACallSet.Builder does not have info.
   * @return this assertion object.
   * @throws AssertionError - if the actual GACallSet.Builder has info.
   */
  public GACallSetBuilderAssert doesNotHaveInfo() {
    // check that actual GACallSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasInfo()) {
      failWithMessage("\nExpecting that actual GACallSet.Builder does not have info but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GACallSet.Builder has name.
   * @return this assertion object.
   * @throws AssertionError - if the actual GACallSet.Builder does not have name.
   */
  public GACallSetBuilderAssert hasName() {
    // check that actual GACallSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasName()) {
      failWithMessage("\nExpecting that actual GACallSet.Builder has name but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GACallSet.Builder does not have name.
   * @return this assertion object.
   * @throws AssertionError - if the actual GACallSet.Builder has name.
   */
  public GACallSetBuilderAssert doesNotHaveName() {
    // check that actual GACallSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasName()) {
      failWithMessage("\nExpecting that actual GACallSet.Builder does not have name but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GACallSet.Builder has sample id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GACallSet.Builder does not have sample id.
   */
  public GACallSetBuilderAssert hasSampleId() {
    // check that actual GACallSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasSampleId()) {
      failWithMessage("\nExpecting that actual GACallSet.Builder has sample id but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GACallSet.Builder does not have sample id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GACallSet.Builder has sample id.
   */
  public GACallSetBuilderAssert doesNotHaveSampleId() {
    // check that actual GACallSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasSampleId()) {
      failWithMessage("\nExpecting that actual GACallSet.Builder does not have sample id but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GACallSet.Builder has updated.
   * @return this assertion object.
   * @throws AssertionError - if the actual GACallSet.Builder does not have updated.
   */
  public GACallSetBuilderAssert hasUpdated() {
    // check that actual GACallSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasUpdated()) {
      failWithMessage("\nExpecting that actual GACallSet.Builder has updated but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GACallSet.Builder does not have updated.
   * @return this assertion object.
   * @throws AssertionError - if the actual GACallSet.Builder has updated.
   */
  public GACallSetBuilderAssert doesNotHaveUpdated() {
    // check that actual GACallSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasUpdated()) {
      failWithMessage("\nExpecting that actual GACallSet.Builder does not have updated but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GACallSet.Builder has variant set ids.
   * @return this assertion object.
   * @throws AssertionError - if the actual GACallSet.Builder does not have variant set ids.
   */
  public GACallSetBuilderAssert hasVariantSetIds() {
    // check that actual GACallSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasVariantSetIds()) {
      failWithMessage("\nExpecting that actual GACallSet.Builder has variant set ids but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GACallSet.Builder does not have variant set ids.
   * @return this assertion object.
   * @throws AssertionError - if the actual GACallSet.Builder has variant set ids.
   */
  public GACallSetBuilderAssert doesNotHaveVariantSetIds() {
    // check that actual GACallSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasVariantSetIds()) {
      failWithMessage("\nExpecting that actual GACallSet.Builder does not have variant set ids but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
