package org.ga4gh;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link GASearchReferenceSetsResponse.Builder} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GASearchReferenceSetsResponseBuilderAssert extends AbstractAssert<GASearchReferenceSetsResponseBuilderAssert, GASearchReferenceSetsResponse.Builder> {

  /**
   * Creates a new <code>{@link GASearchReferenceSetsResponseBuilderAssert}</code> to make assertions on actual GASearchReferenceSetsResponse.Builder.
   * @param actual the GASearchReferenceSetsResponse.Builder we want to make assertions on.
   */
  public GASearchReferenceSetsResponseBuilderAssert(GASearchReferenceSetsResponse.Builder actual) {
    super(actual, GASearchReferenceSetsResponseBuilderAssert.class);
  }

  /**
   * An entry point for GASearchReferenceSetsResponseBuilderAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGASearchReferenceSetsResponse.Builder)</code> and get specific assertion with code completion.
   * @param actual the GASearchReferenceSetsResponse.Builder we want to make assertions on.
   * @return a new <code>{@link GASearchReferenceSetsResponseBuilderAssert}</code>
   */
  public static GASearchReferenceSetsResponseBuilderAssert assertThat(GASearchReferenceSetsResponse.Builder actual) {
    return new GASearchReferenceSetsResponseBuilderAssert(actual);
  }

  /**
   * Verifies that the actual GASearchReferenceSetsResponse.Builder's nextPageToken is equal to the given one.
   * @param nextPageToken the given nextPageToken to compare the actual GASearchReferenceSetsResponse.Builder's nextPageToken to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchReferenceSetsResponse.Builder's nextPageToken is not equal to the given one.
   */
  public GASearchReferenceSetsResponseBuilderAssert hasNextPageToken(String nextPageToken) {
    // check that actual GASearchReferenceSetsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting nextPageToken of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualNextPageToken = actual.getNextPageToken();
    if (!Objects.areEqual(actualNextPageToken, nextPageToken)) {
      failWithMessage(assertjErrorMessage, actual, nextPageToken, actualNextPageToken);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchReferenceSetsResponse.Builder's referenceSets contains the given GAReferenceSet elements.
   * @param referenceSets the given elements that should be contained in actual GASearchReferenceSetsResponse.Builder's referenceSets.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchReferenceSetsResponse.Builder's referenceSets does not contain all given GAReferenceSet elements.
   */
  public GASearchReferenceSetsResponseBuilderAssert hasReferenceSets(GAReferenceSet... referenceSets) {
    // check that actual GASearchReferenceSetsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given GAReferenceSet varargs is not null.
    if (referenceSets == null) failWithMessage("Expecting referenceSets parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getReferenceSets(), referenceSets);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchReferenceSetsResponse.Builder's referenceSets contains <b>only<b> the given GAReferenceSet elements and nothing else in whatever order.
   * @param referenceSets the given elements that should be contained in actual GASearchReferenceSetsResponse.Builder's referenceSets.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchReferenceSetsResponse.Builder's referenceSets does not contain all given GAReferenceSet elements.
   */
  public GASearchReferenceSetsResponseBuilderAssert hasOnlyReferenceSets(GAReferenceSet... referenceSets) {
    // check that actual GASearchReferenceSetsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given GAReferenceSet varargs is not null.
    if (referenceSets == null) failWithMessage("Expecting referenceSets parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getReferenceSets(), referenceSets);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchReferenceSetsResponse.Builder's referenceSets does not contain the given GAReferenceSet elements.
   *
   * @param referenceSets the given elements that should not be in actual GASearchReferenceSetsResponse.Builder's referenceSets.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchReferenceSetsResponse.Builder's referenceSets contains any given GAReferenceSet elements.
   */
  public GASearchReferenceSetsResponseBuilderAssert doesNotHaveReferenceSets(GAReferenceSet... referenceSets) {
    // check that actual GASearchReferenceSetsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given GAReferenceSet varargs is not null.
    if (referenceSets == null) failWithMessage("Expecting referenceSets parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getReferenceSets(), referenceSets);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchReferenceSetsResponse.Builder has no referenceSets.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchReferenceSetsResponse.Builder's referenceSets is not empty.
   */
  public GASearchReferenceSetsResponseBuilderAssert hasNoReferenceSets() {
    // check that actual GASearchReferenceSetsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have referenceSets but had :\n  <%s>";
    
    // check
    if (actual.getReferenceSets().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getReferenceSets());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual GASearchReferenceSetsResponse.Builder has next page token.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchReferenceSetsResponse.Builder does not have next page token.
   */
  public GASearchReferenceSetsResponseBuilderAssert hasNextPageToken() {
    // check that actual GASearchReferenceSetsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasNextPageToken()) {
      failWithMessage("\nExpecting that actual GASearchReferenceSetsResponse.Builder has next page token but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchReferenceSetsResponse.Builder does not have next page token.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchReferenceSetsResponse.Builder has next page token.
   */
  public GASearchReferenceSetsResponseBuilderAssert doesNotHaveNextPageToken() {
    // check that actual GASearchReferenceSetsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasNextPageToken()) {
      failWithMessage("\nExpecting that actual GASearchReferenceSetsResponse.Builder does not have next page token but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchReferenceSetsResponse.Builder has reference sets.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchReferenceSetsResponse.Builder does not have reference sets.
   */
  public GASearchReferenceSetsResponseBuilderAssert hasReferenceSets() {
    // check that actual GASearchReferenceSetsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasReferenceSets()) {
      failWithMessage("\nExpecting that actual GASearchReferenceSetsResponse.Builder has reference sets but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchReferenceSetsResponse.Builder does not have reference sets.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchReferenceSetsResponse.Builder has reference sets.
   */
  public GASearchReferenceSetsResponseBuilderAssert doesNotHaveReferenceSets() {
    // check that actual GASearchReferenceSetsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasReferenceSets()) {
      failWithMessage("\nExpecting that actual GASearchReferenceSetsResponse.Builder does not have reference sets but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
