package org.ga4gh;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link GASearchVariantSetsRequest.Builder} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GASearchVariantSetsRequestBuilderAssert extends AbstractAssert<GASearchVariantSetsRequestBuilderAssert, GASearchVariantSetsRequest.Builder> {

  /**
   * Creates a new <code>{@link GASearchVariantSetsRequestBuilderAssert}</code> to make assertions on actual GASearchVariantSetsRequest.Builder.
   * @param actual the GASearchVariantSetsRequest.Builder we want to make assertions on.
   */
  public GASearchVariantSetsRequestBuilderAssert(GASearchVariantSetsRequest.Builder actual) {
    super(actual, GASearchVariantSetsRequestBuilderAssert.class);
  }

  /**
   * An entry point for GASearchVariantSetsRequestBuilderAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGASearchVariantSetsRequest.Builder)</code> and get specific assertion with code completion.
   * @param actual the GASearchVariantSetsRequest.Builder we want to make assertions on.
   * @return a new <code>{@link GASearchVariantSetsRequestBuilderAssert}</code>
   */
  public static GASearchVariantSetsRequestBuilderAssert assertThat(GASearchVariantSetsRequest.Builder actual) {
    return new GASearchVariantSetsRequestBuilderAssert(actual);
  }

  /**
   * Verifies that the actual GASearchVariantSetsRequest.Builder's datasetIds contains the given String elements.
   * @param datasetIds the given elements that should be contained in actual GASearchVariantSetsRequest.Builder's datasetIds.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchVariantSetsRequest.Builder's datasetIds does not contain all given String elements.
   */
  public GASearchVariantSetsRequestBuilderAssert hasDatasetIds(String... datasetIds) {
    // check that actual GASearchVariantSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (datasetIds == null) failWithMessage("Expecting datasetIds parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getDatasetIds(), datasetIds);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchVariantSetsRequest.Builder's datasetIds contains <b>only<b> the given String elements and nothing else in whatever order.
   * @param datasetIds the given elements that should be contained in actual GASearchVariantSetsRequest.Builder's datasetIds.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchVariantSetsRequest.Builder's datasetIds does not contain all given String elements.
   */
  public GASearchVariantSetsRequestBuilderAssert hasOnlyDatasetIds(String... datasetIds) {
    // check that actual GASearchVariantSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (datasetIds == null) failWithMessage("Expecting datasetIds parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getDatasetIds(), datasetIds);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchVariantSetsRequest.Builder's datasetIds does not contain the given String elements.
   *
   * @param datasetIds the given elements that should not be in actual GASearchVariantSetsRequest.Builder's datasetIds.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchVariantSetsRequest.Builder's datasetIds contains any given String elements.
   */
  public GASearchVariantSetsRequestBuilderAssert doesNotHaveDatasetIds(String... datasetIds) {
    // check that actual GASearchVariantSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (datasetIds == null) failWithMessage("Expecting datasetIds parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getDatasetIds(), datasetIds);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchVariantSetsRequest.Builder has no datasetIds.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchVariantSetsRequest.Builder's datasetIds is not empty.
   */
  public GASearchVariantSetsRequestBuilderAssert hasNoDatasetIds() {
    // check that actual GASearchVariantSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have datasetIds but had :\n  <%s>";
    
    // check
    if (actual.getDatasetIds().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getDatasetIds());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual GASearchVariantSetsRequest.Builder's pageSize is equal to the given one.
   * @param pageSize the given pageSize to compare the actual GASearchVariantSetsRequest.Builder's pageSize to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchVariantSetsRequest.Builder's pageSize is not equal to the given one.
   */
  public GASearchVariantSetsRequestBuilderAssert hasPageSize(Integer pageSize) {
    // check that actual GASearchVariantSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting pageSize of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualPageSize = actual.getPageSize();
    if (!Objects.areEqual(actualPageSize, pageSize)) {
      failWithMessage(assertjErrorMessage, actual, pageSize, actualPageSize);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchVariantSetsRequest.Builder's pageToken is equal to the given one.
   * @param pageToken the given pageToken to compare the actual GASearchVariantSetsRequest.Builder's pageToken to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchVariantSetsRequest.Builder's pageToken is not equal to the given one.
   */
  public GASearchVariantSetsRequestBuilderAssert hasPageToken(String pageToken) {
    // check that actual GASearchVariantSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting pageToken of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualPageToken = actual.getPageToken();
    if (!Objects.areEqual(actualPageToken, pageToken)) {
      failWithMessage(assertjErrorMessage, actual, pageToken, actualPageToken);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchVariantSetsRequest.Builder has dataset ids.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchVariantSetsRequest.Builder does not have dataset ids.
   */
  public GASearchVariantSetsRequestBuilderAssert hasDatasetIds() {
    // check that actual GASearchVariantSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasDatasetIds()) {
      failWithMessage("\nExpecting that actual GASearchVariantSetsRequest.Builder has dataset ids but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchVariantSetsRequest.Builder does not have dataset ids.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchVariantSetsRequest.Builder has dataset ids.
   */
  public GASearchVariantSetsRequestBuilderAssert doesNotHaveDatasetIds() {
    // check that actual GASearchVariantSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasDatasetIds()) {
      failWithMessage("\nExpecting that actual GASearchVariantSetsRequest.Builder does not have dataset ids but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchVariantSetsRequest.Builder has page size.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchVariantSetsRequest.Builder does not have page size.
   */
  public GASearchVariantSetsRequestBuilderAssert hasPageSize() {
    // check that actual GASearchVariantSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasPageSize()) {
      failWithMessage("\nExpecting that actual GASearchVariantSetsRequest.Builder has page size but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchVariantSetsRequest.Builder does not have page size.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchVariantSetsRequest.Builder has page size.
   */
  public GASearchVariantSetsRequestBuilderAssert doesNotHavePageSize() {
    // check that actual GASearchVariantSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasPageSize()) {
      failWithMessage("\nExpecting that actual GASearchVariantSetsRequest.Builder does not have page size but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchVariantSetsRequest.Builder has page token.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchVariantSetsRequest.Builder does not have page token.
   */
  public GASearchVariantSetsRequestBuilderAssert hasPageToken() {
    // check that actual GASearchVariantSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasPageToken()) {
      failWithMessage("\nExpecting that actual GASearchVariantSetsRequest.Builder has page token but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchVariantSetsRequest.Builder does not have page token.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchVariantSetsRequest.Builder has page token.
   */
  public GASearchVariantSetsRequestBuilderAssert doesNotHavePageToken() {
    // check that actual GASearchVariantSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasPageToken()) {
      failWithMessage("\nExpecting that actual GASearchVariantSetsRequest.Builder does not have page token but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
