package org.ga4gh;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link BEACONResponse.Builder} specific assertions - Generated by CustomAssertionGenerator.
 */
public class BEACONResponseBuilderAssert extends AbstractAssert<BEACONResponseBuilderAssert, BEACONResponse.Builder> {

  /**
   * Creates a new <code>{@link BEACONResponseBuilderAssert}</code> to make assertions on actual BEACONResponse.Builder.
   * @param actual the BEACONResponse.Builder we want to make assertions on.
   */
  public BEACONResponseBuilderAssert(BEACONResponse.Builder actual) {
    super(actual, BEACONResponseBuilderAssert.class);
  }

  /**
   * An entry point for BEACONResponseBuilderAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myBEACONResponse.Builder)</code> and get specific assertion with code completion.
   * @param actual the BEACONResponse.Builder we want to make assertions on.
   * @return a new <code>{@link BEACONResponseBuilderAssert}</code>
   */
  public static BEACONResponseBuilderAssert assertThat(BEACONResponse.Builder actual) {
    return new BEACONResponseBuilderAssert(actual);
  }

  /**
   * Verifies that the actual BEACONResponse.Builder's exists is equal to the given one.
   * @param exists the given exists to compare the actual BEACONResponse.Builder's exists to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BEACONResponse.Builder's exists is not equal to the given one.
   */
  public BEACONResponseBuilderAssert hasExists(Boolean exists) {
    // check that actual BEACONResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting exists of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Boolean actualExists = actual.getExists();
    if (!Objects.areEqual(actualExists, exists)) {
      failWithMessage(assertjErrorMessage, actual, exists, actualExists);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BEACONResponse.Builder's frequency is equal to the given one.
   * @param frequency the given frequency to compare the actual BEACONResponse.Builder's frequency to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BEACONResponse.Builder's frequency is not equal to the given one.
   */
  public BEACONResponseBuilderAssert hasFrequency(Long frequency) {
    // check that actual BEACONResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting frequency of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualFrequency = actual.getFrequency();
    if (!Objects.areEqual(actualFrequency, frequency)) {
      failWithMessage(assertjErrorMessage, actual, frequency, actualFrequency);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BEACONResponse.Builder has exists.
   * @return this assertion object.
   * @throws AssertionError - if the actual BEACONResponse.Builder does not have exists.
   */
  public BEACONResponseBuilderAssert hasExists() {
    // check that actual BEACONResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasExists()) {
      failWithMessage("\nExpecting that actual BEACONResponse.Builder has exists but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BEACONResponse.Builder does not have exists.
   * @return this assertion object.
   * @throws AssertionError - if the actual BEACONResponse.Builder has exists.
   */
  public BEACONResponseBuilderAssert doesNotHaveExists() {
    // check that actual BEACONResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasExists()) {
      failWithMessage("\nExpecting that actual BEACONResponse.Builder does not have exists but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BEACONResponse.Builder has frequency.
   * @return this assertion object.
   * @throws AssertionError - if the actual BEACONResponse.Builder does not have frequency.
   */
  public BEACONResponseBuilderAssert hasFrequency() {
    // check that actual BEACONResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasFrequency()) {
      failWithMessage("\nExpecting that actual BEACONResponse.Builder has frequency but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BEACONResponse.Builder does not have frequency.
   * @return this assertion object.
   * @throws AssertionError - if the actual BEACONResponse.Builder has frequency.
   */
  public BEACONResponseBuilderAssert doesNotHaveFrequency() {
    // check that actual BEACONResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasFrequency()) {
      failWithMessage("\nExpecting that actual BEACONResponse.Builder does not have frequency but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
