package org.ga4gh;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link GASearchReferenceSetsRequest.Builder} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GASearchReferenceSetsRequestBuilderAssert extends AbstractAssert<GASearchReferenceSetsRequestBuilderAssert, GASearchReferenceSetsRequest.Builder> {

  /**
   * Creates a new <code>{@link GASearchReferenceSetsRequestBuilderAssert}</code> to make assertions on actual GASearchReferenceSetsRequest.Builder.
   * @param actual the GASearchReferenceSetsRequest.Builder we want to make assertions on.
   */
  public GASearchReferenceSetsRequestBuilderAssert(GASearchReferenceSetsRequest.Builder actual) {
    super(actual, GASearchReferenceSetsRequestBuilderAssert.class);
  }

  /**
   * An entry point for GASearchReferenceSetsRequestBuilderAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGASearchReferenceSetsRequest.Builder)</code> and get specific assertion with code completion.
   * @param actual the GASearchReferenceSetsRequest.Builder we want to make assertions on.
   * @return a new <code>{@link GASearchReferenceSetsRequestBuilderAssert}</code>
   */
  public static GASearchReferenceSetsRequestBuilderAssert assertThat(GASearchReferenceSetsRequest.Builder actual) {
    return new GASearchReferenceSetsRequestBuilderAssert(actual);
  }

  /**
   * Verifies that the actual GASearchReferenceSetsRequest.Builder's accessions contains the given String elements.
   * @param accessions the given elements that should be contained in actual GASearchReferenceSetsRequest.Builder's accessions.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchReferenceSetsRequest.Builder's accessions does not contain all given String elements.
   */
  public GASearchReferenceSetsRequestBuilderAssert hasAccessions(String... accessions) {
    // check that actual GASearchReferenceSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (accessions == null) failWithMessage("Expecting accessions parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getAccessions(), accessions);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchReferenceSetsRequest.Builder's accessions contains <b>only<b> the given String elements and nothing else in whatever order.
   * @param accessions the given elements that should be contained in actual GASearchReferenceSetsRequest.Builder's accessions.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchReferenceSetsRequest.Builder's accessions does not contain all given String elements.
   */
  public GASearchReferenceSetsRequestBuilderAssert hasOnlyAccessions(String... accessions) {
    // check that actual GASearchReferenceSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (accessions == null) failWithMessage("Expecting accessions parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getAccessions(), accessions);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchReferenceSetsRequest.Builder's accessions does not contain the given String elements.
   *
   * @param accessions the given elements that should not be in actual GASearchReferenceSetsRequest.Builder's accessions.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchReferenceSetsRequest.Builder's accessions contains any given String elements.
   */
  public GASearchReferenceSetsRequestBuilderAssert doesNotHaveAccessions(String... accessions) {
    // check that actual GASearchReferenceSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (accessions == null) failWithMessage("Expecting accessions parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getAccessions(), accessions);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchReferenceSetsRequest.Builder has no accessions.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchReferenceSetsRequest.Builder's accessions is not empty.
   */
  public GASearchReferenceSetsRequestBuilderAssert hasNoAccessions() {
    // check that actual GASearchReferenceSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have accessions but had :\n  <%s>";
    
    // check
    if (actual.getAccessions().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getAccessions());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual GASearchReferenceSetsRequest.Builder's assemblyId is equal to the given one.
   * @param assemblyId the given assemblyId to compare the actual GASearchReferenceSetsRequest.Builder's assemblyId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchReferenceSetsRequest.Builder's assemblyId is not equal to the given one.
   */
  public GASearchReferenceSetsRequestBuilderAssert hasAssemblyId(String assemblyId) {
    // check that actual GASearchReferenceSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting assemblyId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualAssemblyId = actual.getAssemblyId();
    if (!Objects.areEqual(actualAssemblyId, assemblyId)) {
      failWithMessage(assertjErrorMessage, actual, assemblyId, actualAssemblyId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchReferenceSetsRequest.Builder's md5checksums contains the given String elements.
   * @param md5checksums the given elements that should be contained in actual GASearchReferenceSetsRequest.Builder's md5checksums.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchReferenceSetsRequest.Builder's md5checksums does not contain all given String elements.
   */
  public GASearchReferenceSetsRequestBuilderAssert hasMd5checksums(String... md5checksums) {
    // check that actual GASearchReferenceSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (md5checksums == null) failWithMessage("Expecting md5checksums parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getMd5checksums(), md5checksums);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchReferenceSetsRequest.Builder's md5checksums contains <b>only<b> the given String elements and nothing else in whatever order.
   * @param md5checksums the given elements that should be contained in actual GASearchReferenceSetsRequest.Builder's md5checksums.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchReferenceSetsRequest.Builder's md5checksums does not contain all given String elements.
   */
  public GASearchReferenceSetsRequestBuilderAssert hasOnlyMd5checksums(String... md5checksums) {
    // check that actual GASearchReferenceSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (md5checksums == null) failWithMessage("Expecting md5checksums parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getMd5checksums(), md5checksums);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchReferenceSetsRequest.Builder's md5checksums does not contain the given String elements.
   *
   * @param md5checksums the given elements that should not be in actual GASearchReferenceSetsRequest.Builder's md5checksums.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchReferenceSetsRequest.Builder's md5checksums contains any given String elements.
   */
  public GASearchReferenceSetsRequestBuilderAssert doesNotHaveMd5checksums(String... md5checksums) {
    // check that actual GASearchReferenceSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (md5checksums == null) failWithMessage("Expecting md5checksums parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getMd5checksums(), md5checksums);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchReferenceSetsRequest.Builder has no md5checksums.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchReferenceSetsRequest.Builder's md5checksums is not empty.
   */
  public GASearchReferenceSetsRequestBuilderAssert hasNoMd5checksums() {
    // check that actual GASearchReferenceSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have md5checksums but had :\n  <%s>";
    
    // check
    if (actual.getMd5checksums().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getMd5checksums());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual GASearchReferenceSetsRequest.Builder's pageSize is equal to the given one.
   * @param pageSize the given pageSize to compare the actual GASearchReferenceSetsRequest.Builder's pageSize to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchReferenceSetsRequest.Builder's pageSize is not equal to the given one.
   */
  public GASearchReferenceSetsRequestBuilderAssert hasPageSize(Integer pageSize) {
    // check that actual GASearchReferenceSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting pageSize of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualPageSize = actual.getPageSize();
    if (!Objects.areEqual(actualPageSize, pageSize)) {
      failWithMessage(assertjErrorMessage, actual, pageSize, actualPageSize);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchReferenceSetsRequest.Builder's pageToken is equal to the given one.
   * @param pageToken the given pageToken to compare the actual GASearchReferenceSetsRequest.Builder's pageToken to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchReferenceSetsRequest.Builder's pageToken is not equal to the given one.
   */
  public GASearchReferenceSetsRequestBuilderAssert hasPageToken(String pageToken) {
    // check that actual GASearchReferenceSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting pageToken of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualPageToken = actual.getPageToken();
    if (!Objects.areEqual(actualPageToken, pageToken)) {
      failWithMessage(assertjErrorMessage, actual, pageToken, actualPageToken);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchReferenceSetsRequest.Builder has accessions.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchReferenceSetsRequest.Builder does not have accessions.
   */
  public GASearchReferenceSetsRequestBuilderAssert hasAccessions() {
    // check that actual GASearchReferenceSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasAccessions()) {
      failWithMessage("\nExpecting that actual GASearchReferenceSetsRequest.Builder has accessions but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchReferenceSetsRequest.Builder does not have accessions.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchReferenceSetsRequest.Builder has accessions.
   */
  public GASearchReferenceSetsRequestBuilderAssert doesNotHaveAccessions() {
    // check that actual GASearchReferenceSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasAccessions()) {
      failWithMessage("\nExpecting that actual GASearchReferenceSetsRequest.Builder does not have accessions but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchReferenceSetsRequest.Builder has assembly id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchReferenceSetsRequest.Builder does not have assembly id.
   */
  public GASearchReferenceSetsRequestBuilderAssert hasAssemblyId() {
    // check that actual GASearchReferenceSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasAssemblyId()) {
      failWithMessage("\nExpecting that actual GASearchReferenceSetsRequest.Builder has assembly id but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchReferenceSetsRequest.Builder does not have assembly id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchReferenceSetsRequest.Builder has assembly id.
   */
  public GASearchReferenceSetsRequestBuilderAssert doesNotHaveAssemblyId() {
    // check that actual GASearchReferenceSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasAssemblyId()) {
      failWithMessage("\nExpecting that actual GASearchReferenceSetsRequest.Builder does not have assembly id but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchReferenceSetsRequest.Builder has md5checksums.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchReferenceSetsRequest.Builder does not have md5checksums.
   */
  public GASearchReferenceSetsRequestBuilderAssert hasMd5checksums() {
    // check that actual GASearchReferenceSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasMd5checksums()) {
      failWithMessage("\nExpecting that actual GASearchReferenceSetsRequest.Builder has md5checksums but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchReferenceSetsRequest.Builder does not have md5checksums.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchReferenceSetsRequest.Builder has md5checksums.
   */
  public GASearchReferenceSetsRequestBuilderAssert doesNotHaveMd5checksums() {
    // check that actual GASearchReferenceSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasMd5checksums()) {
      failWithMessage("\nExpecting that actual GASearchReferenceSetsRequest.Builder does not have md5checksums but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchReferenceSetsRequest.Builder has page size.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchReferenceSetsRequest.Builder does not have page size.
   */
  public GASearchReferenceSetsRequestBuilderAssert hasPageSize() {
    // check that actual GASearchReferenceSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasPageSize()) {
      failWithMessage("\nExpecting that actual GASearchReferenceSetsRequest.Builder has page size but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchReferenceSetsRequest.Builder does not have page size.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchReferenceSetsRequest.Builder has page size.
   */
  public GASearchReferenceSetsRequestBuilderAssert doesNotHavePageSize() {
    // check that actual GASearchReferenceSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasPageSize()) {
      failWithMessage("\nExpecting that actual GASearchReferenceSetsRequest.Builder does not have page size but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchReferenceSetsRequest.Builder has page token.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchReferenceSetsRequest.Builder does not have page token.
   */
  public GASearchReferenceSetsRequestBuilderAssert hasPageToken() {
    // check that actual GASearchReferenceSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasPageToken()) {
      failWithMessage("\nExpecting that actual GASearchReferenceSetsRequest.Builder has page token but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchReferenceSetsRequest.Builder does not have page token.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchReferenceSetsRequest.Builder has page token.
   */
  public GASearchReferenceSetsRequestBuilderAssert doesNotHavePageToken() {
    // check that actual GASearchReferenceSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasPageToken()) {
      failWithMessage("\nExpecting that actual GASearchReferenceSetsRequest.Builder does not have page token but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
