package org.ga4gh;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link GAExperiment.Builder} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GAExperimentBuilderAssert extends AbstractAssert<GAExperimentBuilderAssert, GAExperiment.Builder> {

  /**
   * Creates a new <code>{@link GAExperimentBuilderAssert}</code> to make assertions on actual GAExperiment.Builder.
   * @param actual the GAExperiment.Builder we want to make assertions on.
   */
  public GAExperimentBuilderAssert(GAExperiment.Builder actual) {
    super(actual, GAExperimentBuilderAssert.class);
  }

  /**
   * An entry point for GAExperimentBuilderAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGAExperiment.Builder)</code> and get specific assertion with code completion.
   * @param actual the GAExperiment.Builder we want to make assertions on.
   * @return a new <code>{@link GAExperimentBuilderAssert}</code>
   */
  public static GAExperimentBuilderAssert assertThat(GAExperiment.Builder actual) {
    return new GAExperimentBuilderAssert(actual);
  }

  /**
   * Verifies that the actual GAExperiment.Builder's instrumentModel is equal to the given one.
   * @param instrumentModel the given instrumentModel to compare the actual GAExperiment.Builder's instrumentModel to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder's instrumentModel is not equal to the given one.
   */
  public GAExperimentBuilderAssert hasInstrumentModel(String instrumentModel) {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting instrumentModel of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualInstrumentModel = actual.getInstrumentModel();
    if (!Objects.areEqual(actualInstrumentModel, instrumentModel)) {
      failWithMessage(assertjErrorMessage, actual, instrumentModel, actualInstrumentModel);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder's libraryId is equal to the given one.
   * @param libraryId the given libraryId to compare the actual GAExperiment.Builder's libraryId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder's libraryId is not equal to the given one.
   */
  public GAExperimentBuilderAssert hasLibraryId(String libraryId) {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting libraryId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualLibraryId = actual.getLibraryId();
    if (!Objects.areEqual(actualLibraryId, libraryId)) {
      failWithMessage(assertjErrorMessage, actual, libraryId, actualLibraryId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder's platformUnit is equal to the given one.
   * @param platformUnit the given platformUnit to compare the actual GAExperiment.Builder's platformUnit to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder's platformUnit is not equal to the given one.
   */
  public GAExperimentBuilderAssert hasPlatformUnit(String platformUnit) {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting platformUnit of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualPlatformUnit = actual.getPlatformUnit();
    if (!Objects.areEqual(actualPlatformUnit, platformUnit)) {
      failWithMessage(assertjErrorMessage, actual, platformUnit, actualPlatformUnit);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder's sequencingCenter is equal to the given one.
   * @param sequencingCenter the given sequencingCenter to compare the actual GAExperiment.Builder's sequencingCenter to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder's sequencingCenter is not equal to the given one.
   */
  public GAExperimentBuilderAssert hasSequencingCenter(String sequencingCenter) {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting sequencingCenter of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualSequencingCenter = actual.getSequencingCenter();
    if (!Objects.areEqual(actualSequencingCenter, sequencingCenter)) {
      failWithMessage(assertjErrorMessage, actual, sequencingCenter, actualSequencingCenter);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder has instrument model.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder does not have instrument model.
   */
  public GAExperimentBuilderAssert hasInstrumentModel() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasInstrumentModel()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder has instrument model but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder does not have instrument model.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder has instrument model.
   */
  public GAExperimentBuilderAssert doesNotHaveInstrumentModel() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasInstrumentModel()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder does not have instrument model but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder has library id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder does not have library id.
   */
  public GAExperimentBuilderAssert hasLibraryId() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasLibraryId()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder has library id but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder does not have library id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder has library id.
   */
  public GAExperimentBuilderAssert doesNotHaveLibraryId() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasLibraryId()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder does not have library id but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder has platform unit.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder does not have platform unit.
   */
  public GAExperimentBuilderAssert hasPlatformUnit() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasPlatformUnit()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder has platform unit but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder does not have platform unit.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder has platform unit.
   */
  public GAExperimentBuilderAssert doesNotHavePlatformUnit() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasPlatformUnit()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder does not have platform unit but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder has sequencing center.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder does not have sequencing center.
   */
  public GAExperimentBuilderAssert hasSequencingCenter() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasSequencingCenter()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder has sequencing center but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder does not have sequencing center.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder has sequencing center.
   */
  public GAExperimentBuilderAssert doesNotHaveSequencingCenter() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasSequencingCenter()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder does not have sequencing center but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
