package org.ga4gh;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link BEACONRequest.Builder} specific assertions - Generated by CustomAssertionGenerator.
 */
public class BEACONRequestBuilderAssert extends AbstractAssert<BEACONRequestBuilderAssert, BEACONRequest.Builder> {

  /**
   * Creates a new <code>{@link BEACONRequestBuilderAssert}</code> to make assertions on actual BEACONRequest.Builder.
   * @param actual the BEACONRequest.Builder we want to make assertions on.
   */
  public BEACONRequestBuilderAssert(BEACONRequest.Builder actual) {
    super(actual, BEACONRequestBuilderAssert.class);
  }

  /**
   * An entry point for BEACONRequestBuilderAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myBEACONRequest.Builder)</code> and get specific assertion with code completion.
   * @param actual the BEACONRequest.Builder we want to make assertions on.
   * @return a new <code>{@link BEACONRequestBuilderAssert}</code>
   */
  public static BEACONRequestBuilderAssert assertThat(BEACONRequest.Builder actual) {
    return new BEACONRequestBuilderAssert(actual);
  }

  /**
   * Verifies that the actual BEACONRequest.Builder's allele is equal to the given one.
   * @param allele the given allele to compare the actual BEACONRequest.Builder's allele to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BEACONRequest.Builder's allele is not equal to the given one.
   */
  public BEACONRequestBuilderAssert hasAllele(String allele) {
    // check that actual BEACONRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting allele of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualAllele = actual.getAllele();
    if (!Objects.areEqual(actualAllele, allele)) {
      failWithMessage(assertjErrorMessage, actual, allele, actualAllele);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BEACONRequest.Builder's chromosome is equal to the given one.
   * @param chromosome the given chromosome to compare the actual BEACONRequest.Builder's chromosome to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BEACONRequest.Builder's chromosome is not equal to the given one.
   */
  public BEACONRequestBuilderAssert hasChromosome(String chromosome) {
    // check that actual BEACONRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting chromosome of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualChromosome = actual.getChromosome();
    if (!Objects.areEqual(actualChromosome, chromosome)) {
      failWithMessage(assertjErrorMessage, actual, chromosome, actualChromosome);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BEACONRequest.Builder's coordinate is equal to the given one.
   * @param coordinate the given coordinate to compare the actual BEACONRequest.Builder's coordinate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BEACONRequest.Builder's coordinate is not equal to the given one.
   */
  public BEACONRequestBuilderAssert hasCoordinate(Long coordinate) {
    // check that actual BEACONRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting coordinate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualCoordinate = actual.getCoordinate();
    if (!Objects.areEqual(actualCoordinate, coordinate)) {
      failWithMessage(assertjErrorMessage, actual, coordinate, actualCoordinate);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BEACONRequest.Builder's populationId is equal to the given one.
   * @param populationId the given populationId to compare the actual BEACONRequest.Builder's populationId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BEACONRequest.Builder's populationId is not equal to the given one.
   */
  public BEACONRequestBuilderAssert hasPopulationId(String populationId) {
    // check that actual BEACONRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting populationId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualPopulationId = actual.getPopulationId();
    if (!Objects.areEqual(actualPopulationId, populationId)) {
      failWithMessage(assertjErrorMessage, actual, populationId, actualPopulationId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BEACONRequest.Builder's referenceVersion is equal to the given one.
   * @param referenceVersion the given referenceVersion to compare the actual BEACONRequest.Builder's referenceVersion to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BEACONRequest.Builder's referenceVersion is not equal to the given one.
   */
  public BEACONRequestBuilderAssert hasReferenceVersion(String referenceVersion) {
    // check that actual BEACONRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting referenceVersion of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualReferenceVersion = actual.getReferenceVersion();
    if (!Objects.areEqual(actualReferenceVersion, referenceVersion)) {
      failWithMessage(assertjErrorMessage, actual, referenceVersion, actualReferenceVersion);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BEACONRequest.Builder has allele.
   * @return this assertion object.
   * @throws AssertionError - if the actual BEACONRequest.Builder does not have allele.
   */
  public BEACONRequestBuilderAssert hasAllele() {
    // check that actual BEACONRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasAllele()) {
      failWithMessage("\nExpecting that actual BEACONRequest.Builder has allele but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BEACONRequest.Builder does not have allele.
   * @return this assertion object.
   * @throws AssertionError - if the actual BEACONRequest.Builder has allele.
   */
  public BEACONRequestBuilderAssert doesNotHaveAllele() {
    // check that actual BEACONRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasAllele()) {
      failWithMessage("\nExpecting that actual BEACONRequest.Builder does not have allele but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BEACONRequest.Builder has chromosome.
   * @return this assertion object.
   * @throws AssertionError - if the actual BEACONRequest.Builder does not have chromosome.
   */
  public BEACONRequestBuilderAssert hasChromosome() {
    // check that actual BEACONRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasChromosome()) {
      failWithMessage("\nExpecting that actual BEACONRequest.Builder has chromosome but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BEACONRequest.Builder does not have chromosome.
   * @return this assertion object.
   * @throws AssertionError - if the actual BEACONRequest.Builder has chromosome.
   */
  public BEACONRequestBuilderAssert doesNotHaveChromosome() {
    // check that actual BEACONRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasChromosome()) {
      failWithMessage("\nExpecting that actual BEACONRequest.Builder does not have chromosome but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BEACONRequest.Builder has coordinate.
   * @return this assertion object.
   * @throws AssertionError - if the actual BEACONRequest.Builder does not have coordinate.
   */
  public BEACONRequestBuilderAssert hasCoordinate() {
    // check that actual BEACONRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasCoordinate()) {
      failWithMessage("\nExpecting that actual BEACONRequest.Builder has coordinate but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BEACONRequest.Builder does not have coordinate.
   * @return this assertion object.
   * @throws AssertionError - if the actual BEACONRequest.Builder has coordinate.
   */
  public BEACONRequestBuilderAssert doesNotHaveCoordinate() {
    // check that actual BEACONRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasCoordinate()) {
      failWithMessage("\nExpecting that actual BEACONRequest.Builder does not have coordinate but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BEACONRequest.Builder has population id.
   * @return this assertion object.
   * @throws AssertionError - if the actual BEACONRequest.Builder does not have population id.
   */
  public BEACONRequestBuilderAssert hasPopulationId() {
    // check that actual BEACONRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasPopulationId()) {
      failWithMessage("\nExpecting that actual BEACONRequest.Builder has population id but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BEACONRequest.Builder does not have population id.
   * @return this assertion object.
   * @throws AssertionError - if the actual BEACONRequest.Builder has population id.
   */
  public BEACONRequestBuilderAssert doesNotHavePopulationId() {
    // check that actual BEACONRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasPopulationId()) {
      failWithMessage("\nExpecting that actual BEACONRequest.Builder does not have population id but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BEACONRequest.Builder has reference version.
   * @return this assertion object.
   * @throws AssertionError - if the actual BEACONRequest.Builder does not have reference version.
   */
  public BEACONRequestBuilderAssert hasReferenceVersion() {
    // check that actual BEACONRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasReferenceVersion()) {
      failWithMessage("\nExpecting that actual BEACONRequest.Builder has reference version but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BEACONRequest.Builder does not have reference version.
   * @return this assertion object.
   * @throws AssertionError - if the actual BEACONRequest.Builder has reference version.
   */
  public BEACONRequestBuilderAssert doesNotHaveReferenceVersion() {
    // check that actual BEACONRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasReferenceVersion()) {
      failWithMessage("\nExpecting that actual BEACONRequest.Builder does not have reference version but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
