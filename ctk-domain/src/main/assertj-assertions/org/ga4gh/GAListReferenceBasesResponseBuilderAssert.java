package org.ga4gh;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link GAListReferenceBasesResponse.Builder} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GAListReferenceBasesResponseBuilderAssert extends AbstractAssert<GAListReferenceBasesResponseBuilderAssert, GAListReferenceBasesResponse.Builder> {

  /**
   * Creates a new <code>{@link GAListReferenceBasesResponseBuilderAssert}</code> to make assertions on actual GAListReferenceBasesResponse.Builder.
   * @param actual the GAListReferenceBasesResponse.Builder we want to make assertions on.
   */
  public GAListReferenceBasesResponseBuilderAssert(GAListReferenceBasesResponse.Builder actual) {
    super(actual, GAListReferenceBasesResponseBuilderAssert.class);
  }

  /**
   * An entry point for GAListReferenceBasesResponseBuilderAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGAListReferenceBasesResponse.Builder)</code> and get specific assertion with code completion.
   * @param actual the GAListReferenceBasesResponse.Builder we want to make assertions on.
   * @return a new <code>{@link GAListReferenceBasesResponseBuilderAssert}</code>
   */
  public static GAListReferenceBasesResponseBuilderAssert assertThat(GAListReferenceBasesResponse.Builder actual) {
    return new GAListReferenceBasesResponseBuilderAssert(actual);
  }

  /**
   * Verifies that the actual GAListReferenceBasesResponse.Builder's nextPageToken is equal to the given one.
   * @param nextPageToken the given nextPageToken to compare the actual GAListReferenceBasesResponse.Builder's nextPageToken to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAListReferenceBasesResponse.Builder's nextPageToken is not equal to the given one.
   */
  public GAListReferenceBasesResponseBuilderAssert hasNextPageToken(String nextPageToken) {
    // check that actual GAListReferenceBasesResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting nextPageToken of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualNextPageToken = actual.getNextPageToken();
    if (!Objects.areEqual(actualNextPageToken, nextPageToken)) {
      failWithMessage(assertjErrorMessage, actual, nextPageToken, actualNextPageToken);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAListReferenceBasesResponse.Builder's offset is equal to the given one.
   * @param offset the given offset to compare the actual GAListReferenceBasesResponse.Builder's offset to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAListReferenceBasesResponse.Builder's offset is not equal to the given one.
   */
  public GAListReferenceBasesResponseBuilderAssert hasOffset(Long offset) {
    // check that actual GAListReferenceBasesResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting offset of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualOffset = actual.getOffset();
    if (!Objects.areEqual(actualOffset, offset)) {
      failWithMessage(assertjErrorMessage, actual, offset, actualOffset);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAListReferenceBasesResponse.Builder's sequence is equal to the given one.
   * @param sequence the given sequence to compare the actual GAListReferenceBasesResponse.Builder's sequence to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAListReferenceBasesResponse.Builder's sequence is not equal to the given one.
   */
  public GAListReferenceBasesResponseBuilderAssert hasSequence(String sequence) {
    // check that actual GAListReferenceBasesResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting sequence of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualSequence = actual.getSequence();
    if (!Objects.areEqual(actualSequence, sequence)) {
      failWithMessage(assertjErrorMessage, actual, sequence, actualSequence);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAListReferenceBasesResponse.Builder has next page token.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAListReferenceBasesResponse.Builder does not have next page token.
   */
  public GAListReferenceBasesResponseBuilderAssert hasNextPageToken() {
    // check that actual GAListReferenceBasesResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasNextPageToken()) {
      failWithMessage("\nExpecting that actual GAListReferenceBasesResponse.Builder has next page token but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAListReferenceBasesResponse.Builder does not have next page token.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAListReferenceBasesResponse.Builder has next page token.
   */
  public GAListReferenceBasesResponseBuilderAssert doesNotHaveNextPageToken() {
    // check that actual GAListReferenceBasesResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasNextPageToken()) {
      failWithMessage("\nExpecting that actual GAListReferenceBasesResponse.Builder does not have next page token but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAListReferenceBasesResponse.Builder has offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAListReferenceBasesResponse.Builder does not have offset.
   */
  public GAListReferenceBasesResponseBuilderAssert hasOffset() {
    // check that actual GAListReferenceBasesResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasOffset()) {
      failWithMessage("\nExpecting that actual GAListReferenceBasesResponse.Builder has offset but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAListReferenceBasesResponse.Builder does not have offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAListReferenceBasesResponse.Builder has offset.
   */
  public GAListReferenceBasesResponseBuilderAssert doesNotHaveOffset() {
    // check that actual GAListReferenceBasesResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasOffset()) {
      failWithMessage("\nExpecting that actual GAListReferenceBasesResponse.Builder does not have offset but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAListReferenceBasesResponse.Builder has sequence.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAListReferenceBasesResponse.Builder does not have sequence.
   */
  public GAListReferenceBasesResponseBuilderAssert hasSequence() {
    // check that actual GAListReferenceBasesResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasSequence()) {
      failWithMessage("\nExpecting that actual GAListReferenceBasesResponse.Builder has sequence but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAListReferenceBasesResponse.Builder does not have sequence.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAListReferenceBasesResponse.Builder has sequence.
   */
  public GAListReferenceBasesResponseBuilderAssert doesNotHaveSequence() {
    // check that actual GAListReferenceBasesResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasSequence()) {
      failWithMessage("\nExpecting that actual GAListReferenceBasesResponse.Builder does not have sequence but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
