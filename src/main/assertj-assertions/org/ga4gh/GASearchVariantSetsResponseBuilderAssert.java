package org.ga4gh;

/**
 * {@link GASearchVariantSetsResponse.Builder} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GASearchVariantSetsResponseBuilderAssert extends AbstractAssert<GASearchVariantSetsResponseBuilderAssert, GASearchVariantSetsResponse.Builder> {

  /**
   * Creates a new <code>{@link GASearchVariantSetsResponseBuilderAssert}</code> to make assertions on actual GASearchVariantSetsResponse.Builder.
   * @param actual the GASearchVariantSetsResponse.Builder we want to make assertions on.
   */
  public GASearchVariantSetsResponseBuilderAssert(GASearchVariantSetsResponse.Builder actual) {
    super(actual, GASearchVariantSetsResponseBuilderAssert.class);
  }

  /**
   * An entry point for GASearchVariantSetsResponseBuilderAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGASearchVariantSetsResponse.Builder)</code> and get specific assertion with code completion.
   * @param actual the GASearchVariantSetsResponse.Builder we want to make assertions on.
   * @return a new <code>{@link GASearchVariantSetsResponseBuilderAssert}</code>
   */
  public static GASearchVariantSetsResponseBuilderAssert assertThat(GASearchVariantSetsResponse.Builder actual) {
    return new GASearchVariantSetsResponseBuilderAssert(actual);
  }

  /**
   * Verifies that the actual GASearchVariantSetsResponse.Builder's nextPageToken is equal to the given one.
   * @param nextPageToken the given nextPageToken to compare the actual GASearchVariantSetsResponse.Builder's nextPageToken to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchVariantSetsResponse.Builder's nextPageToken is not equal to the given one.
   */
  public GASearchVariantSetsResponseBuilderAssert hasNextPageToken(String nextPageToken) {
    // check that actual GASearchVariantSetsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting nextPageToken of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualNextPageToken = actual.getNextPageToken();
    if (!Objects.areEqual(actualNextPageToken, nextPageToken)) {
      failWithMessage(assertjErrorMessage, actual, nextPageToken, actualNextPageToken);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchVariantSetsResponse.Builder's variantSets contains the given GAVariantSet elements.
   * @param variantSets the given elements that should be contained in actual GASearchVariantSetsResponse.Builder's variantSets.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchVariantSetsResponse.Builder's variantSets does not contain all given GAVariantSet elements.
   */
  public GASearchVariantSetsResponseBuilderAssert hasVariantSets(GAVariantSet... variantSets) {
    // check that actual GASearchVariantSetsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given GAVariantSet varargs is not null.
    if (variantSets == null) failWithMessage("Expecting variantSets parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getVariantSets(), variantSets);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchVariantSetsResponse.Builder's variantSets contains <b>only<b> the given GAVariantSet elements and nothing else in whatever order.
   * @param variantSets the given elements that should be contained in actual GASearchVariantSetsResponse.Builder's variantSets.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchVariantSetsResponse.Builder's variantSets does not contain all given GAVariantSet elements.
   */
  public GASearchVariantSetsResponseBuilderAssert hasOnlyVariantSets(GAVariantSet... variantSets) {
    // check that actual GASearchVariantSetsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given GAVariantSet varargs is not null.
    if (variantSets == null) failWithMessage("Expecting variantSets parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getVariantSets(), variantSets);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchVariantSetsResponse.Builder's variantSets does not contain the given GAVariantSet elements.
   *
   * @param variantSets the given elements that should not be in actual GASearchVariantSetsResponse.Builder's variantSets.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchVariantSetsResponse.Builder's variantSets contains any given GAVariantSet elements.
   */
  public GASearchVariantSetsResponseBuilderAssert doesNotHaveVariantSets(GAVariantSet... variantSets) {
    // check that actual GASearchVariantSetsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given GAVariantSet varargs is not null.
    if (variantSets == null) failWithMessage("Expecting variantSets parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getVariantSets(), variantSets);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchVariantSetsResponse.Builder has no variantSets.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchVariantSetsResponse.Builder's variantSets is not empty.
   */
  public GASearchVariantSetsResponseBuilderAssert hasNoVariantSets() {
    // check that actual GASearchVariantSetsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have variantSets but had :\n  <%s>";
    
    // check
    if (actual.getVariantSets().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getVariantSets());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual GASearchVariantSetsResponse.Builder has next page token.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchVariantSetsResponse.Builder does not have next page token.
   */
  public GASearchVariantSetsResponseBuilderAssert hasNextPageToken() {
    // check that actual GASearchVariantSetsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasNextPageToken()) {
      failWithMessage("\nExpecting that actual GASearchVariantSetsResponse.Builder has next page token but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchVariantSetsResponse.Builder does not have next page token.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchVariantSetsResponse.Builder has next page token.
   */
  public GASearchVariantSetsResponseBuilderAssert doesNotHaveNextPageToken() {
    // check that actual GASearchVariantSetsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasNextPageToken()) {
      failWithMessage("\nExpecting that actual GASearchVariantSetsResponse.Builder does not have next page token but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchVariantSetsResponse.Builder has variant sets.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchVariantSetsResponse.Builder does not have variant sets.
   */
  public GASearchVariantSetsResponseBuilderAssert hasVariantSets() {
    // check that actual GASearchVariantSetsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasVariantSets()) {
      failWithMessage("\nExpecting that actual GASearchVariantSetsResponse.Builder has variant sets but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchVariantSetsResponse.Builder does not have variant sets.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchVariantSetsResponse.Builder has variant sets.
   */
  public GASearchVariantSetsResponseBuilderAssert doesNotHaveVariantSets() {
    // check that actual GASearchVariantSetsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasVariantSets()) {
      failWithMessage("\nExpecting that actual GASearchVariantSetsResponse.Builder does not have variant sets but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
