package org.ga4gh;

/**
 * {@link GASearchVariantsResponse.Builder} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GASearchVariantsResponseBuilderAssert extends AbstractAssert<GASearchVariantsResponseBuilderAssert, GASearchVariantsResponse.Builder> {

  /**
   * Creates a new <code>{@link GASearchVariantsResponseBuilderAssert}</code> to make assertions on actual GASearchVariantsResponse.Builder.
   * @param actual the GASearchVariantsResponse.Builder we want to make assertions on.
   */
  public GASearchVariantsResponseBuilderAssert(GASearchVariantsResponse.Builder actual) {
    super(actual, GASearchVariantsResponseBuilderAssert.class);
  }

  /**
   * An entry point for GASearchVariantsResponseBuilderAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGASearchVariantsResponse.Builder)</code> and get specific assertion with code completion.
   * @param actual the GASearchVariantsResponse.Builder we want to make assertions on.
   * @return a new <code>{@link GASearchVariantsResponseBuilderAssert}</code>
   */
  public static GASearchVariantsResponseBuilderAssert assertThat(GASearchVariantsResponse.Builder actual) {
    return new GASearchVariantsResponseBuilderAssert(actual);
  }

  /**
   * Verifies that the actual GASearchVariantsResponse.Builder's nextPageToken is equal to the given one.
   * @param nextPageToken the given nextPageToken to compare the actual GASearchVariantsResponse.Builder's nextPageToken to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchVariantsResponse.Builder's nextPageToken is not equal to the given one.
   */
  public GASearchVariantsResponseBuilderAssert hasNextPageToken(String nextPageToken) {
    // check that actual GASearchVariantsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting nextPageToken of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualNextPageToken = actual.getNextPageToken();
    if (!Objects.areEqual(actualNextPageToken, nextPageToken)) {
      failWithMessage(assertjErrorMessage, actual, nextPageToken, actualNextPageToken);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchVariantsResponse.Builder's variants contains the given GAVariant elements.
   * @param variants the given elements that should be contained in actual GASearchVariantsResponse.Builder's variants.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchVariantsResponse.Builder's variants does not contain all given GAVariant elements.
   */
  public GASearchVariantsResponseBuilderAssert hasVariants(GAVariant... variants) {
    // check that actual GASearchVariantsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given GAVariant varargs is not null.
    if (variants == null) failWithMessage("Expecting variants parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getVariants(), variants);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchVariantsResponse.Builder's variants contains <b>only<b> the given GAVariant elements and nothing else in whatever order.
   * @param variants the given elements that should be contained in actual GASearchVariantsResponse.Builder's variants.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchVariantsResponse.Builder's variants does not contain all given GAVariant elements.
   */
  public GASearchVariantsResponseBuilderAssert hasOnlyVariants(GAVariant... variants) {
    // check that actual GASearchVariantsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given GAVariant varargs is not null.
    if (variants == null) failWithMessage("Expecting variants parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getVariants(), variants);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchVariantsResponse.Builder's variants does not contain the given GAVariant elements.
   *
   * @param variants the given elements that should not be in actual GASearchVariantsResponse.Builder's variants.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchVariantsResponse.Builder's variants contains any given GAVariant elements.
   */
  public GASearchVariantsResponseBuilderAssert doesNotHaveVariants(GAVariant... variants) {
    // check that actual GASearchVariantsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given GAVariant varargs is not null.
    if (variants == null) failWithMessage("Expecting variants parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getVariants(), variants);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchVariantsResponse.Builder has no variants.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchVariantsResponse.Builder's variants is not empty.
   */
  public GASearchVariantsResponseBuilderAssert hasNoVariants() {
    // check that actual GASearchVariantsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have variants but had :\n  <%s>";
    
    // check
    if (actual.getVariants().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getVariants());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual GASearchVariantsResponse.Builder has next page token.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchVariantsResponse.Builder does not have next page token.
   */
  public GASearchVariantsResponseBuilderAssert hasNextPageToken() {
    // check that actual GASearchVariantsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasNextPageToken()) {
      failWithMessage("\nExpecting that actual GASearchVariantsResponse.Builder has next page token but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchVariantsResponse.Builder does not have next page token.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchVariantsResponse.Builder has next page token.
   */
  public GASearchVariantsResponseBuilderAssert doesNotHaveNextPageToken() {
    // check that actual GASearchVariantsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasNextPageToken()) {
      failWithMessage("\nExpecting that actual GASearchVariantsResponse.Builder does not have next page token but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchVariantsResponse.Builder has variants.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchVariantsResponse.Builder does not have variants.
   */
  public GASearchVariantsResponseBuilderAssert hasVariants() {
    // check that actual GASearchVariantsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasVariants()) {
      failWithMessage("\nExpecting that actual GASearchVariantsResponse.Builder has variants but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchVariantsResponse.Builder does not have variants.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchVariantsResponse.Builder has variants.
   */
  public GASearchVariantsResponseBuilderAssert doesNotHaveVariants() {
    // check that actual GASearchVariantsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasVariants()) {
      failWithMessage("\nExpecting that actual GASearchVariantsResponse.Builder does not have variants but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
