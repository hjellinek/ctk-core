package org.ga4gh;

/**
 * {@link GAAnalysis.Builder} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GAAnalysisBuilderAssert extends AbstractAssert<GAAnalysisBuilderAssert, GAAnalysis.Builder> {

  /**
   * Creates a new <code>{@link GAAnalysisBuilderAssert}</code> to make assertions on actual GAAnalysis.Builder.
   * @param actual the GAAnalysis.Builder we want to make assertions on.
   */
  public GAAnalysisBuilderAssert(GAAnalysis.Builder actual) {
    super(actual, GAAnalysisBuilderAssert.class);
  }

  /**
   * An entry point for GAAnalysisBuilderAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGAAnalysis.Builder)</code> and get specific assertion with code completion.
   * @param actual the GAAnalysis.Builder we want to make assertions on.
   * @return a new <code>{@link GAAnalysisBuilderAssert}</code>
   */
  public static GAAnalysisBuilderAssert assertThat(GAAnalysis.Builder actual) {
    return new GAAnalysisBuilderAssert(actual);
  }

  /**
   * Verifies that the actual GAAnalysis.Builder's created is equal to the given one.
   * @param created the given created to compare the actual GAAnalysis.Builder's created to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAAnalysis.Builder's created is not equal to the given one.
   */
  public GAAnalysisBuilderAssert hasCreated(Long created) {
    // check that actual GAAnalysis.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting created of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualCreated = actual.getCreated();
    if (!Objects.areEqual(actualCreated, created)) {
      failWithMessage(assertjErrorMessage, actual, created, actualCreated);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis.Builder's description is equal to the given one.
   * @param description the given description to compare the actual GAAnalysis.Builder's description to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAAnalysis.Builder's description is not equal to the given one.
   */
  public GAAnalysisBuilderAssert hasDescription(String description) {
    // check that actual GAAnalysis.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualDescription = actual.getDescription();
    if (!Objects.areEqual(actualDescription, description)) {
      failWithMessage(assertjErrorMessage, actual, description, actualDescription);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis.Builder's id is equal to the given one.
   * @param id the given id to compare the actual GAAnalysis.Builder's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAAnalysis.Builder's id is not equal to the given one.
   */
  public GAAnalysisBuilderAssert hasId(String id) {
    // check that actual GAAnalysis.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis.Builder's info is equal to the given one.
   * @param info the given info to compare the actual GAAnalysis.Builder's info to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAAnalysis.Builder's info is not equal to the given one.
   */
  public GAAnalysisBuilderAssert hasInfo(java.util.Map info) {
    // check that actual GAAnalysis.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting info of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.util.Map actualInfo = actual.getInfo();
    if (!Objects.areEqual(actualInfo, info)) {
      failWithMessage(assertjErrorMessage, actual, info, actualInfo);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis.Builder's name is equal to the given one.
   * @param name the given name to compare the actual GAAnalysis.Builder's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAAnalysis.Builder's name is not equal to the given one.
   */
  public GAAnalysisBuilderAssert hasName(String name) {
    // check that actual GAAnalysis.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis.Builder's software contains the given String elements.
   * @param software the given elements that should be contained in actual GAAnalysis.Builder's software.
   * @return this assertion object.
   * @throws AssertionError if the actual GAAnalysis.Builder's software does not contain all given String elements.
   */
  public GAAnalysisBuilderAssert hasSoftware(String... software) {
    // check that actual GAAnalysis.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (software == null) failWithMessage("Expecting software parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getSoftware(), software);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis.Builder's software contains <b>only<b> the given String elements and nothing else in whatever order.
   * @param software the given elements that should be contained in actual GAAnalysis.Builder's software.
   * @return this assertion object.
   * @throws AssertionError if the actual GAAnalysis.Builder's software does not contain all given String elements.
   */
  public GAAnalysisBuilderAssert hasOnlySoftware(String... software) {
    // check that actual GAAnalysis.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (software == null) failWithMessage("Expecting software parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getSoftware(), software);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis.Builder's software does not contain the given String elements.
   *
   * @param software the given elements that should not be in actual GAAnalysis.Builder's software.
   * @return this assertion object.
   * @throws AssertionError if the actual GAAnalysis.Builder's software contains any given String elements.
   */
  public GAAnalysisBuilderAssert doesNotHaveSoftware(String... software) {
    // check that actual GAAnalysis.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (software == null) failWithMessage("Expecting software parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getSoftware(), software);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis.Builder has no software.
   * @return this assertion object.
   * @throws AssertionError if the actual GAAnalysis.Builder's software is not empty.
   */
  public GAAnalysisBuilderAssert hasNoSoftware() {
    // check that actual GAAnalysis.Builder we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have software but had :\n  <%s>";
    
    // check
    if (actual.getSoftware().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getSoftware());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual GAAnalysis.Builder's type is equal to the given one.
   * @param type the given type to compare the actual GAAnalysis.Builder's type to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAAnalysis.Builder's type is not equal to the given one.
   */
  public GAAnalysisBuilderAssert hasType(String type) {
    // check that actual GAAnalysis.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting type of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualType = actual.getType();
    if (!Objects.areEqual(actualType, type)) {
      failWithMessage(assertjErrorMessage, actual, type, actualType);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis.Builder's updated is equal to the given one.
   * @param updated the given updated to compare the actual GAAnalysis.Builder's updated to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAAnalysis.Builder's updated is not equal to the given one.
   */
  public GAAnalysisBuilderAssert hasUpdated(Long updated) {
    // check that actual GAAnalysis.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting updated of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualUpdated = actual.getUpdated();
    if (!Objects.areEqual(actualUpdated, updated)) {
      failWithMessage(assertjErrorMessage, actual, updated, actualUpdated);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis.Builder has created.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAAnalysis.Builder does not have created.
   */
  public GAAnalysisBuilderAssert hasCreated() {
    // check that actual GAAnalysis.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasCreated()) {
      failWithMessage("\nExpecting that actual GAAnalysis.Builder has created but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis.Builder does not have created.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAAnalysis.Builder has created.
   */
  public GAAnalysisBuilderAssert doesNotHaveCreated() {
    // check that actual GAAnalysis.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasCreated()) {
      failWithMessage("\nExpecting that actual GAAnalysis.Builder does not have created but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis.Builder has description.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAAnalysis.Builder does not have description.
   */
  public GAAnalysisBuilderAssert hasDescription() {
    // check that actual GAAnalysis.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasDescription()) {
      failWithMessage("\nExpecting that actual GAAnalysis.Builder has description but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis.Builder does not have description.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAAnalysis.Builder has description.
   */
  public GAAnalysisBuilderAssert doesNotHaveDescription() {
    // check that actual GAAnalysis.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasDescription()) {
      failWithMessage("\nExpecting that actual GAAnalysis.Builder does not have description but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis.Builder has id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAAnalysis.Builder does not have id.
   */
  public GAAnalysisBuilderAssert hasId() {
    // check that actual GAAnalysis.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasId()) {
      failWithMessage("\nExpecting that actual GAAnalysis.Builder has id but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis.Builder does not have id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAAnalysis.Builder has id.
   */
  public GAAnalysisBuilderAssert doesNotHaveId() {
    // check that actual GAAnalysis.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasId()) {
      failWithMessage("\nExpecting that actual GAAnalysis.Builder does not have id but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis.Builder has info.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAAnalysis.Builder does not have info.
   */
  public GAAnalysisBuilderAssert hasInfo() {
    // check that actual GAAnalysis.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasInfo()) {
      failWithMessage("\nExpecting that actual GAAnalysis.Builder has info but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis.Builder does not have info.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAAnalysis.Builder has info.
   */
  public GAAnalysisBuilderAssert doesNotHaveInfo() {
    // check that actual GAAnalysis.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasInfo()) {
      failWithMessage("\nExpecting that actual GAAnalysis.Builder does not have info but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis.Builder has name.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAAnalysis.Builder does not have name.
   */
  public GAAnalysisBuilderAssert hasName() {
    // check that actual GAAnalysis.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasName()) {
      failWithMessage("\nExpecting that actual GAAnalysis.Builder has name but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis.Builder does not have name.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAAnalysis.Builder has name.
   */
  public GAAnalysisBuilderAssert doesNotHaveName() {
    // check that actual GAAnalysis.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasName()) {
      failWithMessage("\nExpecting that actual GAAnalysis.Builder does not have name but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis.Builder has software.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAAnalysis.Builder does not have software.
   */
  public GAAnalysisBuilderAssert hasSoftware() {
    // check that actual GAAnalysis.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasSoftware()) {
      failWithMessage("\nExpecting that actual GAAnalysis.Builder has software but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis.Builder does not have software.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAAnalysis.Builder has software.
   */
  public GAAnalysisBuilderAssert doesNotHaveSoftware() {
    // check that actual GAAnalysis.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasSoftware()) {
      failWithMessage("\nExpecting that actual GAAnalysis.Builder does not have software but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis.Builder has type.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAAnalysis.Builder does not have type.
   */
  public GAAnalysisBuilderAssert hasType() {
    // check that actual GAAnalysis.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasType()) {
      failWithMessage("\nExpecting that actual GAAnalysis.Builder has type but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis.Builder does not have type.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAAnalysis.Builder has type.
   */
  public GAAnalysisBuilderAssert doesNotHaveType() {
    // check that actual GAAnalysis.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasType()) {
      failWithMessage("\nExpecting that actual GAAnalysis.Builder does not have type but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis.Builder has updated.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAAnalysis.Builder does not have updated.
   */
  public GAAnalysisBuilderAssert hasUpdated() {
    // check that actual GAAnalysis.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasUpdated()) {
      failWithMessage("\nExpecting that actual GAAnalysis.Builder has updated but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis.Builder does not have updated.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAAnalysis.Builder has updated.
   */
  public GAAnalysisBuilderAssert doesNotHaveUpdated() {
    // check that actual GAAnalysis.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasUpdated()) {
      failWithMessage("\nExpecting that actual GAAnalysis.Builder does not have updated but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
