package org.ga4gh;

/**
 * {@link GASearchIndividualGroupsResponse.Builder} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GASearchIndividualGroupsResponseBuilderAssert extends AbstractAssert<GASearchIndividualGroupsResponseBuilderAssert, GASearchIndividualGroupsResponse.Builder> {

  /**
   * Creates a new <code>{@link GASearchIndividualGroupsResponseBuilderAssert}</code> to make assertions on actual GASearchIndividualGroupsResponse.Builder.
   * @param actual the GASearchIndividualGroupsResponse.Builder we want to make assertions on.
   */
  public GASearchIndividualGroupsResponseBuilderAssert(GASearchIndividualGroupsResponse.Builder actual) {
    super(actual, GASearchIndividualGroupsResponseBuilderAssert.class);
  }

  /**
   * An entry point for GASearchIndividualGroupsResponseBuilderAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGASearchIndividualGroupsResponse.Builder)</code> and get specific assertion with code completion.
   * @param actual the GASearchIndividualGroupsResponse.Builder we want to make assertions on.
   * @return a new <code>{@link GASearchIndividualGroupsResponseBuilderAssert}</code>
   */
  public static GASearchIndividualGroupsResponseBuilderAssert assertThat(GASearchIndividualGroupsResponse.Builder actual) {
    return new GASearchIndividualGroupsResponseBuilderAssert(actual);
  }

  /**
   * Verifies that the actual GASearchIndividualGroupsResponse.Builder's individualGroups contains the given GAIndividualGroup elements.
   * @param individualGroups the given elements that should be contained in actual GASearchIndividualGroupsResponse.Builder's individualGroups.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchIndividualGroupsResponse.Builder's individualGroups does not contain all given GAIndividualGroup elements.
   */
  public GASearchIndividualGroupsResponseBuilderAssert hasIndividualGroups(GAIndividualGroup... individualGroups) {
    // check that actual GASearchIndividualGroupsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given GAIndividualGroup varargs is not null.
    if (individualGroups == null) failWithMessage("Expecting individualGroups parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getIndividualGroups(), individualGroups);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchIndividualGroupsResponse.Builder's individualGroups contains <b>only<b> the given GAIndividualGroup elements and nothing else in whatever order.
   * @param individualGroups the given elements that should be contained in actual GASearchIndividualGroupsResponse.Builder's individualGroups.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchIndividualGroupsResponse.Builder's individualGroups does not contain all given GAIndividualGroup elements.
   */
  public GASearchIndividualGroupsResponseBuilderAssert hasOnlyIndividualGroups(GAIndividualGroup... individualGroups) {
    // check that actual GASearchIndividualGroupsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given GAIndividualGroup varargs is not null.
    if (individualGroups == null) failWithMessage("Expecting individualGroups parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getIndividualGroups(), individualGroups);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchIndividualGroupsResponse.Builder's individualGroups does not contain the given GAIndividualGroup elements.
   *
   * @param individualGroups the given elements that should not be in actual GASearchIndividualGroupsResponse.Builder's individualGroups.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchIndividualGroupsResponse.Builder's individualGroups contains any given GAIndividualGroup elements.
   */
  public GASearchIndividualGroupsResponseBuilderAssert doesNotHaveIndividualGroups(GAIndividualGroup... individualGroups) {
    // check that actual GASearchIndividualGroupsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given GAIndividualGroup varargs is not null.
    if (individualGroups == null) failWithMessage("Expecting individualGroups parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getIndividualGroups(), individualGroups);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchIndividualGroupsResponse.Builder has no individualGroups.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchIndividualGroupsResponse.Builder's individualGroups is not empty.
   */
  public GASearchIndividualGroupsResponseBuilderAssert hasNoIndividualGroups() {
    // check that actual GASearchIndividualGroupsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have individualGroups but had :\n  <%s>";
    
    // check
    if (actual.getIndividualGroups().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getIndividualGroups());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual GASearchIndividualGroupsResponse.Builder's nextPageToken is equal to the given one.
   * @param nextPageToken the given nextPageToken to compare the actual GASearchIndividualGroupsResponse.Builder's nextPageToken to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchIndividualGroupsResponse.Builder's nextPageToken is not equal to the given one.
   */
  public GASearchIndividualGroupsResponseBuilderAssert hasNextPageToken(String nextPageToken) {
    // check that actual GASearchIndividualGroupsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting nextPageToken of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualNextPageToken = actual.getNextPageToken();
    if (!Objects.areEqual(actualNextPageToken, nextPageToken)) {
      failWithMessage(assertjErrorMessage, actual, nextPageToken, actualNextPageToken);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchIndividualGroupsResponse.Builder has individual groups.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchIndividualGroupsResponse.Builder does not have individual groups.
   */
  public GASearchIndividualGroupsResponseBuilderAssert hasIndividualGroups() {
    // check that actual GASearchIndividualGroupsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasIndividualGroups()) {
      failWithMessage("\nExpecting that actual GASearchIndividualGroupsResponse.Builder has individual groups but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchIndividualGroupsResponse.Builder does not have individual groups.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchIndividualGroupsResponse.Builder has individual groups.
   */
  public GASearchIndividualGroupsResponseBuilderAssert doesNotHaveIndividualGroups() {
    // check that actual GASearchIndividualGroupsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasIndividualGroups()) {
      failWithMessage("\nExpecting that actual GASearchIndividualGroupsResponse.Builder does not have individual groups but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchIndividualGroupsResponse.Builder has next page token.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchIndividualGroupsResponse.Builder does not have next page token.
   */
  public GASearchIndividualGroupsResponseBuilderAssert hasNextPageToken() {
    // check that actual GASearchIndividualGroupsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasNextPageToken()) {
      failWithMessage("\nExpecting that actual GASearchIndividualGroupsResponse.Builder has next page token but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchIndividualGroupsResponse.Builder does not have next page token.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchIndividualGroupsResponse.Builder has next page token.
   */
  public GASearchIndividualGroupsResponseBuilderAssert doesNotHaveNextPageToken() {
    // check that actual GASearchIndividualGroupsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasNextPageToken()) {
      failWithMessage("\nExpecting that actual GASearchIndividualGroupsResponse.Builder does not have next page token but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
