package org.ga4gh;

/**
 * {@link GASearchCallSetsRequest.Builder} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GASearchCallSetsRequestBuilderAssert extends AbstractAssert<GASearchCallSetsRequestBuilderAssert, GASearchCallSetsRequest.Builder> {

  /**
   * Creates a new <code>{@link GASearchCallSetsRequestBuilderAssert}</code> to make assertions on actual GASearchCallSetsRequest.Builder.
   * @param actual the GASearchCallSetsRequest.Builder we want to make assertions on.
   */
  public GASearchCallSetsRequestBuilderAssert(GASearchCallSetsRequest.Builder actual) {
    super(actual, GASearchCallSetsRequestBuilderAssert.class);
  }

  /**
   * An entry point for GASearchCallSetsRequestBuilderAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGASearchCallSetsRequest.Builder)</code> and get specific assertion with code completion.
   * @param actual the GASearchCallSetsRequest.Builder we want to make assertions on.
   * @return a new <code>{@link GASearchCallSetsRequestBuilderAssert}</code>
   */
  public static GASearchCallSetsRequestBuilderAssert assertThat(GASearchCallSetsRequest.Builder actual) {
    return new GASearchCallSetsRequestBuilderAssert(actual);
  }

  /**
   * Verifies that the actual GASearchCallSetsRequest.Builder's name is equal to the given one.
   * @param name the given name to compare the actual GASearchCallSetsRequest.Builder's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchCallSetsRequest.Builder's name is not equal to the given one.
   */
  public GASearchCallSetsRequestBuilderAssert hasName(String name) {
    // check that actual GASearchCallSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchCallSetsRequest.Builder's pageSize is equal to the given one.
   * @param pageSize the given pageSize to compare the actual GASearchCallSetsRequest.Builder's pageSize to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchCallSetsRequest.Builder's pageSize is not equal to the given one.
   */
  public GASearchCallSetsRequestBuilderAssert hasPageSize(Integer pageSize) {
    // check that actual GASearchCallSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting pageSize of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualPageSize = actual.getPageSize();
    if (!Objects.areEqual(actualPageSize, pageSize)) {
      failWithMessage(assertjErrorMessage, actual, pageSize, actualPageSize);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchCallSetsRequest.Builder's pageToken is equal to the given one.
   * @param pageToken the given pageToken to compare the actual GASearchCallSetsRequest.Builder's pageToken to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchCallSetsRequest.Builder's pageToken is not equal to the given one.
   */
  public GASearchCallSetsRequestBuilderAssert hasPageToken(String pageToken) {
    // check that actual GASearchCallSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting pageToken of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualPageToken = actual.getPageToken();
    if (!Objects.areEqual(actualPageToken, pageToken)) {
      failWithMessage(assertjErrorMessage, actual, pageToken, actualPageToken);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchCallSetsRequest.Builder's variantSetIds contains the given String elements.
   * @param variantSetIds the given elements that should be contained in actual GASearchCallSetsRequest.Builder's variantSetIds.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchCallSetsRequest.Builder's variantSetIds does not contain all given String elements.
   */
  public GASearchCallSetsRequestBuilderAssert hasVariantSetIds(String... variantSetIds) {
    // check that actual GASearchCallSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (variantSetIds == null) failWithMessage("Expecting variantSetIds parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getVariantSetIds(), variantSetIds);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchCallSetsRequest.Builder's variantSetIds contains <b>only<b> the given String elements and nothing else in whatever order.
   * @param variantSetIds the given elements that should be contained in actual GASearchCallSetsRequest.Builder's variantSetIds.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchCallSetsRequest.Builder's variantSetIds does not contain all given String elements.
   */
  public GASearchCallSetsRequestBuilderAssert hasOnlyVariantSetIds(String... variantSetIds) {
    // check that actual GASearchCallSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (variantSetIds == null) failWithMessage("Expecting variantSetIds parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getVariantSetIds(), variantSetIds);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchCallSetsRequest.Builder's variantSetIds does not contain the given String elements.
   *
   * @param variantSetIds the given elements that should not be in actual GASearchCallSetsRequest.Builder's variantSetIds.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchCallSetsRequest.Builder's variantSetIds contains any given String elements.
   */
  public GASearchCallSetsRequestBuilderAssert doesNotHaveVariantSetIds(String... variantSetIds) {
    // check that actual GASearchCallSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (variantSetIds == null) failWithMessage("Expecting variantSetIds parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getVariantSetIds(), variantSetIds);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchCallSetsRequest.Builder has no variantSetIds.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchCallSetsRequest.Builder's variantSetIds is not empty.
   */
  public GASearchCallSetsRequestBuilderAssert hasNoVariantSetIds() {
    // check that actual GASearchCallSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have variantSetIds but had :\n  <%s>";
    
    // check
    if (actual.getVariantSetIds().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getVariantSetIds());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual GASearchCallSetsRequest.Builder has name.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchCallSetsRequest.Builder does not have name.
   */
  public GASearchCallSetsRequestBuilderAssert hasName() {
    // check that actual GASearchCallSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasName()) {
      failWithMessage("\nExpecting that actual GASearchCallSetsRequest.Builder has name but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchCallSetsRequest.Builder does not have name.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchCallSetsRequest.Builder has name.
   */
  public GASearchCallSetsRequestBuilderAssert doesNotHaveName() {
    // check that actual GASearchCallSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasName()) {
      failWithMessage("\nExpecting that actual GASearchCallSetsRequest.Builder does not have name but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchCallSetsRequest.Builder has page size.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchCallSetsRequest.Builder does not have page size.
   */
  public GASearchCallSetsRequestBuilderAssert hasPageSize() {
    // check that actual GASearchCallSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasPageSize()) {
      failWithMessage("\nExpecting that actual GASearchCallSetsRequest.Builder has page size but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchCallSetsRequest.Builder does not have page size.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchCallSetsRequest.Builder has page size.
   */
  public GASearchCallSetsRequestBuilderAssert doesNotHavePageSize() {
    // check that actual GASearchCallSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasPageSize()) {
      failWithMessage("\nExpecting that actual GASearchCallSetsRequest.Builder does not have page size but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchCallSetsRequest.Builder has page token.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchCallSetsRequest.Builder does not have page token.
   */
  public GASearchCallSetsRequestBuilderAssert hasPageToken() {
    // check that actual GASearchCallSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasPageToken()) {
      failWithMessage("\nExpecting that actual GASearchCallSetsRequest.Builder has page token but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchCallSetsRequest.Builder does not have page token.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchCallSetsRequest.Builder has page token.
   */
  public GASearchCallSetsRequestBuilderAssert doesNotHavePageToken() {
    // check that actual GASearchCallSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasPageToken()) {
      failWithMessage("\nExpecting that actual GASearchCallSetsRequest.Builder does not have page token but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchCallSetsRequest.Builder has variant set ids.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchCallSetsRequest.Builder does not have variant set ids.
   */
  public GASearchCallSetsRequestBuilderAssert hasVariantSetIds() {
    // check that actual GASearchCallSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasVariantSetIds()) {
      failWithMessage("\nExpecting that actual GASearchCallSetsRequest.Builder has variant set ids but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchCallSetsRequest.Builder does not have variant set ids.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchCallSetsRequest.Builder has variant set ids.
   */
  public GASearchCallSetsRequestBuilderAssert doesNotHaveVariantSetIds() {
    // check that actual GASearchCallSetsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasVariantSetIds()) {
      failWithMessage("\nExpecting that actual GASearchCallSetsRequest.Builder does not have variant set ids but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
