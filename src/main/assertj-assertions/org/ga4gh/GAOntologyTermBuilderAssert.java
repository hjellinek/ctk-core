package org.ga4gh;

/**
 * {@link GAOntologyTerm.Builder} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GAOntologyTermBuilderAssert extends AbstractAssert<GAOntologyTermBuilderAssert, GAOntologyTerm.Builder> {

  /**
   * Creates a new <code>{@link GAOntologyTermBuilderAssert}</code> to make assertions on actual GAOntologyTerm.Builder.
   * @param actual the GAOntologyTerm.Builder we want to make assertions on.
   */
  public GAOntologyTermBuilderAssert(GAOntologyTerm.Builder actual) {
    super(actual, GAOntologyTermBuilderAssert.class);
  }

  /**
   * An entry point for GAOntologyTermBuilderAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGAOntologyTerm.Builder)</code> and get specific assertion with code completion.
   * @param actual the GAOntologyTerm.Builder we want to make assertions on.
   * @return a new <code>{@link GAOntologyTermBuilderAssert}</code>
   */
  public static GAOntologyTermBuilderAssert assertThat(GAOntologyTerm.Builder actual) {
    return new GAOntologyTermBuilderAssert(actual);
  }

  /**
   * Verifies that the actual GAOntologyTerm.Builder's id is equal to the given one.
   * @param id the given id to compare the actual GAOntologyTerm.Builder's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAOntologyTerm.Builder's id is not equal to the given one.
   */
  public GAOntologyTermBuilderAssert hasId(String id) {
    // check that actual GAOntologyTerm.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAOntologyTerm.Builder's name is equal to the given one.
   * @param name the given name to compare the actual GAOntologyTerm.Builder's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAOntologyTerm.Builder's name is not equal to the given one.
   */
  public GAOntologyTermBuilderAssert hasName(String name) {
    // check that actual GAOntologyTerm.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAOntologyTerm.Builder's ontologySource is equal to the given one.
   * @param ontologySource the given ontologySource to compare the actual GAOntologyTerm.Builder's ontologySource to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAOntologyTerm.Builder's ontologySource is not equal to the given one.
   */
  public GAOntologyTermBuilderAssert hasOntologySource(String ontologySource) {
    // check that actual GAOntologyTerm.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting ontologySource of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualOntologySource = actual.getOntologySource();
    if (!Objects.areEqual(actualOntologySource, ontologySource)) {
      failWithMessage(assertjErrorMessage, actual, ontologySource, actualOntologySource);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAOntologyTerm.Builder has id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAOntologyTerm.Builder does not have id.
   */
  public GAOntologyTermBuilderAssert hasId() {
    // check that actual GAOntologyTerm.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasId()) {
      failWithMessage("\nExpecting that actual GAOntologyTerm.Builder has id but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAOntologyTerm.Builder does not have id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAOntologyTerm.Builder has id.
   */
  public GAOntologyTermBuilderAssert doesNotHaveId() {
    // check that actual GAOntologyTerm.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasId()) {
      failWithMessage("\nExpecting that actual GAOntologyTerm.Builder does not have id but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAOntologyTerm.Builder has name.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAOntologyTerm.Builder does not have name.
   */
  public GAOntologyTermBuilderAssert hasName() {
    // check that actual GAOntologyTerm.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasName()) {
      failWithMessage("\nExpecting that actual GAOntologyTerm.Builder has name but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAOntologyTerm.Builder does not have name.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAOntologyTerm.Builder has name.
   */
  public GAOntologyTermBuilderAssert doesNotHaveName() {
    // check that actual GAOntologyTerm.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasName()) {
      failWithMessage("\nExpecting that actual GAOntologyTerm.Builder does not have name but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAOntologyTerm.Builder has ontology source.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAOntologyTerm.Builder does not have ontology source.
   */
  public GAOntologyTermBuilderAssert hasOntologySource() {
    // check that actual GAOntologyTerm.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasOntologySource()) {
      failWithMessage("\nExpecting that actual GAOntologyTerm.Builder has ontology source but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAOntologyTerm.Builder does not have ontology source.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAOntologyTerm.Builder has ontology source.
   */
  public GAOntologyTermBuilderAssert doesNotHaveOntologySource() {
    // check that actual GAOntologyTerm.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasOntologySource()) {
      failWithMessage("\nExpecting that actual GAOntologyTerm.Builder does not have ontology source but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
