package org.ga4gh;

/**
 * {@link GASearchCallSetsResponse.Builder} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GASearchCallSetsResponseBuilderAssert extends AbstractAssert<GASearchCallSetsResponseBuilderAssert, GASearchCallSetsResponse.Builder> {

  /**
   * Creates a new <code>{@link GASearchCallSetsResponseBuilderAssert}</code> to make assertions on actual GASearchCallSetsResponse.Builder.
   * @param actual the GASearchCallSetsResponse.Builder we want to make assertions on.
   */
  public GASearchCallSetsResponseBuilderAssert(GASearchCallSetsResponse.Builder actual) {
    super(actual, GASearchCallSetsResponseBuilderAssert.class);
  }

  /**
   * An entry point for GASearchCallSetsResponseBuilderAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGASearchCallSetsResponse.Builder)</code> and get specific assertion with code completion.
   * @param actual the GASearchCallSetsResponse.Builder we want to make assertions on.
   * @return a new <code>{@link GASearchCallSetsResponseBuilderAssert}</code>
   */
  public static GASearchCallSetsResponseBuilderAssert assertThat(GASearchCallSetsResponse.Builder actual) {
    return new GASearchCallSetsResponseBuilderAssert(actual);
  }

  /**
   * Verifies that the actual GASearchCallSetsResponse.Builder's callSets contains the given GACallSet elements.
   * @param callSets the given elements that should be contained in actual GASearchCallSetsResponse.Builder's callSets.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchCallSetsResponse.Builder's callSets does not contain all given GACallSet elements.
   */
  public GASearchCallSetsResponseBuilderAssert hasCallSets(GACallSet... callSets) {
    // check that actual GASearchCallSetsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given GACallSet varargs is not null.
    if (callSets == null) failWithMessage("Expecting callSets parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getCallSets(), callSets);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchCallSetsResponse.Builder's callSets contains <b>only<b> the given GACallSet elements and nothing else in whatever order.
   * @param callSets the given elements that should be contained in actual GASearchCallSetsResponse.Builder's callSets.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchCallSetsResponse.Builder's callSets does not contain all given GACallSet elements.
   */
  public GASearchCallSetsResponseBuilderAssert hasOnlyCallSets(GACallSet... callSets) {
    // check that actual GASearchCallSetsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given GACallSet varargs is not null.
    if (callSets == null) failWithMessage("Expecting callSets parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getCallSets(), callSets);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchCallSetsResponse.Builder's callSets does not contain the given GACallSet elements.
   *
   * @param callSets the given elements that should not be in actual GASearchCallSetsResponse.Builder's callSets.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchCallSetsResponse.Builder's callSets contains any given GACallSet elements.
   */
  public GASearchCallSetsResponseBuilderAssert doesNotHaveCallSets(GACallSet... callSets) {
    // check that actual GASearchCallSetsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given GACallSet varargs is not null.
    if (callSets == null) failWithMessage("Expecting callSets parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getCallSets(), callSets);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchCallSetsResponse.Builder has no callSets.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchCallSetsResponse.Builder's callSets is not empty.
   */
  public GASearchCallSetsResponseBuilderAssert hasNoCallSets() {
    // check that actual GASearchCallSetsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have callSets but had :\n  <%s>";
    
    // check
    if (actual.getCallSets().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getCallSets());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual GASearchCallSetsResponse.Builder's nextPageToken is equal to the given one.
   * @param nextPageToken the given nextPageToken to compare the actual GASearchCallSetsResponse.Builder's nextPageToken to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchCallSetsResponse.Builder's nextPageToken is not equal to the given one.
   */
  public GASearchCallSetsResponseBuilderAssert hasNextPageToken(String nextPageToken) {
    // check that actual GASearchCallSetsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting nextPageToken of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualNextPageToken = actual.getNextPageToken();
    if (!Objects.areEqual(actualNextPageToken, nextPageToken)) {
      failWithMessage(assertjErrorMessage, actual, nextPageToken, actualNextPageToken);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchCallSetsResponse.Builder has call sets.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchCallSetsResponse.Builder does not have call sets.
   */
  public GASearchCallSetsResponseBuilderAssert hasCallSets() {
    // check that actual GASearchCallSetsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasCallSets()) {
      failWithMessage("\nExpecting that actual GASearchCallSetsResponse.Builder has call sets but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchCallSetsResponse.Builder does not have call sets.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchCallSetsResponse.Builder has call sets.
   */
  public GASearchCallSetsResponseBuilderAssert doesNotHaveCallSets() {
    // check that actual GASearchCallSetsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasCallSets()) {
      failWithMessage("\nExpecting that actual GASearchCallSetsResponse.Builder does not have call sets but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchCallSetsResponse.Builder has next page token.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchCallSetsResponse.Builder does not have next page token.
   */
  public GASearchCallSetsResponseBuilderAssert hasNextPageToken() {
    // check that actual GASearchCallSetsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasNextPageToken()) {
      failWithMessage("\nExpecting that actual GASearchCallSetsResponse.Builder has next page token but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchCallSetsResponse.Builder does not have next page token.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchCallSetsResponse.Builder has next page token.
   */
  public GASearchCallSetsResponseBuilderAssert doesNotHaveNextPageToken() {
    // check that actual GASearchCallSetsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasNextPageToken()) {
      failWithMessage("\nExpecting that actual GASearchCallSetsResponse.Builder does not have next page token but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
