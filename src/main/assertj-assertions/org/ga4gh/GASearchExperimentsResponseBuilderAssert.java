package org.ga4gh;

/**
 * {@link GASearchExperimentsResponse.Builder} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GASearchExperimentsResponseBuilderAssert extends AbstractAssert<GASearchExperimentsResponseBuilderAssert, GASearchExperimentsResponse.Builder> {

  /**
   * Creates a new <code>{@link GASearchExperimentsResponseBuilderAssert}</code> to make assertions on actual GASearchExperimentsResponse.Builder.
   * @param actual the GASearchExperimentsResponse.Builder we want to make assertions on.
   */
  public GASearchExperimentsResponseBuilderAssert(GASearchExperimentsResponse.Builder actual) {
    super(actual, GASearchExperimentsResponseBuilderAssert.class);
  }

  /**
   * An entry point for GASearchExperimentsResponseBuilderAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGASearchExperimentsResponse.Builder)</code> and get specific assertion with code completion.
   * @param actual the GASearchExperimentsResponse.Builder we want to make assertions on.
   * @return a new <code>{@link GASearchExperimentsResponseBuilderAssert}</code>
   */
  public static GASearchExperimentsResponseBuilderAssert assertThat(GASearchExperimentsResponse.Builder actual) {
    return new GASearchExperimentsResponseBuilderAssert(actual);
  }

  /**
   * Verifies that the actual GASearchExperimentsResponse.Builder's experiments contains the given GAExperiment elements.
   * @param experiments the given elements that should be contained in actual GASearchExperimentsResponse.Builder's experiments.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchExperimentsResponse.Builder's experiments does not contain all given GAExperiment elements.
   */
  public GASearchExperimentsResponseBuilderAssert hasExperiments(GAExperiment... experiments) {
    // check that actual GASearchExperimentsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given GAExperiment varargs is not null.
    if (experiments == null) failWithMessage("Expecting experiments parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getExperiments(), experiments);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchExperimentsResponse.Builder's experiments contains <b>only<b> the given GAExperiment elements and nothing else in whatever order.
   * @param experiments the given elements that should be contained in actual GASearchExperimentsResponse.Builder's experiments.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchExperimentsResponse.Builder's experiments does not contain all given GAExperiment elements.
   */
  public GASearchExperimentsResponseBuilderAssert hasOnlyExperiments(GAExperiment... experiments) {
    // check that actual GASearchExperimentsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given GAExperiment varargs is not null.
    if (experiments == null) failWithMessage("Expecting experiments parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getExperiments(), experiments);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchExperimentsResponse.Builder's experiments does not contain the given GAExperiment elements.
   *
   * @param experiments the given elements that should not be in actual GASearchExperimentsResponse.Builder's experiments.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchExperimentsResponse.Builder's experiments contains any given GAExperiment elements.
   */
  public GASearchExperimentsResponseBuilderAssert doesNotHaveExperiments(GAExperiment... experiments) {
    // check that actual GASearchExperimentsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given GAExperiment varargs is not null.
    if (experiments == null) failWithMessage("Expecting experiments parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getExperiments(), experiments);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchExperimentsResponse.Builder has no experiments.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchExperimentsResponse.Builder's experiments is not empty.
   */
  public GASearchExperimentsResponseBuilderAssert hasNoExperiments() {
    // check that actual GASearchExperimentsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have experiments but had :\n  <%s>";
    
    // check
    if (actual.getExperiments().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getExperiments());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual GASearchExperimentsResponse.Builder's nextPageToken is equal to the given one.
   * @param nextPageToken the given nextPageToken to compare the actual GASearchExperimentsResponse.Builder's nextPageToken to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchExperimentsResponse.Builder's nextPageToken is not equal to the given one.
   */
  public GASearchExperimentsResponseBuilderAssert hasNextPageToken(String nextPageToken) {
    // check that actual GASearchExperimentsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting nextPageToken of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualNextPageToken = actual.getNextPageToken();
    if (!Objects.areEqual(actualNextPageToken, nextPageToken)) {
      failWithMessage(assertjErrorMessage, actual, nextPageToken, actualNextPageToken);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchExperimentsResponse.Builder has experiments.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchExperimentsResponse.Builder does not have experiments.
   */
  public GASearchExperimentsResponseBuilderAssert hasExperiments() {
    // check that actual GASearchExperimentsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasExperiments()) {
      failWithMessage("\nExpecting that actual GASearchExperimentsResponse.Builder has experiments but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchExperimentsResponse.Builder does not have experiments.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchExperimentsResponse.Builder has experiments.
   */
  public GASearchExperimentsResponseBuilderAssert doesNotHaveExperiments() {
    // check that actual GASearchExperimentsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasExperiments()) {
      failWithMessage("\nExpecting that actual GASearchExperimentsResponse.Builder does not have experiments but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchExperimentsResponse.Builder has next page token.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchExperimentsResponse.Builder does not have next page token.
   */
  public GASearchExperimentsResponseBuilderAssert hasNextPageToken() {
    // check that actual GASearchExperimentsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasNextPageToken()) {
      failWithMessage("\nExpecting that actual GASearchExperimentsResponse.Builder has next page token but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchExperimentsResponse.Builder does not have next page token.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchExperimentsResponse.Builder has next page token.
   */
  public GASearchExperimentsResponseBuilderAssert doesNotHaveNextPageToken() {
    // check that actual GASearchExperimentsResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasNextPageToken()) {
      failWithMessage("\nExpecting that actual GASearchExperimentsResponse.Builder does not have next page token but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
