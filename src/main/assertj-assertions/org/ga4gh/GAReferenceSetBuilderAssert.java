package org.ga4gh;

/**
 * {@link GAReferenceSet.Builder} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GAReferenceSetBuilderAssert extends AbstractAssert<GAReferenceSetBuilderAssert, GAReferenceSet.Builder> {

  /**
   * Creates a new <code>{@link GAReferenceSetBuilderAssert}</code> to make assertions on actual GAReferenceSet.Builder.
   * @param actual the GAReferenceSet.Builder we want to make assertions on.
   */
  public GAReferenceSetBuilderAssert(GAReferenceSet.Builder actual) {
    super(actual, GAReferenceSetBuilderAssert.class);
  }

  /**
   * An entry point for GAReferenceSetBuilderAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGAReferenceSet.Builder)</code> and get specific assertion with code completion.
   * @param actual the GAReferenceSet.Builder we want to make assertions on.
   * @return a new <code>{@link GAReferenceSetBuilderAssert}</code>
   */
  public static GAReferenceSetBuilderAssert assertThat(GAReferenceSet.Builder actual) {
    return new GAReferenceSetBuilderAssert(actual);
  }

  /**
   * Verifies that the actual GAReferenceSet.Builder's assemblyId is equal to the given one.
   * @param assemblyId the given assemblyId to compare the actual GAReferenceSet.Builder's assemblyId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReferenceSet.Builder's assemblyId is not equal to the given one.
   */
  public GAReferenceSetBuilderAssert hasAssemblyId(String assemblyId) {
    // check that actual GAReferenceSet.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting assemblyId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualAssemblyId = actual.getAssemblyId();
    if (!Objects.areEqual(actualAssemblyId, assemblyId)) {
      failWithMessage(assertjErrorMessage, actual, assemblyId, actualAssemblyId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReferenceSet.Builder's description is equal to the given one.
   * @param description the given description to compare the actual GAReferenceSet.Builder's description to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReferenceSet.Builder's description is not equal to the given one.
   */
  public GAReferenceSetBuilderAssert hasDescription(String description) {
    // check that actual GAReferenceSet.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualDescription = actual.getDescription();
    if (!Objects.areEqual(actualDescription, description)) {
      failWithMessage(assertjErrorMessage, actual, description, actualDescription);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReferenceSet.Builder's id is equal to the given one.
   * @param id the given id to compare the actual GAReferenceSet.Builder's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReferenceSet.Builder's id is not equal to the given one.
   */
  public GAReferenceSetBuilderAssert hasId(String id) {
    // check that actual GAReferenceSet.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReferenceSet.Builder's isDerived is equal to the given one.
   * @param isDerived the given isDerived to compare the actual GAReferenceSet.Builder's isDerived to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReferenceSet.Builder's isDerived is not equal to the given one.
   */
  public GAReferenceSetBuilderAssert hasIsDerived(Boolean isDerived) {
    // check that actual GAReferenceSet.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting isDerived of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Boolean actualIsDerived = actual.getIsDerived();
    if (!Objects.areEqual(actualIsDerived, isDerived)) {
      failWithMessage(assertjErrorMessage, actual, isDerived, actualIsDerived);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReferenceSet.Builder's md5checksum is equal to the given one.
   * @param md5checksum the given md5checksum to compare the actual GAReferenceSet.Builder's md5checksum to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReferenceSet.Builder's md5checksum is not equal to the given one.
   */
  public GAReferenceSetBuilderAssert hasMd5checksum(String md5checksum) {
    // check that actual GAReferenceSet.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting md5checksum of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualMd5checksum = actual.getMd5checksum();
    if (!Objects.areEqual(actualMd5checksum, md5checksum)) {
      failWithMessage(assertjErrorMessage, actual, md5checksum, actualMd5checksum);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReferenceSet.Builder's ncbiTaxonId is equal to the given one.
   * @param ncbiTaxonId the given ncbiTaxonId to compare the actual GAReferenceSet.Builder's ncbiTaxonId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReferenceSet.Builder's ncbiTaxonId is not equal to the given one.
   */
  public GAReferenceSetBuilderAssert hasNcbiTaxonId(Integer ncbiTaxonId) {
    // check that actual GAReferenceSet.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting ncbiTaxonId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualNcbiTaxonId = actual.getNcbiTaxonId();
    if (!Objects.areEqual(actualNcbiTaxonId, ncbiTaxonId)) {
      failWithMessage(assertjErrorMessage, actual, ncbiTaxonId, actualNcbiTaxonId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReferenceSet.Builder's referenceIds contains the given String elements.
   * @param referenceIds the given elements that should be contained in actual GAReferenceSet.Builder's referenceIds.
   * @return this assertion object.
   * @throws AssertionError if the actual GAReferenceSet.Builder's referenceIds does not contain all given String elements.
   */
  public GAReferenceSetBuilderAssert hasReferenceIds(String... referenceIds) {
    // check that actual GAReferenceSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (referenceIds == null) failWithMessage("Expecting referenceIds parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getReferenceIds(), referenceIds);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReferenceSet.Builder's referenceIds contains <b>only<b> the given String elements and nothing else in whatever order.
   * @param referenceIds the given elements that should be contained in actual GAReferenceSet.Builder's referenceIds.
   * @return this assertion object.
   * @throws AssertionError if the actual GAReferenceSet.Builder's referenceIds does not contain all given String elements.
   */
  public GAReferenceSetBuilderAssert hasOnlyReferenceIds(String... referenceIds) {
    // check that actual GAReferenceSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (referenceIds == null) failWithMessage("Expecting referenceIds parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getReferenceIds(), referenceIds);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReferenceSet.Builder's referenceIds does not contain the given String elements.
   *
   * @param referenceIds the given elements that should not be in actual GAReferenceSet.Builder's referenceIds.
   * @return this assertion object.
   * @throws AssertionError if the actual GAReferenceSet.Builder's referenceIds contains any given String elements.
   */
  public GAReferenceSetBuilderAssert doesNotHaveReferenceIds(String... referenceIds) {
    // check that actual GAReferenceSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (referenceIds == null) failWithMessage("Expecting referenceIds parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getReferenceIds(), referenceIds);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReferenceSet.Builder has no referenceIds.
   * @return this assertion object.
   * @throws AssertionError if the actual GAReferenceSet.Builder's referenceIds is not empty.
   */
  public GAReferenceSetBuilderAssert hasNoReferenceIds() {
    // check that actual GAReferenceSet.Builder we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have referenceIds but had :\n  <%s>";
    
    // check
    if (actual.getReferenceIds().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getReferenceIds());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual GAReferenceSet.Builder's sourceAccessions contains the given String elements.
   * @param sourceAccessions the given elements that should be contained in actual GAReferenceSet.Builder's sourceAccessions.
   * @return this assertion object.
   * @throws AssertionError if the actual GAReferenceSet.Builder's sourceAccessions does not contain all given String elements.
   */
  public GAReferenceSetBuilderAssert hasSourceAccessions(String... sourceAccessions) {
    // check that actual GAReferenceSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (sourceAccessions == null) failWithMessage("Expecting sourceAccessions parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getSourceAccessions(), sourceAccessions);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReferenceSet.Builder's sourceAccessions contains <b>only<b> the given String elements and nothing else in whatever order.
   * @param sourceAccessions the given elements that should be contained in actual GAReferenceSet.Builder's sourceAccessions.
   * @return this assertion object.
   * @throws AssertionError if the actual GAReferenceSet.Builder's sourceAccessions does not contain all given String elements.
   */
  public GAReferenceSetBuilderAssert hasOnlySourceAccessions(String... sourceAccessions) {
    // check that actual GAReferenceSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (sourceAccessions == null) failWithMessage("Expecting sourceAccessions parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getSourceAccessions(), sourceAccessions);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReferenceSet.Builder's sourceAccessions does not contain the given String elements.
   *
   * @param sourceAccessions the given elements that should not be in actual GAReferenceSet.Builder's sourceAccessions.
   * @return this assertion object.
   * @throws AssertionError if the actual GAReferenceSet.Builder's sourceAccessions contains any given String elements.
   */
  public GAReferenceSetBuilderAssert doesNotHaveSourceAccessions(String... sourceAccessions) {
    // check that actual GAReferenceSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (sourceAccessions == null) failWithMessage("Expecting sourceAccessions parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getSourceAccessions(), sourceAccessions);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReferenceSet.Builder has no sourceAccessions.
   * @return this assertion object.
   * @throws AssertionError if the actual GAReferenceSet.Builder's sourceAccessions is not empty.
   */
  public GAReferenceSetBuilderAssert hasNoSourceAccessions() {
    // check that actual GAReferenceSet.Builder we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have sourceAccessions but had :\n  <%s>";
    
    // check
    if (actual.getSourceAccessions().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getSourceAccessions());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual GAReferenceSet.Builder's sourceURI is equal to the given one.
   * @param sourceURI the given sourceURI to compare the actual GAReferenceSet.Builder's sourceURI to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReferenceSet.Builder's sourceURI is not equal to the given one.
   */
  public GAReferenceSetBuilderAssert hasSourceURI(String sourceURI) {
    // check that actual GAReferenceSet.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting sourceURI of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualSourceURI = actual.getSourceURI();
    if (!Objects.areEqual(actualSourceURI, sourceURI)) {
      failWithMessage(assertjErrorMessage, actual, sourceURI, actualSourceURI);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReferenceSet.Builder has assembly id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReferenceSet.Builder does not have assembly id.
   */
  public GAReferenceSetBuilderAssert hasAssemblyId() {
    // check that actual GAReferenceSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasAssemblyId()) {
      failWithMessage("\nExpecting that actual GAReferenceSet.Builder has assembly id but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReferenceSet.Builder does not have assembly id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReferenceSet.Builder has assembly id.
   */
  public GAReferenceSetBuilderAssert doesNotHaveAssemblyId() {
    // check that actual GAReferenceSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasAssemblyId()) {
      failWithMessage("\nExpecting that actual GAReferenceSet.Builder does not have assembly id but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReferenceSet.Builder has description.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReferenceSet.Builder does not have description.
   */
  public GAReferenceSetBuilderAssert hasDescription() {
    // check that actual GAReferenceSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasDescription()) {
      failWithMessage("\nExpecting that actual GAReferenceSet.Builder has description but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReferenceSet.Builder does not have description.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReferenceSet.Builder has description.
   */
  public GAReferenceSetBuilderAssert doesNotHaveDescription() {
    // check that actual GAReferenceSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasDescription()) {
      failWithMessage("\nExpecting that actual GAReferenceSet.Builder does not have description but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReferenceSet.Builder has id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReferenceSet.Builder does not have id.
   */
  public GAReferenceSetBuilderAssert hasId() {
    // check that actual GAReferenceSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasId()) {
      failWithMessage("\nExpecting that actual GAReferenceSet.Builder has id but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReferenceSet.Builder does not have id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReferenceSet.Builder has id.
   */
  public GAReferenceSetBuilderAssert doesNotHaveId() {
    // check that actual GAReferenceSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasId()) {
      failWithMessage("\nExpecting that actual GAReferenceSet.Builder does not have id but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReferenceSet.Builder has is derived.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReferenceSet.Builder does not have is derived.
   */
  public GAReferenceSetBuilderAssert hasIsDerived() {
    // check that actual GAReferenceSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasIsDerived()) {
      failWithMessage("\nExpecting that actual GAReferenceSet.Builder has is derived but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReferenceSet.Builder does not have is derived.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReferenceSet.Builder has is derived.
   */
  public GAReferenceSetBuilderAssert doesNotHaveIsDerived() {
    // check that actual GAReferenceSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasIsDerived()) {
      failWithMessage("\nExpecting that actual GAReferenceSet.Builder does not have is derived but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReferenceSet.Builder has md5checksum.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReferenceSet.Builder does not have md5checksum.
   */
  public GAReferenceSetBuilderAssert hasMd5checksum() {
    // check that actual GAReferenceSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasMd5checksum()) {
      failWithMessage("\nExpecting that actual GAReferenceSet.Builder has md5checksum but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReferenceSet.Builder does not have md5checksum.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReferenceSet.Builder has md5checksum.
   */
  public GAReferenceSetBuilderAssert doesNotHaveMd5checksum() {
    // check that actual GAReferenceSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasMd5checksum()) {
      failWithMessage("\nExpecting that actual GAReferenceSet.Builder does not have md5checksum but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReferenceSet.Builder has ncbi taxon id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReferenceSet.Builder does not have ncbi taxon id.
   */
  public GAReferenceSetBuilderAssert hasNcbiTaxonId() {
    // check that actual GAReferenceSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasNcbiTaxonId()) {
      failWithMessage("\nExpecting that actual GAReferenceSet.Builder has ncbi taxon id but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReferenceSet.Builder does not have ncbi taxon id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReferenceSet.Builder has ncbi taxon id.
   */
  public GAReferenceSetBuilderAssert doesNotHaveNcbiTaxonId() {
    // check that actual GAReferenceSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasNcbiTaxonId()) {
      failWithMessage("\nExpecting that actual GAReferenceSet.Builder does not have ncbi taxon id but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReferenceSet.Builder has reference ids.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReferenceSet.Builder does not have reference ids.
   */
  public GAReferenceSetBuilderAssert hasReferenceIds() {
    // check that actual GAReferenceSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasReferenceIds()) {
      failWithMessage("\nExpecting that actual GAReferenceSet.Builder has reference ids but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReferenceSet.Builder does not have reference ids.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReferenceSet.Builder has reference ids.
   */
  public GAReferenceSetBuilderAssert doesNotHaveReferenceIds() {
    // check that actual GAReferenceSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasReferenceIds()) {
      failWithMessage("\nExpecting that actual GAReferenceSet.Builder does not have reference ids but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReferenceSet.Builder has source accessions.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReferenceSet.Builder does not have source accessions.
   */
  public GAReferenceSetBuilderAssert hasSourceAccessions() {
    // check that actual GAReferenceSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasSourceAccessions()) {
      failWithMessage("\nExpecting that actual GAReferenceSet.Builder has source accessions but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReferenceSet.Builder does not have source accessions.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReferenceSet.Builder has source accessions.
   */
  public GAReferenceSetBuilderAssert doesNotHaveSourceAccessions() {
    // check that actual GAReferenceSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasSourceAccessions()) {
      failWithMessage("\nExpecting that actual GAReferenceSet.Builder does not have source accessions but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReferenceSet.Builder has source u r i.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReferenceSet.Builder does not have source u r i.
   */
  public GAReferenceSetBuilderAssert hasSourceURI() {
    // check that actual GAReferenceSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasSourceURI()) {
      failWithMessage("\nExpecting that actual GAReferenceSet.Builder has source u r i but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReferenceSet.Builder does not have source u r i.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReferenceSet.Builder has source u r i.
   */
  public GAReferenceSetBuilderAssert doesNotHaveSourceURI() {
    // check that actual GAReferenceSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasSourceURI()) {
      failWithMessage("\nExpecting that actual GAReferenceSet.Builder does not have source u r i but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
