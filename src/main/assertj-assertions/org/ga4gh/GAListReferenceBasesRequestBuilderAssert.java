package org.ga4gh;

/**
 * {@link GAListReferenceBasesRequest.Builder} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GAListReferenceBasesRequestBuilderAssert extends AbstractAssert<GAListReferenceBasesRequestBuilderAssert, GAListReferenceBasesRequest.Builder> {

  /**
   * Creates a new <code>{@link GAListReferenceBasesRequestBuilderAssert}</code> to make assertions on actual GAListReferenceBasesRequest.Builder.
   * @param actual the GAListReferenceBasesRequest.Builder we want to make assertions on.
   */
  public GAListReferenceBasesRequestBuilderAssert(GAListReferenceBasesRequest.Builder actual) {
    super(actual, GAListReferenceBasesRequestBuilderAssert.class);
  }

  /**
   * An entry point for GAListReferenceBasesRequestBuilderAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGAListReferenceBasesRequest.Builder)</code> and get specific assertion with code completion.
   * @param actual the GAListReferenceBasesRequest.Builder we want to make assertions on.
   * @return a new <code>{@link GAListReferenceBasesRequestBuilderAssert}</code>
   */
  public static GAListReferenceBasesRequestBuilderAssert assertThat(GAListReferenceBasesRequest.Builder actual) {
    return new GAListReferenceBasesRequestBuilderAssert(actual);
  }

  /**
   * Verifies that the actual GAListReferenceBasesRequest.Builder's end is equal to the given one.
   * @param end the given end to compare the actual GAListReferenceBasesRequest.Builder's end to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAListReferenceBasesRequest.Builder's end is not equal to the given one.
   */
  public GAListReferenceBasesRequestBuilderAssert hasEnd(Long end) {
    // check that actual GAListReferenceBasesRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting end of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualEnd = actual.getEnd();
    if (!Objects.areEqual(actualEnd, end)) {
      failWithMessage(assertjErrorMessage, actual, end, actualEnd);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAListReferenceBasesRequest.Builder's pageToken is equal to the given one.
   * @param pageToken the given pageToken to compare the actual GAListReferenceBasesRequest.Builder's pageToken to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAListReferenceBasesRequest.Builder's pageToken is not equal to the given one.
   */
  public GAListReferenceBasesRequestBuilderAssert hasPageToken(String pageToken) {
    // check that actual GAListReferenceBasesRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting pageToken of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualPageToken = actual.getPageToken();
    if (!Objects.areEqual(actualPageToken, pageToken)) {
      failWithMessage(assertjErrorMessage, actual, pageToken, actualPageToken);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAListReferenceBasesRequest.Builder's start is equal to the given one.
   * @param start the given start to compare the actual GAListReferenceBasesRequest.Builder's start to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAListReferenceBasesRequest.Builder's start is not equal to the given one.
   */
  public GAListReferenceBasesRequestBuilderAssert hasStart(Long start) {
    // check that actual GAListReferenceBasesRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting start of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualStart = actual.getStart();
    if (!Objects.areEqual(actualStart, start)) {
      failWithMessage(assertjErrorMessage, actual, start, actualStart);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAListReferenceBasesRequest.Builder has end.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAListReferenceBasesRequest.Builder does not have end.
   */
  public GAListReferenceBasesRequestBuilderAssert hasEnd() {
    // check that actual GAListReferenceBasesRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasEnd()) {
      failWithMessage("\nExpecting that actual GAListReferenceBasesRequest.Builder has end but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAListReferenceBasesRequest.Builder does not have end.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAListReferenceBasesRequest.Builder has end.
   */
  public GAListReferenceBasesRequestBuilderAssert doesNotHaveEnd() {
    // check that actual GAListReferenceBasesRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasEnd()) {
      failWithMessage("\nExpecting that actual GAListReferenceBasesRequest.Builder does not have end but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAListReferenceBasesRequest.Builder has page token.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAListReferenceBasesRequest.Builder does not have page token.
   */
  public GAListReferenceBasesRequestBuilderAssert hasPageToken() {
    // check that actual GAListReferenceBasesRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasPageToken()) {
      failWithMessage("\nExpecting that actual GAListReferenceBasesRequest.Builder has page token but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAListReferenceBasesRequest.Builder does not have page token.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAListReferenceBasesRequest.Builder has page token.
   */
  public GAListReferenceBasesRequestBuilderAssert doesNotHavePageToken() {
    // check that actual GAListReferenceBasesRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasPageToken()) {
      failWithMessage("\nExpecting that actual GAListReferenceBasesRequest.Builder does not have page token but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAListReferenceBasesRequest.Builder has start.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAListReferenceBasesRequest.Builder does not have start.
   */
  public GAListReferenceBasesRequestBuilderAssert hasStart() {
    // check that actual GAListReferenceBasesRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasStart()) {
      failWithMessage("\nExpecting that actual GAListReferenceBasesRequest.Builder has start but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAListReferenceBasesRequest.Builder does not have start.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAListReferenceBasesRequest.Builder has start.
   */
  public GAListReferenceBasesRequestBuilderAssert doesNotHaveStart() {
    // check that actual GAListReferenceBasesRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasStart()) {
      failWithMessage("\nExpecting that actual GAListReferenceBasesRequest.Builder does not have start but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
