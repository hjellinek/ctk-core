package org.ga4gh;

import org.assertj.core.api.*;
import org.assertj.core.internal.*;
import org.assertj.core.util.*;

/**
 * {@link GALinearAlignment} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GALinearAlignmentAssert extends AbstractAssert<GALinearAlignmentAssert, GALinearAlignment> {

  /**
   * Creates a new <code>{@link GALinearAlignmentAssert}</code> to make assertions on actual GALinearAlignment.
   * @param actual the GALinearAlignment we want to make assertions on.
   */
  public GALinearAlignmentAssert(GALinearAlignment actual) {
    super(actual, GALinearAlignmentAssert.class);
  }

  /**
   * An entry point for GALinearAlignmentAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGALinearAlignment)</code> and get specific assertion with code completion.
   * @param actual the GALinearAlignment we want to make assertions on.
   * @return a new <code>{@link GALinearAlignmentAssert}</code>
   */
  public static GALinearAlignmentAssert assertThat(GALinearAlignment actual) {
    return new GALinearAlignmentAssert(actual);
  }

  /**
   * Verifies that the actual GALinearAlignment's cigar contains the given GACigarUnit elements.
   * @param cigar the given elements that should be contained in actual GALinearAlignment's cigar.
   * @return this assertion object.
   * @throws AssertionError if the actual GALinearAlignment's cigar does not contain all given GACigarUnit elements.
   */
  public GALinearAlignmentAssert hasCigar(GACigarUnit... cigar) {
    // check that actual GALinearAlignment we want to make assertions on is not null.
    isNotNull();

    // check that given GACigarUnit varargs is not null.
    if (cigar == null) failWithMessage("Expecting cigar parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getCigar(), cigar);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GALinearAlignment's cigar contains <b>only<b> the given GACigarUnit elements and nothing else in whatever order.
   * @param cigar the given elements that should be contained in actual GALinearAlignment's cigar.
   * @return this assertion object.
   * @throws AssertionError if the actual GALinearAlignment's cigar does not contain all given GACigarUnit elements.
   */
  public GALinearAlignmentAssert hasOnlyCigar(GACigarUnit... cigar) {
    // check that actual GALinearAlignment we want to make assertions on is not null.
    isNotNull();

    // check that given GACigarUnit varargs is not null.
    if (cigar == null) failWithMessage("Expecting cigar parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getCigar(), cigar);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GALinearAlignment's cigar does not contain the given GACigarUnit elements.
   *
   * @param cigar the given elements that should not be in actual GALinearAlignment's cigar.
   * @return this assertion object.
   * @throws AssertionError if the actual GALinearAlignment's cigar contains any given GACigarUnit elements.
   */
  public GALinearAlignmentAssert doesNotHaveCigar(GACigarUnit... cigar) {
    // check that actual GALinearAlignment we want to make assertions on is not null.
    isNotNull();

    // check that given GACigarUnit varargs is not null.
    if (cigar == null) failWithMessage("Expecting cigar parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getCigar(), cigar);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GALinearAlignment has no cigar.
   * @return this assertion object.
   * @throws AssertionError if the actual GALinearAlignment's cigar is not empty.
   */
  public GALinearAlignmentAssert hasNoCigar() {
    // check that actual GALinearAlignment we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have cigar but had :\n  <%s>";
    
    // check
    if (actual.getCigar().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getCigar());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual GALinearAlignment's classSchema is equal to the given one.
   * @param classSchema the given classSchema to compare the actual GALinearAlignment's classSchema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GALinearAlignment's classSchema is not equal to the given one.
   */
  public GALinearAlignmentAssert hasClassSchema(org.apache.avro.Schema classSchema) {
    // check that actual GALinearAlignment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classSchema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualClassSchema = actual.getClassSchema();
    if (!Objects.areEqual(actualClassSchema, classSchema)) {
      failWithMessage(assertjErrorMessage, actual, classSchema, actualClassSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GALinearAlignment's mappingQuality is equal to the given one.
   * @param mappingQuality the given mappingQuality to compare the actual GALinearAlignment's mappingQuality to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GALinearAlignment's mappingQuality is not equal to the given one.
   */
  public GALinearAlignmentAssert hasMappingQuality(Integer mappingQuality) {
    // check that actual GALinearAlignment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting mappingQuality of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualMappingQuality = actual.getMappingQuality();
    if (!Objects.areEqual(actualMappingQuality, mappingQuality)) {
      failWithMessage(assertjErrorMessage, actual, mappingQuality, actualMappingQuality);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GALinearAlignment's position is equal to the given one.
   * @param position the given position to compare the actual GALinearAlignment's position to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GALinearAlignment's position is not equal to the given one.
   */
  public GALinearAlignmentAssert hasPosition(GAPosition position) {
    // check that actual GALinearAlignment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting position of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    GAPosition actualPosition = actual.getPosition();
    if (!Objects.areEqual(actualPosition, position)) {
      failWithMessage(assertjErrorMessage, actual, position, actualPosition);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GALinearAlignment's schema is equal to the given one.
   * @param schema the given schema to compare the actual GALinearAlignment's schema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GALinearAlignment's schema is not equal to the given one.
   */
  public GALinearAlignmentAssert hasSchema(org.apache.avro.Schema schema) {
    // check that actual GALinearAlignment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting schema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualSchema = actual.getSchema();
    if (!Objects.areEqual(actualSchema, schema)) {
      failWithMessage(assertjErrorMessage, actual, schema, actualSchema);
    }

    // return the current assertion for method chaining
    return this;
  }




}
