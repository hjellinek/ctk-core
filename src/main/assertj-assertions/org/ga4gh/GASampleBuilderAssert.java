package org.ga4gh;

/**
 * {@link GASample.Builder} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GASampleBuilderAssert extends AbstractAssert<GASampleBuilderAssert, GASample.Builder> {

  /**
   * Creates a new <code>{@link GASampleBuilderAssert}</code> to make assertions on actual GASample.Builder.
   * @param actual the GASample.Builder we want to make assertions on.
   */
  public GASampleBuilderAssert(GASample.Builder actual) {
    super(actual, GASampleBuilderAssert.class);
  }

  /**
   * An entry point for GASampleBuilderAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGASample.Builder)</code> and get specific assertion with code completion.
   * @param actual the GASample.Builder we want to make assertions on.
   * @return a new <code>{@link GASampleBuilderAssert}</code>
   */
  public static GASampleBuilderAssert assertThat(GASample.Builder actual) {
    return new GASampleBuilderAssert(actual);
  }

  /**
   * Verifies that the actual GASample.Builder's accessions contains the given String elements.
   * @param accessions the given elements that should be contained in actual GASample.Builder's accessions.
   * @return this assertion object.
   * @throws AssertionError if the actual GASample.Builder's accessions does not contain all given String elements.
   */
  public GASampleBuilderAssert hasAccessions(String... accessions) {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (accessions == null) failWithMessage("Expecting accessions parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getAccessions(), accessions);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder's accessions contains <b>only<b> the given String elements and nothing else in whatever order.
   * @param accessions the given elements that should be contained in actual GASample.Builder's accessions.
   * @return this assertion object.
   * @throws AssertionError if the actual GASample.Builder's accessions does not contain all given String elements.
   */
  public GASampleBuilderAssert hasOnlyAccessions(String... accessions) {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (accessions == null) failWithMessage("Expecting accessions parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getAccessions(), accessions);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder's accessions does not contain the given String elements.
   *
   * @param accessions the given elements that should not be in actual GASample.Builder's accessions.
   * @return this assertion object.
   * @throws AssertionError if the actual GASample.Builder's accessions contains any given String elements.
   */
  public GASampleBuilderAssert doesNotHaveAccessions(String... accessions) {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (accessions == null) failWithMessage("Expecting accessions parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getAccessions(), accessions);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder has no accessions.
   * @return this assertion object.
   * @throws AssertionError if the actual GASample.Builder's accessions is not empty.
   */
  public GASampleBuilderAssert hasNoAccessions() {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have accessions but had :\n  <%s>";
    
    // check
    if (actual.getAccessions().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getAccessions());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual GASample.Builder's age is equal to the given one.
   * @param age the given age to compare the actual GASample.Builder's age to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder's age is not equal to the given one.
   */
  public GASampleBuilderAssert hasAge(Long age) {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting age of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualAge = actual.getAge();
    if (!Objects.areEqual(actualAge, age)) {
      failWithMessage(assertjErrorMessage, actual, age, actualAge);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder's cellLine is equal to the given one.
   * @param cellLine the given cellLine to compare the actual GASample.Builder's cellLine to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder's cellLine is not equal to the given one.
   */
  public GASampleBuilderAssert hasCellLine(String cellLine) {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting cellLine of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualCellLine = actual.getCellLine();
    if (!Objects.areEqual(actualCellLine, cellLine)) {
      failWithMessage(assertjErrorMessage, actual, cellLine, actualCellLine);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder's cellType is equal to the given one.
   * @param cellType the given cellType to compare the actual GASample.Builder's cellType to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder's cellType is not equal to the given one.
   */
  public GASampleBuilderAssert hasCellType(String cellType) {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting cellType of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualCellType = actual.getCellType();
    if (!Objects.areEqual(actualCellType, cellType)) {
      failWithMessage(assertjErrorMessage, actual, cellType, actualCellType);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder's created is equal to the given one.
   * @param created the given created to compare the actual GASample.Builder's created to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder's created is not equal to the given one.
   */
  public GASampleBuilderAssert hasCreated(Long created) {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting created of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualCreated = actual.getCreated();
    if (!Objects.areEqual(actualCreated, created)) {
      failWithMessage(assertjErrorMessage, actual, created, actualCreated);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder's description is equal to the given one.
   * @param description the given description to compare the actual GASample.Builder's description to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder's description is not equal to the given one.
   */
  public GASampleBuilderAssert hasDescription(String description) {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualDescription = actual.getDescription();
    if (!Objects.areEqual(actualDescription, description)) {
      failWithMessage(assertjErrorMessage, actual, description, actualDescription);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder's geocode is equal to the given one.
   * @param geocode the given geocode to compare the actual GASample.Builder's geocode to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder's geocode is not equal to the given one.
   */
  public GASampleBuilderAssert hasGeocode(String geocode) {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting geocode of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualGeocode = actual.getGeocode();
    if (!Objects.areEqual(actualGeocode, geocode)) {
      failWithMessage(assertjErrorMessage, actual, geocode, actualGeocode);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder's id is equal to the given one.
   * @param id the given id to compare the actual GASample.Builder's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder's id is not equal to the given one.
   */
  public GASampleBuilderAssert hasId(String id) {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder's individualId is equal to the given one.
   * @param individualId the given individualId to compare the actual GASample.Builder's individualId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder's individualId is not equal to the given one.
   */
  public GASampleBuilderAssert hasIndividualId(String individualId) {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting individualId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualIndividualId = actual.getIndividualId();
    if (!Objects.areEqual(actualIndividualId, individualId)) {
      failWithMessage(assertjErrorMessage, actual, individualId, actualIndividualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder's info is equal to the given one.
   * @param info the given info to compare the actual GASample.Builder's info to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder's info is not equal to the given one.
   */
  public GASampleBuilderAssert hasInfo(java.util.Map info) {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting info of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.util.Map actualInfo = actual.getInfo();
    if (!Objects.areEqual(actualInfo, info)) {
      failWithMessage(assertjErrorMessage, actual, info, actualInfo);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder's name is equal to the given one.
   * @param name the given name to compare the actual GASample.Builder's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder's name is not equal to the given one.
   */
  public GASampleBuilderAssert hasName(String name) {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder's organismPart is equal to the given one.
   * @param organismPart the given organismPart to compare the actual GASample.Builder's organismPart to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder's organismPart is not equal to the given one.
   */
  public GASampleBuilderAssert hasOrganismPart(GAOntologyTerm organismPart) {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting organismPart of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    GAOntologyTerm actualOrganismPart = actual.getOrganismPart();
    if (!Objects.areEqual(actualOrganismPart, organismPart)) {
      failWithMessage(assertjErrorMessage, actual, organismPart, actualOrganismPart);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder's sampleType is equal to the given one.
   * @param sampleType the given sampleType to compare the actual GASample.Builder's sampleType to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder's sampleType is not equal to the given one.
   */
  public GASampleBuilderAssert hasSampleType(String sampleType) {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting sampleType of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualSampleType = actual.getSampleType();
    if (!Objects.areEqual(actualSampleType, sampleType)) {
      failWithMessage(assertjErrorMessage, actual, sampleType, actualSampleType);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder's samplingDate is equal to the given one.
   * @param samplingDate the given samplingDate to compare the actual GASample.Builder's samplingDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder's samplingDate is not equal to the given one.
   */
  public GASampleBuilderAssert hasSamplingDate(Long samplingDate) {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting samplingDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualSamplingDate = actual.getSamplingDate();
    if (!Objects.areEqual(actualSamplingDate, samplingDate)) {
      failWithMessage(assertjErrorMessage, actual, samplingDate, actualSamplingDate);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder's updated is equal to the given one.
   * @param updated the given updated to compare the actual GASample.Builder's updated to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder's updated is not equal to the given one.
   */
  public GASampleBuilderAssert hasUpdated(Long updated) {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting updated of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualUpdated = actual.getUpdated();
    if (!Objects.areEqual(actualUpdated, updated)) {
      failWithMessage(assertjErrorMessage, actual, updated, actualUpdated);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder has accessions.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder does not have accessions.
   */
  public GASampleBuilderAssert hasAccessions() {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasAccessions()) {
      failWithMessage("\nExpecting that actual GASample.Builder has accessions but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder does not have accessions.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder has accessions.
   */
  public GASampleBuilderAssert doesNotHaveAccessions() {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasAccessions()) {
      failWithMessage("\nExpecting that actual GASample.Builder does not have accessions but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder has age.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder does not have age.
   */
  public GASampleBuilderAssert hasAge() {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasAge()) {
      failWithMessage("\nExpecting that actual GASample.Builder has age but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder does not have age.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder has age.
   */
  public GASampleBuilderAssert doesNotHaveAge() {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasAge()) {
      failWithMessage("\nExpecting that actual GASample.Builder does not have age but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder has cell line.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder does not have cell line.
   */
  public GASampleBuilderAssert hasCellLine() {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasCellLine()) {
      failWithMessage("\nExpecting that actual GASample.Builder has cell line but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder does not have cell line.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder has cell line.
   */
  public GASampleBuilderAssert doesNotHaveCellLine() {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasCellLine()) {
      failWithMessage("\nExpecting that actual GASample.Builder does not have cell line but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder has cell type.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder does not have cell type.
   */
  public GASampleBuilderAssert hasCellType() {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasCellType()) {
      failWithMessage("\nExpecting that actual GASample.Builder has cell type but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder does not have cell type.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder has cell type.
   */
  public GASampleBuilderAssert doesNotHaveCellType() {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasCellType()) {
      failWithMessage("\nExpecting that actual GASample.Builder does not have cell type but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder has created.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder does not have created.
   */
  public GASampleBuilderAssert hasCreated() {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasCreated()) {
      failWithMessage("\nExpecting that actual GASample.Builder has created but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder does not have created.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder has created.
   */
  public GASampleBuilderAssert doesNotHaveCreated() {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasCreated()) {
      failWithMessage("\nExpecting that actual GASample.Builder does not have created but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder has description.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder does not have description.
   */
  public GASampleBuilderAssert hasDescription() {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasDescription()) {
      failWithMessage("\nExpecting that actual GASample.Builder has description but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder does not have description.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder has description.
   */
  public GASampleBuilderAssert doesNotHaveDescription() {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasDescription()) {
      failWithMessage("\nExpecting that actual GASample.Builder does not have description but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder has geocode.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder does not have geocode.
   */
  public GASampleBuilderAssert hasGeocode() {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasGeocode()) {
      failWithMessage("\nExpecting that actual GASample.Builder has geocode but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder does not have geocode.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder has geocode.
   */
  public GASampleBuilderAssert doesNotHaveGeocode() {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasGeocode()) {
      failWithMessage("\nExpecting that actual GASample.Builder does not have geocode but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder has id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder does not have id.
   */
  public GASampleBuilderAssert hasId() {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasId()) {
      failWithMessage("\nExpecting that actual GASample.Builder has id but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder does not have id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder has id.
   */
  public GASampleBuilderAssert doesNotHaveId() {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasId()) {
      failWithMessage("\nExpecting that actual GASample.Builder does not have id but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder has individual id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder does not have individual id.
   */
  public GASampleBuilderAssert hasIndividualId() {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasIndividualId()) {
      failWithMessage("\nExpecting that actual GASample.Builder has individual id but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder does not have individual id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder has individual id.
   */
  public GASampleBuilderAssert doesNotHaveIndividualId() {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasIndividualId()) {
      failWithMessage("\nExpecting that actual GASample.Builder does not have individual id but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder has info.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder does not have info.
   */
  public GASampleBuilderAssert hasInfo() {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasInfo()) {
      failWithMessage("\nExpecting that actual GASample.Builder has info but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder does not have info.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder has info.
   */
  public GASampleBuilderAssert doesNotHaveInfo() {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasInfo()) {
      failWithMessage("\nExpecting that actual GASample.Builder does not have info but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder has name.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder does not have name.
   */
  public GASampleBuilderAssert hasName() {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasName()) {
      failWithMessage("\nExpecting that actual GASample.Builder has name but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder does not have name.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder has name.
   */
  public GASampleBuilderAssert doesNotHaveName() {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasName()) {
      failWithMessage("\nExpecting that actual GASample.Builder does not have name but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder has organism part.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder does not have organism part.
   */
  public GASampleBuilderAssert hasOrganismPart() {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasOrganismPart()) {
      failWithMessage("\nExpecting that actual GASample.Builder has organism part but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder does not have organism part.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder has organism part.
   */
  public GASampleBuilderAssert doesNotHaveOrganismPart() {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasOrganismPart()) {
      failWithMessage("\nExpecting that actual GASample.Builder does not have organism part but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder has sample type.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder does not have sample type.
   */
  public GASampleBuilderAssert hasSampleType() {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasSampleType()) {
      failWithMessage("\nExpecting that actual GASample.Builder has sample type but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder does not have sample type.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder has sample type.
   */
  public GASampleBuilderAssert doesNotHaveSampleType() {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasSampleType()) {
      failWithMessage("\nExpecting that actual GASample.Builder does not have sample type but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder has sampling date.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder does not have sampling date.
   */
  public GASampleBuilderAssert hasSamplingDate() {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasSamplingDate()) {
      failWithMessage("\nExpecting that actual GASample.Builder has sampling date but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder does not have sampling date.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder has sampling date.
   */
  public GASampleBuilderAssert doesNotHaveSamplingDate() {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasSamplingDate()) {
      failWithMessage("\nExpecting that actual GASample.Builder does not have sampling date but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder has updated.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder does not have updated.
   */
  public GASampleBuilderAssert hasUpdated() {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasUpdated()) {
      failWithMessage("\nExpecting that actual GASample.Builder has updated but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASample.Builder does not have updated.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASample.Builder has updated.
   */
  public GASampleBuilderAssert doesNotHaveUpdated() {
    // check that actual GASample.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasUpdated()) {
      failWithMessage("\nExpecting that actual GASample.Builder does not have updated but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
