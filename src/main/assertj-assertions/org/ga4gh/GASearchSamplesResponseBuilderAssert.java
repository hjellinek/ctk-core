package org.ga4gh;

/**
 * {@link GASearchSamplesResponse.Builder} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GASearchSamplesResponseBuilderAssert extends AbstractAssert<GASearchSamplesResponseBuilderAssert, GASearchSamplesResponse.Builder> {

  /**
   * Creates a new <code>{@link GASearchSamplesResponseBuilderAssert}</code> to make assertions on actual GASearchSamplesResponse.Builder.
   * @param actual the GASearchSamplesResponse.Builder we want to make assertions on.
   */
  public GASearchSamplesResponseBuilderAssert(GASearchSamplesResponse.Builder actual) {
    super(actual, GASearchSamplesResponseBuilderAssert.class);
  }

  /**
   * An entry point for GASearchSamplesResponseBuilderAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGASearchSamplesResponse.Builder)</code> and get specific assertion with code completion.
   * @param actual the GASearchSamplesResponse.Builder we want to make assertions on.
   * @return a new <code>{@link GASearchSamplesResponseBuilderAssert}</code>
   */
  public static GASearchSamplesResponseBuilderAssert assertThat(GASearchSamplesResponse.Builder actual) {
    return new GASearchSamplesResponseBuilderAssert(actual);
  }

  /**
   * Verifies that the actual GASearchSamplesResponse.Builder's nextPageToken is equal to the given one.
   * @param nextPageToken the given nextPageToken to compare the actual GASearchSamplesResponse.Builder's nextPageToken to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchSamplesResponse.Builder's nextPageToken is not equal to the given one.
   */
  public GASearchSamplesResponseBuilderAssert hasNextPageToken(String nextPageToken) {
    // check that actual GASearchSamplesResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting nextPageToken of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualNextPageToken = actual.getNextPageToken();
    if (!Objects.areEqual(actualNextPageToken, nextPageToken)) {
      failWithMessage(assertjErrorMessage, actual, nextPageToken, actualNextPageToken);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchSamplesResponse.Builder's samples contains the given GASample elements.
   * @param samples the given elements that should be contained in actual GASearchSamplesResponse.Builder's samples.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchSamplesResponse.Builder's samples does not contain all given GASample elements.
   */
  public GASearchSamplesResponseBuilderAssert hasSamples(GASample... samples) {
    // check that actual GASearchSamplesResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given GASample varargs is not null.
    if (samples == null) failWithMessage("Expecting samples parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getSamples(), samples);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchSamplesResponse.Builder's samples contains <b>only<b> the given GASample elements and nothing else in whatever order.
   * @param samples the given elements that should be contained in actual GASearchSamplesResponse.Builder's samples.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchSamplesResponse.Builder's samples does not contain all given GASample elements.
   */
  public GASearchSamplesResponseBuilderAssert hasOnlySamples(GASample... samples) {
    // check that actual GASearchSamplesResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given GASample varargs is not null.
    if (samples == null) failWithMessage("Expecting samples parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getSamples(), samples);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchSamplesResponse.Builder's samples does not contain the given GASample elements.
   *
   * @param samples the given elements that should not be in actual GASearchSamplesResponse.Builder's samples.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchSamplesResponse.Builder's samples contains any given GASample elements.
   */
  public GASearchSamplesResponseBuilderAssert doesNotHaveSamples(GASample... samples) {
    // check that actual GASearchSamplesResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given GASample varargs is not null.
    if (samples == null) failWithMessage("Expecting samples parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getSamples(), samples);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchSamplesResponse.Builder has no samples.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchSamplesResponse.Builder's samples is not empty.
   */
  public GASearchSamplesResponseBuilderAssert hasNoSamples() {
    // check that actual GASearchSamplesResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have samples but had :\n  <%s>";
    
    // check
    if (actual.getSamples().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getSamples());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual GASearchSamplesResponse.Builder has next page token.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchSamplesResponse.Builder does not have next page token.
   */
  public GASearchSamplesResponseBuilderAssert hasNextPageToken() {
    // check that actual GASearchSamplesResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasNextPageToken()) {
      failWithMessage("\nExpecting that actual GASearchSamplesResponse.Builder has next page token but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchSamplesResponse.Builder does not have next page token.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchSamplesResponse.Builder has next page token.
   */
  public GASearchSamplesResponseBuilderAssert doesNotHaveNextPageToken() {
    // check that actual GASearchSamplesResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasNextPageToken()) {
      failWithMessage("\nExpecting that actual GASearchSamplesResponse.Builder does not have next page token but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchSamplesResponse.Builder has samples.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchSamplesResponse.Builder does not have samples.
   */
  public GASearchSamplesResponseBuilderAssert hasSamples() {
    // check that actual GASearchSamplesResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasSamples()) {
      failWithMessage("\nExpecting that actual GASearchSamplesResponse.Builder has samples but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchSamplesResponse.Builder does not have samples.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchSamplesResponse.Builder has samples.
   */
  public GASearchSamplesResponseBuilderAssert doesNotHaveSamples() {
    // check that actual GASearchSamplesResponse.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasSamples()) {
      failWithMessage("\nExpecting that actual GASearchSamplesResponse.Builder does not have samples but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
