package org.ga4gh;

import org.assertj.core.api.*;
import org.assertj.core.internal.*;
import org.assertj.core.util.*;

/**
 * {@link GAAnalysis} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GAAnalysisAssert extends AbstractAssert<GAAnalysisAssert, GAAnalysis> {

  /**
   * Creates a new <code>{@link GAAnalysisAssert}</code> to make assertions on actual GAAnalysis.
   * @param actual the GAAnalysis we want to make assertions on.
   */
  public GAAnalysisAssert(GAAnalysis actual) {
    super(actual, GAAnalysisAssert.class);
  }

  /**
   * An entry point for GAAnalysisAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGAAnalysis)</code> and get specific assertion with code completion.
   * @param actual the GAAnalysis we want to make assertions on.
   * @return a new <code>{@link GAAnalysisAssert}</code>
   */
  public static GAAnalysisAssert assertThat(GAAnalysis actual) {
    return new GAAnalysisAssert(actual);
  }

  /**
   * Verifies that the actual GAAnalysis's classSchema is equal to the given one.
   * @param classSchema the given classSchema to compare the actual GAAnalysis's classSchema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAAnalysis's classSchema is not equal to the given one.
   */
  public GAAnalysisAssert hasClassSchema(org.apache.avro.Schema classSchema) {
    // check that actual GAAnalysis we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classSchema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualClassSchema = actual.getClassSchema();
    if (!Objects.areEqual(actualClassSchema, classSchema)) {
      failWithMessage(assertjErrorMessage, actual, classSchema, actualClassSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis's created is equal to the given one.
   * @param created the given created to compare the actual GAAnalysis's created to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAAnalysis's created is not equal to the given one.
   */
  public GAAnalysisAssert hasCreated(Long created) {
    // check that actual GAAnalysis we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting created of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualCreated = actual.getCreated();
    if (!Objects.areEqual(actualCreated, created)) {
      failWithMessage(assertjErrorMessage, actual, created, actualCreated);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis's description is equal to the given one.
   * @param description the given description to compare the actual GAAnalysis's description to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAAnalysis's description is not equal to the given one.
   */
  public GAAnalysisAssert hasDescription(String description) {
    // check that actual GAAnalysis we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualDescription = actual.getDescription();
    if (!Objects.areEqual(actualDescription, description)) {
      failWithMessage(assertjErrorMessage, actual, description, actualDescription);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis's id is equal to the given one.
   * @param id the given id to compare the actual GAAnalysis's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAAnalysis's id is not equal to the given one.
   */
  public GAAnalysisAssert hasId(String id) {
    // check that actual GAAnalysis we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis's info is equal to the given one.
   * @param info the given info to compare the actual GAAnalysis's info to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAAnalysis's info is not equal to the given one.
   */
  public GAAnalysisAssert hasInfo(java.util.Map info) {
    // check that actual GAAnalysis we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting info of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.util.Map actualInfo = actual.getInfo();
    if (!Objects.areEqual(actualInfo, info)) {
      failWithMessage(assertjErrorMessage, actual, info, actualInfo);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis's name is equal to the given one.
   * @param name the given name to compare the actual GAAnalysis's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAAnalysis's name is not equal to the given one.
   */
  public GAAnalysisAssert hasName(String name) {
    // check that actual GAAnalysis we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis's schema is equal to the given one.
   * @param schema the given schema to compare the actual GAAnalysis's schema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAAnalysis's schema is not equal to the given one.
   */
  public GAAnalysisAssert hasSchema(org.apache.avro.Schema schema) {
    // check that actual GAAnalysis we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting schema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualSchema = actual.getSchema();
    if (!Objects.areEqual(actualSchema, schema)) {
      failWithMessage(assertjErrorMessage, actual, schema, actualSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis's software contains the given String elements.
   * @param software the given elements that should be contained in actual GAAnalysis's software.
   * @return this assertion object.
   * @throws AssertionError if the actual GAAnalysis's software does not contain all given String elements.
   */
  public GAAnalysisAssert hasSoftware(String... software) {
    // check that actual GAAnalysis we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (software == null) failWithMessage("Expecting software parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getSoftware(), software);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis's software contains <b>only<b> the given String elements and nothing else in whatever order.
   * @param software the given elements that should be contained in actual GAAnalysis's software.
   * @return this assertion object.
   * @throws AssertionError if the actual GAAnalysis's software does not contain all given String elements.
   */
  public GAAnalysisAssert hasOnlySoftware(String... software) {
    // check that actual GAAnalysis we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (software == null) failWithMessage("Expecting software parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getSoftware(), software);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis's software does not contain the given String elements.
   *
   * @param software the given elements that should not be in actual GAAnalysis's software.
   * @return this assertion object.
   * @throws AssertionError if the actual GAAnalysis's software contains any given String elements.
   */
  public GAAnalysisAssert doesNotHaveSoftware(String... software) {
    // check that actual GAAnalysis we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (software == null) failWithMessage("Expecting software parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getSoftware(), software);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis has no software.
   * @return this assertion object.
   * @throws AssertionError if the actual GAAnalysis's software is not empty.
   */
  public GAAnalysisAssert hasNoSoftware() {
    // check that actual GAAnalysis we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have software but had :\n  <%s>";
    
    // check
    if (actual.getSoftware().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getSoftware());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual GAAnalysis's type is equal to the given one.
   * @param type the given type to compare the actual GAAnalysis's type to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAAnalysis's type is not equal to the given one.
   */
  public GAAnalysisAssert hasType(String type) {
    // check that actual GAAnalysis we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting type of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualType = actual.getType();
    if (!Objects.areEqual(actualType, type)) {
      failWithMessage(assertjErrorMessage, actual, type, actualType);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAAnalysis's updated is equal to the given one.
   * @param updated the given updated to compare the actual GAAnalysis's updated to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAAnalysis's updated is not equal to the given one.
   */
  public GAAnalysisAssert hasUpdated(Long updated) {
    // check that actual GAAnalysis we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting updated of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualUpdated = actual.getUpdated();
    if (!Objects.areEqual(actualUpdated, updated)) {
      failWithMessage(assertjErrorMessage, actual, updated, actualUpdated);
    }

    // return the current assertion for method chaining
    return this;
  }









}
