package org.ga4gh;

import org.assertj.core.api.*;
import org.assertj.core.util.*;

/**
 * {@link GAOntologyTerm} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GAOntologyTermAssert extends AbstractAssert<GAOntologyTermAssert, GAOntologyTerm> {

  /**
   * Creates a new <code>{@link GAOntologyTermAssert}</code> to make assertions on actual GAOntologyTerm.
   * @param actual the GAOntologyTerm we want to make assertions on.
   */
  public GAOntologyTermAssert(GAOntologyTerm actual) {
    super(actual, GAOntologyTermAssert.class);
  }

  /**
   * An entry point for GAOntologyTermAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGAOntologyTerm)</code> and get specific assertion with code completion.
   * @param actual the GAOntologyTerm we want to make assertions on.
   * @return a new <code>{@link GAOntologyTermAssert}</code>
   */
  public static GAOntologyTermAssert assertThat(GAOntologyTerm actual) {
    return new GAOntologyTermAssert(actual);
  }

  /**
   * Verifies that the actual GAOntologyTerm's classSchema is equal to the given one.
   * @param classSchema the given classSchema to compare the actual GAOntologyTerm's classSchema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAOntologyTerm's classSchema is not equal to the given one.
   */
  public GAOntologyTermAssert hasClassSchema(org.apache.avro.Schema classSchema) {
    // check that actual GAOntologyTerm we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classSchema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualClassSchema = actual.getClassSchema();
    if (!Objects.areEqual(actualClassSchema, classSchema)) {
      failWithMessage(assertjErrorMessage, actual, classSchema, actualClassSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAOntologyTerm's id is equal to the given one.
   * @param id the given id to compare the actual GAOntologyTerm's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAOntologyTerm's id is not equal to the given one.
   */
  public GAOntologyTermAssert hasId(String id) {
    // check that actual GAOntologyTerm we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAOntologyTerm's name is equal to the given one.
   * @param name the given name to compare the actual GAOntologyTerm's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAOntologyTerm's name is not equal to the given one.
   */
  public GAOntologyTermAssert hasName(String name) {
    // check that actual GAOntologyTerm we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAOntologyTerm's ontologySource is equal to the given one.
   * @param ontologySource the given ontologySource to compare the actual GAOntologyTerm's ontologySource to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAOntologyTerm's ontologySource is not equal to the given one.
   */
  public GAOntologyTermAssert hasOntologySource(String ontologySource) {
    // check that actual GAOntologyTerm we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting ontologySource of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualOntologySource = actual.getOntologySource();
    if (!Objects.areEqual(actualOntologySource, ontologySource)) {
      failWithMessage(assertjErrorMessage, actual, ontologySource, actualOntologySource);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAOntologyTerm's schema is equal to the given one.
   * @param schema the given schema to compare the actual GAOntologyTerm's schema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAOntologyTerm's schema is not equal to the given one.
   */
  public GAOntologyTermAssert hasSchema(org.apache.avro.Schema schema) {
    // check that actual GAOntologyTerm we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting schema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualSchema = actual.getSchema();
    if (!Objects.areEqual(actualSchema, schema)) {
      failWithMessage(assertjErrorMessage, actual, schema, actualSchema);
    }

    // return the current assertion for method chaining
    return this;
  }




}
