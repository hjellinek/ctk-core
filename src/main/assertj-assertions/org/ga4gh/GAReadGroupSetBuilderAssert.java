package org.ga4gh;

/**
 * {@link GAReadGroupSet.Builder} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GAReadGroupSetBuilderAssert extends AbstractAssert<GAReadGroupSetBuilderAssert, GAReadGroupSet.Builder> {

  /**
   * Creates a new <code>{@link GAReadGroupSetBuilderAssert}</code> to make assertions on actual GAReadGroupSet.Builder.
   * @param actual the GAReadGroupSet.Builder we want to make assertions on.
   */
  public GAReadGroupSetBuilderAssert(GAReadGroupSet.Builder actual) {
    super(actual, GAReadGroupSetBuilderAssert.class);
  }

  /**
   * An entry point for GAReadGroupSetBuilderAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGAReadGroupSet.Builder)</code> and get specific assertion with code completion.
   * @param actual the GAReadGroupSet.Builder we want to make assertions on.
   * @return a new <code>{@link GAReadGroupSetBuilderAssert}</code>
   */
  public static GAReadGroupSetBuilderAssert assertThat(GAReadGroupSet.Builder actual) {
    return new GAReadGroupSetBuilderAssert(actual);
  }

  /**
   * Verifies that the actual GAReadGroupSet.Builder's datasetId is equal to the given one.
   * @param datasetId the given datasetId to compare the actual GAReadGroupSet.Builder's datasetId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadGroupSet.Builder's datasetId is not equal to the given one.
   */
  public GAReadGroupSetBuilderAssert hasDatasetId(String datasetId) {
    // check that actual GAReadGroupSet.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting datasetId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualDatasetId = actual.getDatasetId();
    if (!Objects.areEqual(actualDatasetId, datasetId)) {
      failWithMessage(assertjErrorMessage, actual, datasetId, actualDatasetId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadGroupSet.Builder's id is equal to the given one.
   * @param id the given id to compare the actual GAReadGroupSet.Builder's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadGroupSet.Builder's id is not equal to the given one.
   */
  public GAReadGroupSetBuilderAssert hasId(String id) {
    // check that actual GAReadGroupSet.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadGroupSet.Builder's name is equal to the given one.
   * @param name the given name to compare the actual GAReadGroupSet.Builder's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadGroupSet.Builder's name is not equal to the given one.
   */
  public GAReadGroupSetBuilderAssert hasName(String name) {
    // check that actual GAReadGroupSet.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadGroupSet.Builder's readGroups contains the given GAReadGroup elements.
   * @param readGroups the given elements that should be contained in actual GAReadGroupSet.Builder's readGroups.
   * @return this assertion object.
   * @throws AssertionError if the actual GAReadGroupSet.Builder's readGroups does not contain all given GAReadGroup elements.
   */
  public GAReadGroupSetBuilderAssert hasReadGroups(GAReadGroup... readGroups) {
    // check that actual GAReadGroupSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given GAReadGroup varargs is not null.
    if (readGroups == null) failWithMessage("Expecting readGroups parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getReadGroups(), readGroups);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadGroupSet.Builder's readGroups contains <b>only<b> the given GAReadGroup elements and nothing else in whatever order.
   * @param readGroups the given elements that should be contained in actual GAReadGroupSet.Builder's readGroups.
   * @return this assertion object.
   * @throws AssertionError if the actual GAReadGroupSet.Builder's readGroups does not contain all given GAReadGroup elements.
   */
  public GAReadGroupSetBuilderAssert hasOnlyReadGroups(GAReadGroup... readGroups) {
    // check that actual GAReadGroupSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given GAReadGroup varargs is not null.
    if (readGroups == null) failWithMessage("Expecting readGroups parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getReadGroups(), readGroups);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadGroupSet.Builder's readGroups does not contain the given GAReadGroup elements.
   *
   * @param readGroups the given elements that should not be in actual GAReadGroupSet.Builder's readGroups.
   * @return this assertion object.
   * @throws AssertionError if the actual GAReadGroupSet.Builder's readGroups contains any given GAReadGroup elements.
   */
  public GAReadGroupSetBuilderAssert doesNotHaveReadGroups(GAReadGroup... readGroups) {
    // check that actual GAReadGroupSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given GAReadGroup varargs is not null.
    if (readGroups == null) failWithMessage("Expecting readGroups parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getReadGroups(), readGroups);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadGroupSet.Builder has no readGroups.
   * @return this assertion object.
   * @throws AssertionError if the actual GAReadGroupSet.Builder's readGroups is not empty.
   */
  public GAReadGroupSetBuilderAssert hasNoReadGroups() {
    // check that actual GAReadGroupSet.Builder we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have readGroups but had :\n  <%s>";
    
    // check
    if (actual.getReadGroups().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getReadGroups());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual GAReadGroupSet.Builder has dataset id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadGroupSet.Builder does not have dataset id.
   */
  public GAReadGroupSetBuilderAssert hasDatasetId() {
    // check that actual GAReadGroupSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasDatasetId()) {
      failWithMessage("\nExpecting that actual GAReadGroupSet.Builder has dataset id but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadGroupSet.Builder does not have dataset id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadGroupSet.Builder has dataset id.
   */
  public GAReadGroupSetBuilderAssert doesNotHaveDatasetId() {
    // check that actual GAReadGroupSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasDatasetId()) {
      failWithMessage("\nExpecting that actual GAReadGroupSet.Builder does not have dataset id but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadGroupSet.Builder has id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadGroupSet.Builder does not have id.
   */
  public GAReadGroupSetBuilderAssert hasId() {
    // check that actual GAReadGroupSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasId()) {
      failWithMessage("\nExpecting that actual GAReadGroupSet.Builder has id but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadGroupSet.Builder does not have id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadGroupSet.Builder has id.
   */
  public GAReadGroupSetBuilderAssert doesNotHaveId() {
    // check that actual GAReadGroupSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasId()) {
      failWithMessage("\nExpecting that actual GAReadGroupSet.Builder does not have id but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadGroupSet.Builder has name.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadGroupSet.Builder does not have name.
   */
  public GAReadGroupSetBuilderAssert hasName() {
    // check that actual GAReadGroupSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasName()) {
      failWithMessage("\nExpecting that actual GAReadGroupSet.Builder has name but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadGroupSet.Builder does not have name.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadGroupSet.Builder has name.
   */
  public GAReadGroupSetBuilderAssert doesNotHaveName() {
    // check that actual GAReadGroupSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasName()) {
      failWithMessage("\nExpecting that actual GAReadGroupSet.Builder does not have name but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadGroupSet.Builder has read groups.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadGroupSet.Builder does not have read groups.
   */
  public GAReadGroupSetBuilderAssert hasReadGroups() {
    // check that actual GAReadGroupSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasReadGroups()) {
      failWithMessage("\nExpecting that actual GAReadGroupSet.Builder has read groups but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadGroupSet.Builder does not have read groups.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadGroupSet.Builder has read groups.
   */
  public GAReadGroupSetBuilderAssert doesNotHaveReadGroups() {
    // check that actual GAReadGroupSet.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasReadGroups()) {
      failWithMessage("\nExpecting that actual GAReadGroupSet.Builder does not have read groups but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
