package org.ga4gh;

import org.assertj.core.api.*;
import org.assertj.core.internal.*;
import org.assertj.core.util.*;

/**
 * {@link GASearchSamplesResponse} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GASearchSamplesResponseAssert extends AbstractAssert<GASearchSamplesResponseAssert, GASearchSamplesResponse> {

  /**
   * Creates a new <code>{@link GASearchSamplesResponseAssert}</code> to make assertions on actual GASearchSamplesResponse.
   * @param actual the GASearchSamplesResponse we want to make assertions on.
   */
  public GASearchSamplesResponseAssert(GASearchSamplesResponse actual) {
    super(actual, GASearchSamplesResponseAssert.class);
  }

  /**
   * An entry point for GASearchSamplesResponseAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGASearchSamplesResponse)</code> and get specific assertion with code completion.
   * @param actual the GASearchSamplesResponse we want to make assertions on.
   * @return a new <code>{@link GASearchSamplesResponseAssert}</code>
   */
  public static GASearchSamplesResponseAssert assertThat(GASearchSamplesResponse actual) {
    return new GASearchSamplesResponseAssert(actual);
  }

  /**
   * Verifies that the actual GASearchSamplesResponse's classSchema is equal to the given one.
   * @param classSchema the given classSchema to compare the actual GASearchSamplesResponse's classSchema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchSamplesResponse's classSchema is not equal to the given one.
   */
  public GASearchSamplesResponseAssert hasClassSchema(org.apache.avro.Schema classSchema) {
    // check that actual GASearchSamplesResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classSchema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualClassSchema = actual.getClassSchema();
    if (!Objects.areEqual(actualClassSchema, classSchema)) {
      failWithMessage(assertjErrorMessage, actual, classSchema, actualClassSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchSamplesResponse's nextPageToken is equal to the given one.
   * @param nextPageToken the given nextPageToken to compare the actual GASearchSamplesResponse's nextPageToken to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchSamplesResponse's nextPageToken is not equal to the given one.
   */
  public GASearchSamplesResponseAssert hasNextPageToken(String nextPageToken) {
    // check that actual GASearchSamplesResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting nextPageToken of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualNextPageToken = actual.getNextPageToken();
    if (!Objects.areEqual(actualNextPageToken, nextPageToken)) {
      failWithMessage(assertjErrorMessage, actual, nextPageToken, actualNextPageToken);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchSamplesResponse's samples contains the given GASample elements.
   * @param samples the given elements that should be contained in actual GASearchSamplesResponse's samples.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchSamplesResponse's samples does not contain all given GASample elements.
   */
  public GASearchSamplesResponseAssert hasSamples(GASample... samples) {
    // check that actual GASearchSamplesResponse we want to make assertions on is not null.
    isNotNull();

    // check that given GASample varargs is not null.
    if (samples == null) failWithMessage("Expecting samples parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getSamples(), samples);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchSamplesResponse's samples contains <b>only<b> the given GASample elements and nothing else in whatever order.
   * @param samples the given elements that should be contained in actual GASearchSamplesResponse's samples.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchSamplesResponse's samples does not contain all given GASample elements.
   */
  public GASearchSamplesResponseAssert hasOnlySamples(GASample... samples) {
    // check that actual GASearchSamplesResponse we want to make assertions on is not null.
    isNotNull();

    // check that given GASample varargs is not null.
    if (samples == null) failWithMessage("Expecting samples parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getSamples(), samples);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchSamplesResponse's samples does not contain the given GASample elements.
   *
   * @param samples the given elements that should not be in actual GASearchSamplesResponse's samples.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchSamplesResponse's samples contains any given GASample elements.
   */
  public GASearchSamplesResponseAssert doesNotHaveSamples(GASample... samples) {
    // check that actual GASearchSamplesResponse we want to make assertions on is not null.
    isNotNull();

    // check that given GASample varargs is not null.
    if (samples == null) failWithMessage("Expecting samples parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getSamples(), samples);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchSamplesResponse has no samples.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchSamplesResponse's samples is not empty.
   */
  public GASearchSamplesResponseAssert hasNoSamples() {
    // check that actual GASearchSamplesResponse we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have samples but had :\n  <%s>";
    
    // check
    if (actual.getSamples().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getSamples());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual GASearchSamplesResponse's schema is equal to the given one.
   * @param schema the given schema to compare the actual GASearchSamplesResponse's schema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchSamplesResponse's schema is not equal to the given one.
   */
  public GASearchSamplesResponseAssert hasSchema(org.apache.avro.Schema schema) {
    // check that actual GASearchSamplesResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting schema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualSchema = actual.getSchema();
    if (!Objects.areEqual(actualSchema, schema)) {
      failWithMessage(assertjErrorMessage, actual, schema, actualSchema);
    }

    // return the current assertion for method chaining
    return this;
  }



}
