package org.ga4gh;

import org.assertj.core.api.*;
import org.assertj.core.internal.*;
import org.assertj.core.util.*;

/**
 * {@link GASearchIndividualsResponse} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GASearchIndividualsResponseAssert extends AbstractAssert<GASearchIndividualsResponseAssert, GASearchIndividualsResponse> {

  /**
   * Creates a new <code>{@link GASearchIndividualsResponseAssert}</code> to make assertions on actual GASearchIndividualsResponse.
   * @param actual the GASearchIndividualsResponse we want to make assertions on.
   */
  public GASearchIndividualsResponseAssert(GASearchIndividualsResponse actual) {
    super(actual, GASearchIndividualsResponseAssert.class);
  }

  /**
   * An entry point for GASearchIndividualsResponseAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGASearchIndividualsResponse)</code> and get specific assertion with code completion.
   * @param actual the GASearchIndividualsResponse we want to make assertions on.
   * @return a new <code>{@link GASearchIndividualsResponseAssert}</code>
   */
  public static GASearchIndividualsResponseAssert assertThat(GASearchIndividualsResponse actual) {
    return new GASearchIndividualsResponseAssert(actual);
  }

  /**
   * Verifies that the actual GASearchIndividualsResponse's classSchema is equal to the given one.
   * @param classSchema the given classSchema to compare the actual GASearchIndividualsResponse's classSchema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchIndividualsResponse's classSchema is not equal to the given one.
   */
  public GASearchIndividualsResponseAssert hasClassSchema(org.apache.avro.Schema classSchema) {
    // check that actual GASearchIndividualsResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classSchema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualClassSchema = actual.getClassSchema();
    if (!Objects.areEqual(actualClassSchema, classSchema)) {
      failWithMessage(assertjErrorMessage, actual, classSchema, actualClassSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchIndividualsResponse's individuals contains the given GAIndividual elements.
   * @param individuals the given elements that should be contained in actual GASearchIndividualsResponse's individuals.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchIndividualsResponse's individuals does not contain all given GAIndividual elements.
   */
  public GASearchIndividualsResponseAssert hasIndividuals(GAIndividual... individuals) {
    // check that actual GASearchIndividualsResponse we want to make assertions on is not null.
    isNotNull();

    // check that given GAIndividual varargs is not null.
    if (individuals == null) failWithMessage("Expecting individuals parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getIndividuals(), individuals);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchIndividualsResponse's individuals contains <b>only<b> the given GAIndividual elements and nothing else in whatever order.
   * @param individuals the given elements that should be contained in actual GASearchIndividualsResponse's individuals.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchIndividualsResponse's individuals does not contain all given GAIndividual elements.
   */
  public GASearchIndividualsResponseAssert hasOnlyIndividuals(GAIndividual... individuals) {
    // check that actual GASearchIndividualsResponse we want to make assertions on is not null.
    isNotNull();

    // check that given GAIndividual varargs is not null.
    if (individuals == null) failWithMessage("Expecting individuals parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getIndividuals(), individuals);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchIndividualsResponse's individuals does not contain the given GAIndividual elements.
   *
   * @param individuals the given elements that should not be in actual GASearchIndividualsResponse's individuals.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchIndividualsResponse's individuals contains any given GAIndividual elements.
   */
  public GASearchIndividualsResponseAssert doesNotHaveIndividuals(GAIndividual... individuals) {
    // check that actual GASearchIndividualsResponse we want to make assertions on is not null.
    isNotNull();

    // check that given GAIndividual varargs is not null.
    if (individuals == null) failWithMessage("Expecting individuals parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getIndividuals(), individuals);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchIndividualsResponse has no individuals.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchIndividualsResponse's individuals is not empty.
   */
  public GASearchIndividualsResponseAssert hasNoIndividuals() {
    // check that actual GASearchIndividualsResponse we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have individuals but had :\n  <%s>";
    
    // check
    if (actual.getIndividuals().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getIndividuals());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual GASearchIndividualsResponse's nextPageToken is equal to the given one.
   * @param nextPageToken the given nextPageToken to compare the actual GASearchIndividualsResponse's nextPageToken to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchIndividualsResponse's nextPageToken is not equal to the given one.
   */
  public GASearchIndividualsResponseAssert hasNextPageToken(String nextPageToken) {
    // check that actual GASearchIndividualsResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting nextPageToken of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualNextPageToken = actual.getNextPageToken();
    if (!Objects.areEqual(actualNextPageToken, nextPageToken)) {
      failWithMessage(assertjErrorMessage, actual, nextPageToken, actualNextPageToken);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchIndividualsResponse's schema is equal to the given one.
   * @param schema the given schema to compare the actual GASearchIndividualsResponse's schema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchIndividualsResponse's schema is not equal to the given one.
   */
  public GASearchIndividualsResponseAssert hasSchema(org.apache.avro.Schema schema) {
    // check that actual GASearchIndividualsResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting schema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualSchema = actual.getSchema();
    if (!Objects.areEqual(actualSchema, schema)) {
      failWithMessage(assertjErrorMessage, actual, schema, actualSchema);
    }

    // return the current assertion for method chaining
    return this;
  }



}
