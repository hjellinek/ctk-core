package org.ga4gh;

import org.assertj.core.api.*;
import org.assertj.core.internal.*;
import org.assertj.core.util.*;

/**
 * {@link GAIndividual} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GAIndividualAssert extends AbstractAssert<GAIndividualAssert, GAIndividual> {

  /**
   * Creates a new <code>{@link GAIndividualAssert}</code> to make assertions on actual GAIndividual.
   * @param actual the GAIndividual we want to make assertions on.
   */
  public GAIndividualAssert(GAIndividual actual) {
    super(actual, GAIndividualAssert.class);
  }

  /**
   * An entry point for GAIndividualAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGAIndividual)</code> and get specific assertion with code completion.
   * @param actual the GAIndividual we want to make assertions on.
   * @return a new <code>{@link GAIndividualAssert}</code>
   */
  public static GAIndividualAssert assertThat(GAIndividual actual) {
    return new GAIndividualAssert(actual);
  }

  /**
   * Verifies that the actual GAIndividual's classSchema is equal to the given one.
   * @param classSchema the given classSchema to compare the actual GAIndividual's classSchema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual's classSchema is not equal to the given one.
   */
  public GAIndividualAssert hasClassSchema(org.apache.avro.Schema classSchema) {
    // check that actual GAIndividual we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classSchema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualClassSchema = actual.getClassSchema();
    if (!Objects.areEqual(actualClassSchema, classSchema)) {
      failWithMessage(assertjErrorMessage, actual, classSchema, actualClassSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual's clinicalTreatment is equal to the given one.
   * @param clinicalTreatment the given clinicalTreatment to compare the actual GAIndividual's clinicalTreatment to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual's clinicalTreatment is not equal to the given one.
   */
  public GAIndividualAssert hasClinicalTreatment(String clinicalTreatment) {
    // check that actual GAIndividual we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting clinicalTreatment of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualClinicalTreatment = actual.getClinicalTreatment();
    if (!Objects.areEqual(actualClinicalTreatment, clinicalTreatment)) {
      failWithMessage(assertjErrorMessage, actual, clinicalTreatment, actualClinicalTreatment);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual's created is equal to the given one.
   * @param created the given created to compare the actual GAIndividual's created to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual's created is not equal to the given one.
   */
  public GAIndividualAssert hasCreated(Long created) {
    // check that actual GAIndividual we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting created of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualCreated = actual.getCreated();
    if (!Objects.areEqual(actualCreated, created)) {
      failWithMessage(assertjErrorMessage, actual, created, actualCreated);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual's dateOfBirth is equal to the given one.
   * @param dateOfBirth the given dateOfBirth to compare the actual GAIndividual's dateOfBirth to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual's dateOfBirth is not equal to the given one.
   */
  public GAIndividualAssert hasDateOfBirth(Long dateOfBirth) {
    // check that actual GAIndividual we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting dateOfBirth of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualDateOfBirth = actual.getDateOfBirth();
    if (!Objects.areEqual(actualDateOfBirth, dateOfBirth)) {
      failWithMessage(assertjErrorMessage, actual, dateOfBirth, actualDateOfBirth);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual's description is equal to the given one.
   * @param description the given description to compare the actual GAIndividual's description to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual's description is not equal to the given one.
   */
  public GAIndividualAssert hasDescription(String description) {
    // check that actual GAIndividual we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualDescription = actual.getDescription();
    if (!Objects.areEqual(actualDescription, description)) {
      failWithMessage(assertjErrorMessage, actual, description, actualDescription);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual's developmentalStage is equal to the given one.
   * @param developmentalStage the given developmentalStage to compare the actual GAIndividual's developmentalStage to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual's developmentalStage is not equal to the given one.
   */
  public GAIndividualAssert hasDevelopmentalStage(GAOntologyTerm developmentalStage) {
    // check that actual GAIndividual we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting developmentalStage of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    GAOntologyTerm actualDevelopmentalStage = actual.getDevelopmentalStage();
    if (!Objects.areEqual(actualDevelopmentalStage, developmentalStage)) {
      failWithMessage(assertjErrorMessage, actual, developmentalStage, actualDevelopmentalStage);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual's diseases contains the given GAOntologyTerm elements.
   * @param diseases the given elements that should be contained in actual GAIndividual's diseases.
   * @return this assertion object.
   * @throws AssertionError if the actual GAIndividual's diseases does not contain all given GAOntologyTerm elements.
   */
  public GAIndividualAssert hasDiseases(GAOntologyTerm... diseases) {
    // check that actual GAIndividual we want to make assertions on is not null.
    isNotNull();

    // check that given GAOntologyTerm varargs is not null.
    if (diseases == null) failWithMessage("Expecting diseases parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getDiseases(), diseases);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual's diseases contains <b>only<b> the given GAOntologyTerm elements and nothing else in whatever order.
   * @param diseases the given elements that should be contained in actual GAIndividual's diseases.
   * @return this assertion object.
   * @throws AssertionError if the actual GAIndividual's diseases does not contain all given GAOntologyTerm elements.
   */
  public GAIndividualAssert hasOnlyDiseases(GAOntologyTerm... diseases) {
    // check that actual GAIndividual we want to make assertions on is not null.
    isNotNull();

    // check that given GAOntologyTerm varargs is not null.
    if (diseases == null) failWithMessage("Expecting diseases parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getDiseases(), diseases);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual's diseases does not contain the given GAOntologyTerm elements.
   *
   * @param diseases the given elements that should not be in actual GAIndividual's diseases.
   * @return this assertion object.
   * @throws AssertionError if the actual GAIndividual's diseases contains any given GAOntologyTerm elements.
   */
  public GAIndividualAssert doesNotHaveDiseases(GAOntologyTerm... diseases) {
    // check that actual GAIndividual we want to make assertions on is not null.
    isNotNull();

    // check that given GAOntologyTerm varargs is not null.
    if (diseases == null) failWithMessage("Expecting diseases parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getDiseases(), diseases);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual has no diseases.
   * @return this assertion object.
   * @throws AssertionError if the actual GAIndividual's diseases is not empty.
   */
  public GAIndividualAssert hasNoDiseases() {
    // check that actual GAIndividual we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have diseases but had :\n  <%s>";
    
    // check
    if (actual.getDiseases().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getDiseases());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual GAIndividual's groupIds contains the given String elements.
   * @param groupIds the given elements that should be contained in actual GAIndividual's groupIds.
   * @return this assertion object.
   * @throws AssertionError if the actual GAIndividual's groupIds does not contain all given String elements.
   */
  public GAIndividualAssert hasGroupIds(String... groupIds) {
    // check that actual GAIndividual we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (groupIds == null) failWithMessage("Expecting groupIds parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getGroupIds(), groupIds);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual's groupIds contains <b>only<b> the given String elements and nothing else in whatever order.
   * @param groupIds the given elements that should be contained in actual GAIndividual's groupIds.
   * @return this assertion object.
   * @throws AssertionError if the actual GAIndividual's groupIds does not contain all given String elements.
   */
  public GAIndividualAssert hasOnlyGroupIds(String... groupIds) {
    // check that actual GAIndividual we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (groupIds == null) failWithMessage("Expecting groupIds parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getGroupIds(), groupIds);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual's groupIds does not contain the given String elements.
   *
   * @param groupIds the given elements that should not be in actual GAIndividual's groupIds.
   * @return this assertion object.
   * @throws AssertionError if the actual GAIndividual's groupIds contains any given String elements.
   */
  public GAIndividualAssert doesNotHaveGroupIds(String... groupIds) {
    // check that actual GAIndividual we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (groupIds == null) failWithMessage("Expecting groupIds parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getGroupIds(), groupIds);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual has no groupIds.
   * @return this assertion object.
   * @throws AssertionError if the actual GAIndividual's groupIds is not empty.
   */
  public GAIndividualAssert hasNoGroupIds() {
    // check that actual GAIndividual we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have groupIds but had :\n  <%s>";
    
    // check
    if (actual.getGroupIds().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getGroupIds());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual GAIndividual's id is equal to the given one.
   * @param id the given id to compare the actual GAIndividual's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual's id is not equal to the given one.
   */
  public GAIndividualAssert hasId(String id) {
    // check that actual GAIndividual we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual's info is equal to the given one.
   * @param info the given info to compare the actual GAIndividual's info to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual's info is not equal to the given one.
   */
  public GAIndividualAssert hasInfo(java.util.Map info) {
    // check that actual GAIndividual we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting info of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.util.Map actualInfo = actual.getInfo();
    if (!Objects.areEqual(actualInfo, info)) {
      failWithMessage(assertjErrorMessage, actual, info, actualInfo);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual's name is equal to the given one.
   * @param name the given name to compare the actual GAIndividual's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual's name is not equal to the given one.
   */
  public GAIndividualAssert hasName(String name) {
    // check that actual GAIndividual we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual's phenotypes contains the given GAOntologyTerm elements.
   * @param phenotypes the given elements that should be contained in actual GAIndividual's phenotypes.
   * @return this assertion object.
   * @throws AssertionError if the actual GAIndividual's phenotypes does not contain all given GAOntologyTerm elements.
   */
  public GAIndividualAssert hasPhenotypes(GAOntologyTerm... phenotypes) {
    // check that actual GAIndividual we want to make assertions on is not null.
    isNotNull();

    // check that given GAOntologyTerm varargs is not null.
    if (phenotypes == null) failWithMessage("Expecting phenotypes parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getPhenotypes(), phenotypes);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual's phenotypes contains <b>only<b> the given GAOntologyTerm elements and nothing else in whatever order.
   * @param phenotypes the given elements that should be contained in actual GAIndividual's phenotypes.
   * @return this assertion object.
   * @throws AssertionError if the actual GAIndividual's phenotypes does not contain all given GAOntologyTerm elements.
   */
  public GAIndividualAssert hasOnlyPhenotypes(GAOntologyTerm... phenotypes) {
    // check that actual GAIndividual we want to make assertions on is not null.
    isNotNull();

    // check that given GAOntologyTerm varargs is not null.
    if (phenotypes == null) failWithMessage("Expecting phenotypes parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getPhenotypes(), phenotypes);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual's phenotypes does not contain the given GAOntologyTerm elements.
   *
   * @param phenotypes the given elements that should not be in actual GAIndividual's phenotypes.
   * @return this assertion object.
   * @throws AssertionError if the actual GAIndividual's phenotypes contains any given GAOntologyTerm elements.
   */
  public GAIndividualAssert doesNotHavePhenotypes(GAOntologyTerm... phenotypes) {
    // check that actual GAIndividual we want to make assertions on is not null.
    isNotNull();

    // check that given GAOntologyTerm varargs is not null.
    if (phenotypes == null) failWithMessage("Expecting phenotypes parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getPhenotypes(), phenotypes);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual has no phenotypes.
   * @return this assertion object.
   * @throws AssertionError if the actual GAIndividual's phenotypes is not empty.
   */
  public GAIndividualAssert hasNoPhenotypes() {
    // check that actual GAIndividual we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have phenotypes but had :\n  <%s>";
    
    // check
    if (actual.getPhenotypes().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getPhenotypes());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual GAIndividual's schema is equal to the given one.
   * @param schema the given schema to compare the actual GAIndividual's schema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual's schema is not equal to the given one.
   */
  public GAIndividualAssert hasSchema(org.apache.avro.Schema schema) {
    // check that actual GAIndividual we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting schema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualSchema = actual.getSchema();
    if (!Objects.areEqual(actualSchema, schema)) {
      failWithMessage(assertjErrorMessage, actual, schema, actualSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual's sex is equal to the given one.
   * @param sex the given sex to compare the actual GAIndividual's sex to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual's sex is not equal to the given one.
   */
  public GAIndividualAssert hasSex(GASex sex) {
    // check that actual GAIndividual we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting sex of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    GASex actualSex = actual.getSex();
    if (!Objects.areEqual(actualSex, sex)) {
      failWithMessage(assertjErrorMessage, actual, sex, actualSex);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual's species is equal to the given one.
   * @param species the given species to compare the actual GAIndividual's species to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual's species is not equal to the given one.
   */
  public GAIndividualAssert hasSpecies(GAOntologyTerm species) {
    // check that actual GAIndividual we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting species of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    GAOntologyTerm actualSpecies = actual.getSpecies();
    if (!Objects.areEqual(actualSpecies, species)) {
      failWithMessage(assertjErrorMessage, actual, species, actualSpecies);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual's stagingSystem is equal to the given one.
   * @param stagingSystem the given stagingSystem to compare the actual GAIndividual's stagingSystem to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual's stagingSystem is not equal to the given one.
   */
  public GAIndividualAssert hasStagingSystem(String stagingSystem) {
    // check that actual GAIndividual we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting stagingSystem of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualStagingSystem = actual.getStagingSystem();
    if (!Objects.areEqual(actualStagingSystem, stagingSystem)) {
      failWithMessage(assertjErrorMessage, actual, stagingSystem, actualStagingSystem);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual's strain is equal to the given one.
   * @param strain the given strain to compare the actual GAIndividual's strain to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual's strain is not equal to the given one.
   */
  public GAIndividualAssert hasStrain(String strain) {
    // check that actual GAIndividual we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting strain of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualStrain = actual.getStrain();
    if (!Objects.areEqual(actualStrain, strain)) {
      failWithMessage(assertjErrorMessage, actual, strain, actualStrain);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual's updated is equal to the given one.
   * @param updated the given updated to compare the actual GAIndividual's updated to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual's updated is not equal to the given one.
   */
  public GAIndividualAssert hasUpdated(Long updated) {
    // check that actual GAIndividual we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting updated of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualUpdated = actual.getUpdated();
    if (!Objects.areEqual(actualUpdated, updated)) {
      failWithMessage(assertjErrorMessage, actual, updated, actualUpdated);
    }

    // return the current assertion for method chaining
    return this;
  }

















}
