package org.ga4gh;

/**
 * {@link GAIndividualGroup.Builder} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GAIndividualGroupBuilderAssert extends AbstractAssert<GAIndividualGroupBuilderAssert, GAIndividualGroup.Builder> {

  /**
   * Creates a new <code>{@link GAIndividualGroupBuilderAssert}</code> to make assertions on actual GAIndividualGroup.Builder.
   * @param actual the GAIndividualGroup.Builder we want to make assertions on.
   */
  public GAIndividualGroupBuilderAssert(GAIndividualGroup.Builder actual) {
    super(actual, GAIndividualGroupBuilderAssert.class);
  }

  /**
   * An entry point for GAIndividualGroupBuilderAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGAIndividualGroup.Builder)</code> and get specific assertion with code completion.
   * @param actual the GAIndividualGroup.Builder we want to make assertions on.
   * @return a new <code>{@link GAIndividualGroupBuilderAssert}</code>
   */
  public static GAIndividualGroupBuilderAssert assertThat(GAIndividualGroup.Builder actual) {
    return new GAIndividualGroupBuilderAssert(actual);
  }

  /**
   * Verifies that the actual GAIndividualGroup.Builder's created is equal to the given one.
   * @param created the given created to compare the actual GAIndividualGroup.Builder's created to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividualGroup.Builder's created is not equal to the given one.
   */
  public GAIndividualGroupBuilderAssert hasCreated(Long created) {
    // check that actual GAIndividualGroup.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting created of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualCreated = actual.getCreated();
    if (!Objects.areEqual(actualCreated, created)) {
      failWithMessage(assertjErrorMessage, actual, created, actualCreated);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividualGroup.Builder's description is equal to the given one.
   * @param description the given description to compare the actual GAIndividualGroup.Builder's description to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividualGroup.Builder's description is not equal to the given one.
   */
  public GAIndividualGroupBuilderAssert hasDescription(String description) {
    // check that actual GAIndividualGroup.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualDescription = actual.getDescription();
    if (!Objects.areEqual(actualDescription, description)) {
      failWithMessage(assertjErrorMessage, actual, description, actualDescription);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividualGroup.Builder's id is equal to the given one.
   * @param id the given id to compare the actual GAIndividualGroup.Builder's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividualGroup.Builder's id is not equal to the given one.
   */
  public GAIndividualGroupBuilderAssert hasId(String id) {
    // check that actual GAIndividualGroup.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividualGroup.Builder's info is equal to the given one.
   * @param info the given info to compare the actual GAIndividualGroup.Builder's info to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividualGroup.Builder's info is not equal to the given one.
   */
  public GAIndividualGroupBuilderAssert hasInfo(java.util.Map info) {
    // check that actual GAIndividualGroup.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting info of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.util.Map actualInfo = actual.getInfo();
    if (!Objects.areEqual(actualInfo, info)) {
      failWithMessage(assertjErrorMessage, actual, info, actualInfo);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividualGroup.Builder's name is equal to the given one.
   * @param name the given name to compare the actual GAIndividualGroup.Builder's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividualGroup.Builder's name is not equal to the given one.
   */
  public GAIndividualGroupBuilderAssert hasName(String name) {
    // check that actual GAIndividualGroup.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividualGroup.Builder's type is equal to the given one.
   * @param type the given type to compare the actual GAIndividualGroup.Builder's type to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividualGroup.Builder's type is not equal to the given one.
   */
  public GAIndividualGroupBuilderAssert hasType(String type) {
    // check that actual GAIndividualGroup.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting type of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualType = actual.getType();
    if (!Objects.areEqual(actualType, type)) {
      failWithMessage(assertjErrorMessage, actual, type, actualType);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividualGroup.Builder's updated is equal to the given one.
   * @param updated the given updated to compare the actual GAIndividualGroup.Builder's updated to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividualGroup.Builder's updated is not equal to the given one.
   */
  public GAIndividualGroupBuilderAssert hasUpdated(Long updated) {
    // check that actual GAIndividualGroup.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting updated of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualUpdated = actual.getUpdated();
    if (!Objects.areEqual(actualUpdated, updated)) {
      failWithMessage(assertjErrorMessage, actual, updated, actualUpdated);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividualGroup.Builder has created.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividualGroup.Builder does not have created.
   */
  public GAIndividualGroupBuilderAssert hasCreated() {
    // check that actual GAIndividualGroup.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasCreated()) {
      failWithMessage("\nExpecting that actual GAIndividualGroup.Builder has created but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividualGroup.Builder does not have created.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividualGroup.Builder has created.
   */
  public GAIndividualGroupBuilderAssert doesNotHaveCreated() {
    // check that actual GAIndividualGroup.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasCreated()) {
      failWithMessage("\nExpecting that actual GAIndividualGroup.Builder does not have created but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividualGroup.Builder has description.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividualGroup.Builder does not have description.
   */
  public GAIndividualGroupBuilderAssert hasDescription() {
    // check that actual GAIndividualGroup.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasDescription()) {
      failWithMessage("\nExpecting that actual GAIndividualGroup.Builder has description but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividualGroup.Builder does not have description.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividualGroup.Builder has description.
   */
  public GAIndividualGroupBuilderAssert doesNotHaveDescription() {
    // check that actual GAIndividualGroup.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasDescription()) {
      failWithMessage("\nExpecting that actual GAIndividualGroup.Builder does not have description but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividualGroup.Builder has id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividualGroup.Builder does not have id.
   */
  public GAIndividualGroupBuilderAssert hasId() {
    // check that actual GAIndividualGroup.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasId()) {
      failWithMessage("\nExpecting that actual GAIndividualGroup.Builder has id but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividualGroup.Builder does not have id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividualGroup.Builder has id.
   */
  public GAIndividualGroupBuilderAssert doesNotHaveId() {
    // check that actual GAIndividualGroup.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasId()) {
      failWithMessage("\nExpecting that actual GAIndividualGroup.Builder does not have id but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividualGroup.Builder has info.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividualGroup.Builder does not have info.
   */
  public GAIndividualGroupBuilderAssert hasInfo() {
    // check that actual GAIndividualGroup.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasInfo()) {
      failWithMessage("\nExpecting that actual GAIndividualGroup.Builder has info but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividualGroup.Builder does not have info.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividualGroup.Builder has info.
   */
  public GAIndividualGroupBuilderAssert doesNotHaveInfo() {
    // check that actual GAIndividualGroup.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasInfo()) {
      failWithMessage("\nExpecting that actual GAIndividualGroup.Builder does not have info but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividualGroup.Builder has name.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividualGroup.Builder does not have name.
   */
  public GAIndividualGroupBuilderAssert hasName() {
    // check that actual GAIndividualGroup.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasName()) {
      failWithMessage("\nExpecting that actual GAIndividualGroup.Builder has name but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividualGroup.Builder does not have name.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividualGroup.Builder has name.
   */
  public GAIndividualGroupBuilderAssert doesNotHaveName() {
    // check that actual GAIndividualGroup.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasName()) {
      failWithMessage("\nExpecting that actual GAIndividualGroup.Builder does not have name but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividualGroup.Builder has type.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividualGroup.Builder does not have type.
   */
  public GAIndividualGroupBuilderAssert hasType() {
    // check that actual GAIndividualGroup.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasType()) {
      failWithMessage("\nExpecting that actual GAIndividualGroup.Builder has type but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividualGroup.Builder does not have type.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividualGroup.Builder has type.
   */
  public GAIndividualGroupBuilderAssert doesNotHaveType() {
    // check that actual GAIndividualGroup.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasType()) {
      failWithMessage("\nExpecting that actual GAIndividualGroup.Builder does not have type but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividualGroup.Builder has updated.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividualGroup.Builder does not have updated.
   */
  public GAIndividualGroupBuilderAssert hasUpdated() {
    // check that actual GAIndividualGroup.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasUpdated()) {
      failWithMessage("\nExpecting that actual GAIndividualGroup.Builder has updated but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividualGroup.Builder does not have updated.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividualGroup.Builder has updated.
   */
  public GAIndividualGroupBuilderAssert doesNotHaveUpdated() {
    // check that actual GAIndividualGroup.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasUpdated()) {
      failWithMessage("\nExpecting that actual GAIndividualGroup.Builder does not have updated but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
