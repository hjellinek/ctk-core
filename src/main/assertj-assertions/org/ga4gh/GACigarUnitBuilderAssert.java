package org.ga4gh;

/**
 * {@link GACigarUnit.Builder} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GACigarUnitBuilderAssert extends AbstractAssert<GACigarUnitBuilderAssert, GACigarUnit.Builder> {

  /**
   * Creates a new <code>{@link GACigarUnitBuilderAssert}</code> to make assertions on actual GACigarUnit.Builder.
   * @param actual the GACigarUnit.Builder we want to make assertions on.
   */
  public GACigarUnitBuilderAssert(GACigarUnit.Builder actual) {
    super(actual, GACigarUnitBuilderAssert.class);
  }

  /**
   * An entry point for GACigarUnitBuilderAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGACigarUnit.Builder)</code> and get specific assertion with code completion.
   * @param actual the GACigarUnit.Builder we want to make assertions on.
   * @return a new <code>{@link GACigarUnitBuilderAssert}</code>
   */
  public static GACigarUnitBuilderAssert assertThat(GACigarUnit.Builder actual) {
    return new GACigarUnitBuilderAssert(actual);
  }

  /**
   * Verifies that the actual GACigarUnit.Builder's operation is equal to the given one.
   * @param operation the given operation to compare the actual GACigarUnit.Builder's operation to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GACigarUnit.Builder's operation is not equal to the given one.
   */
  public GACigarUnitBuilderAssert hasOperation(GACigarOperation operation) {
    // check that actual GACigarUnit.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting operation of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    GACigarOperation actualOperation = actual.getOperation();
    if (!Objects.areEqual(actualOperation, operation)) {
      failWithMessage(assertjErrorMessage, actual, operation, actualOperation);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GACigarUnit.Builder's operationLength is equal to the given one.
   * @param operationLength the given operationLength to compare the actual GACigarUnit.Builder's operationLength to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GACigarUnit.Builder's operationLength is not equal to the given one.
   */
  public GACigarUnitBuilderAssert hasOperationLength(Long operationLength) {
    // check that actual GACigarUnit.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting operationLength of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualOperationLength = actual.getOperationLength();
    if (!Objects.areEqual(actualOperationLength, operationLength)) {
      failWithMessage(assertjErrorMessage, actual, operationLength, actualOperationLength);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GACigarUnit.Builder's referenceSequence is equal to the given one.
   * @param referenceSequence the given referenceSequence to compare the actual GACigarUnit.Builder's referenceSequence to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GACigarUnit.Builder's referenceSequence is not equal to the given one.
   */
  public GACigarUnitBuilderAssert hasReferenceSequence(String referenceSequence) {
    // check that actual GACigarUnit.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting referenceSequence of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualReferenceSequence = actual.getReferenceSequence();
    if (!Objects.areEqual(actualReferenceSequence, referenceSequence)) {
      failWithMessage(assertjErrorMessage, actual, referenceSequence, actualReferenceSequence);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GACigarUnit.Builder has operation.
   * @return this assertion object.
   * @throws AssertionError - if the actual GACigarUnit.Builder does not have operation.
   */
  public GACigarUnitBuilderAssert hasOperation() {
    // check that actual GACigarUnit.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasOperation()) {
      failWithMessage("\nExpecting that actual GACigarUnit.Builder has operation but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GACigarUnit.Builder does not have operation.
   * @return this assertion object.
   * @throws AssertionError - if the actual GACigarUnit.Builder has operation.
   */
  public GACigarUnitBuilderAssert doesNotHaveOperation() {
    // check that actual GACigarUnit.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasOperation()) {
      failWithMessage("\nExpecting that actual GACigarUnit.Builder does not have operation but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GACigarUnit.Builder has operation length.
   * @return this assertion object.
   * @throws AssertionError - if the actual GACigarUnit.Builder does not have operation length.
   */
  public GACigarUnitBuilderAssert hasOperationLength() {
    // check that actual GACigarUnit.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasOperationLength()) {
      failWithMessage("\nExpecting that actual GACigarUnit.Builder has operation length but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GACigarUnit.Builder does not have operation length.
   * @return this assertion object.
   * @throws AssertionError - if the actual GACigarUnit.Builder has operation length.
   */
  public GACigarUnitBuilderAssert doesNotHaveOperationLength() {
    // check that actual GACigarUnit.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasOperationLength()) {
      failWithMessage("\nExpecting that actual GACigarUnit.Builder does not have operation length but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GACigarUnit.Builder has reference sequence.
   * @return this assertion object.
   * @throws AssertionError - if the actual GACigarUnit.Builder does not have reference sequence.
   */
  public GACigarUnitBuilderAssert hasReferenceSequence() {
    // check that actual GACigarUnit.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasReferenceSequence()) {
      failWithMessage("\nExpecting that actual GACigarUnit.Builder has reference sequence but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GACigarUnit.Builder does not have reference sequence.
   * @return this assertion object.
   * @throws AssertionError - if the actual GACigarUnit.Builder has reference sequence.
   */
  public GACigarUnitBuilderAssert doesNotHaveReferenceSequence() {
    // check that actual GACigarUnit.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasReferenceSequence()) {
      failWithMessage("\nExpecting that actual GACigarUnit.Builder does not have reference sequence but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
