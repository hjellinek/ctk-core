package org.ga4gh;

/**
 * {@link GAIndividual.Builder} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GAIndividualBuilderAssert extends AbstractAssert<GAIndividualBuilderAssert, GAIndividual.Builder> {

  /**
   * Creates a new <code>{@link GAIndividualBuilderAssert}</code> to make assertions on actual GAIndividual.Builder.
   * @param actual the GAIndividual.Builder we want to make assertions on.
   */
  public GAIndividualBuilderAssert(GAIndividual.Builder actual) {
    super(actual, GAIndividualBuilderAssert.class);
  }

  /**
   * An entry point for GAIndividualBuilderAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGAIndividual.Builder)</code> and get specific assertion with code completion.
   * @param actual the GAIndividual.Builder we want to make assertions on.
   * @return a new <code>{@link GAIndividualBuilderAssert}</code>
   */
  public static GAIndividualBuilderAssert assertThat(GAIndividual.Builder actual) {
    return new GAIndividualBuilderAssert(actual);
  }

  /**
   * Verifies that the actual GAIndividual.Builder's clinicalTreatment is equal to the given one.
   * @param clinicalTreatment the given clinicalTreatment to compare the actual GAIndividual.Builder's clinicalTreatment to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder's clinicalTreatment is not equal to the given one.
   */
  public GAIndividualBuilderAssert hasClinicalTreatment(String clinicalTreatment) {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting clinicalTreatment of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualClinicalTreatment = actual.getClinicalTreatment();
    if (!Objects.areEqual(actualClinicalTreatment, clinicalTreatment)) {
      failWithMessage(assertjErrorMessage, actual, clinicalTreatment, actualClinicalTreatment);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder's created is equal to the given one.
   * @param created the given created to compare the actual GAIndividual.Builder's created to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder's created is not equal to the given one.
   */
  public GAIndividualBuilderAssert hasCreated(Long created) {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting created of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualCreated = actual.getCreated();
    if (!Objects.areEqual(actualCreated, created)) {
      failWithMessage(assertjErrorMessage, actual, created, actualCreated);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder's dateOfBirth is equal to the given one.
   * @param dateOfBirth the given dateOfBirth to compare the actual GAIndividual.Builder's dateOfBirth to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder's dateOfBirth is not equal to the given one.
   */
  public GAIndividualBuilderAssert hasDateOfBirth(Long dateOfBirth) {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting dateOfBirth of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualDateOfBirth = actual.getDateOfBirth();
    if (!Objects.areEqual(actualDateOfBirth, dateOfBirth)) {
      failWithMessage(assertjErrorMessage, actual, dateOfBirth, actualDateOfBirth);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder's description is equal to the given one.
   * @param description the given description to compare the actual GAIndividual.Builder's description to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder's description is not equal to the given one.
   */
  public GAIndividualBuilderAssert hasDescription(String description) {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualDescription = actual.getDescription();
    if (!Objects.areEqual(actualDescription, description)) {
      failWithMessage(assertjErrorMessage, actual, description, actualDescription);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder's developmentalStage is equal to the given one.
   * @param developmentalStage the given developmentalStage to compare the actual GAIndividual.Builder's developmentalStage to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder's developmentalStage is not equal to the given one.
   */
  public GAIndividualBuilderAssert hasDevelopmentalStage(GAOntologyTerm developmentalStage) {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting developmentalStage of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    GAOntologyTerm actualDevelopmentalStage = actual.getDevelopmentalStage();
    if (!Objects.areEqual(actualDevelopmentalStage, developmentalStage)) {
      failWithMessage(assertjErrorMessage, actual, developmentalStage, actualDevelopmentalStage);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder's diseases contains the given GAOntologyTerm elements.
   * @param diseases the given elements that should be contained in actual GAIndividual.Builder's diseases.
   * @return this assertion object.
   * @throws AssertionError if the actual GAIndividual.Builder's diseases does not contain all given GAOntologyTerm elements.
   */
  public GAIndividualBuilderAssert hasDiseases(GAOntologyTerm... diseases) {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given GAOntologyTerm varargs is not null.
    if (diseases == null) failWithMessage("Expecting diseases parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getDiseases(), diseases);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder's diseases contains <b>only<b> the given GAOntologyTerm elements and nothing else in whatever order.
   * @param diseases the given elements that should be contained in actual GAIndividual.Builder's diseases.
   * @return this assertion object.
   * @throws AssertionError if the actual GAIndividual.Builder's diseases does not contain all given GAOntologyTerm elements.
   */
  public GAIndividualBuilderAssert hasOnlyDiseases(GAOntologyTerm... diseases) {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given GAOntologyTerm varargs is not null.
    if (diseases == null) failWithMessage("Expecting diseases parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getDiseases(), diseases);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder's diseases does not contain the given GAOntologyTerm elements.
   *
   * @param diseases the given elements that should not be in actual GAIndividual.Builder's diseases.
   * @return this assertion object.
   * @throws AssertionError if the actual GAIndividual.Builder's diseases contains any given GAOntologyTerm elements.
   */
  public GAIndividualBuilderAssert doesNotHaveDiseases(GAOntologyTerm... diseases) {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given GAOntologyTerm varargs is not null.
    if (diseases == null) failWithMessage("Expecting diseases parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getDiseases(), diseases);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder has no diseases.
   * @return this assertion object.
   * @throws AssertionError if the actual GAIndividual.Builder's diseases is not empty.
   */
  public GAIndividualBuilderAssert hasNoDiseases() {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have diseases but had :\n  <%s>";
    
    // check
    if (actual.getDiseases().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getDiseases());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual GAIndividual.Builder's groupIds contains the given String elements.
   * @param groupIds the given elements that should be contained in actual GAIndividual.Builder's groupIds.
   * @return this assertion object.
   * @throws AssertionError if the actual GAIndividual.Builder's groupIds does not contain all given String elements.
   */
  public GAIndividualBuilderAssert hasGroupIds(String... groupIds) {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (groupIds == null) failWithMessage("Expecting groupIds parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getGroupIds(), groupIds);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder's groupIds contains <b>only<b> the given String elements and nothing else in whatever order.
   * @param groupIds the given elements that should be contained in actual GAIndividual.Builder's groupIds.
   * @return this assertion object.
   * @throws AssertionError if the actual GAIndividual.Builder's groupIds does not contain all given String elements.
   */
  public GAIndividualBuilderAssert hasOnlyGroupIds(String... groupIds) {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (groupIds == null) failWithMessage("Expecting groupIds parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getGroupIds(), groupIds);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder's groupIds does not contain the given String elements.
   *
   * @param groupIds the given elements that should not be in actual GAIndividual.Builder's groupIds.
   * @return this assertion object.
   * @throws AssertionError if the actual GAIndividual.Builder's groupIds contains any given String elements.
   */
  public GAIndividualBuilderAssert doesNotHaveGroupIds(String... groupIds) {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (groupIds == null) failWithMessage("Expecting groupIds parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getGroupIds(), groupIds);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder has no groupIds.
   * @return this assertion object.
   * @throws AssertionError if the actual GAIndividual.Builder's groupIds is not empty.
   */
  public GAIndividualBuilderAssert hasNoGroupIds() {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have groupIds but had :\n  <%s>";
    
    // check
    if (actual.getGroupIds().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getGroupIds());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual GAIndividual.Builder's id is equal to the given one.
   * @param id the given id to compare the actual GAIndividual.Builder's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder's id is not equal to the given one.
   */
  public GAIndividualBuilderAssert hasId(String id) {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder's info is equal to the given one.
   * @param info the given info to compare the actual GAIndividual.Builder's info to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder's info is not equal to the given one.
   */
  public GAIndividualBuilderAssert hasInfo(java.util.Map info) {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting info of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.util.Map actualInfo = actual.getInfo();
    if (!Objects.areEqual(actualInfo, info)) {
      failWithMessage(assertjErrorMessage, actual, info, actualInfo);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder's name is equal to the given one.
   * @param name the given name to compare the actual GAIndividual.Builder's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder's name is not equal to the given one.
   */
  public GAIndividualBuilderAssert hasName(String name) {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder's phenotypes contains the given GAOntologyTerm elements.
   * @param phenotypes the given elements that should be contained in actual GAIndividual.Builder's phenotypes.
   * @return this assertion object.
   * @throws AssertionError if the actual GAIndividual.Builder's phenotypes does not contain all given GAOntologyTerm elements.
   */
  public GAIndividualBuilderAssert hasPhenotypes(GAOntologyTerm... phenotypes) {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given GAOntologyTerm varargs is not null.
    if (phenotypes == null) failWithMessage("Expecting phenotypes parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getPhenotypes(), phenotypes);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder's phenotypes contains <b>only<b> the given GAOntologyTerm elements and nothing else in whatever order.
   * @param phenotypes the given elements that should be contained in actual GAIndividual.Builder's phenotypes.
   * @return this assertion object.
   * @throws AssertionError if the actual GAIndividual.Builder's phenotypes does not contain all given GAOntologyTerm elements.
   */
  public GAIndividualBuilderAssert hasOnlyPhenotypes(GAOntologyTerm... phenotypes) {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given GAOntologyTerm varargs is not null.
    if (phenotypes == null) failWithMessage("Expecting phenotypes parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getPhenotypes(), phenotypes);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder's phenotypes does not contain the given GAOntologyTerm elements.
   *
   * @param phenotypes the given elements that should not be in actual GAIndividual.Builder's phenotypes.
   * @return this assertion object.
   * @throws AssertionError if the actual GAIndividual.Builder's phenotypes contains any given GAOntologyTerm elements.
   */
  public GAIndividualBuilderAssert doesNotHavePhenotypes(GAOntologyTerm... phenotypes) {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given GAOntologyTerm varargs is not null.
    if (phenotypes == null) failWithMessage("Expecting phenotypes parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getPhenotypes(), phenotypes);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder has no phenotypes.
   * @return this assertion object.
   * @throws AssertionError if the actual GAIndividual.Builder's phenotypes is not empty.
   */
  public GAIndividualBuilderAssert hasNoPhenotypes() {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have phenotypes but had :\n  <%s>";
    
    // check
    if (actual.getPhenotypes().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getPhenotypes());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual GAIndividual.Builder's sex is equal to the given one.
   * @param sex the given sex to compare the actual GAIndividual.Builder's sex to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder's sex is not equal to the given one.
   */
  public GAIndividualBuilderAssert hasSex(GASex sex) {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting sex of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    GASex actualSex = actual.getSex();
    if (!Objects.areEqual(actualSex, sex)) {
      failWithMessage(assertjErrorMessage, actual, sex, actualSex);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder's species is equal to the given one.
   * @param species the given species to compare the actual GAIndividual.Builder's species to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder's species is not equal to the given one.
   */
  public GAIndividualBuilderAssert hasSpecies(GAOntologyTerm species) {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting species of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    GAOntologyTerm actualSpecies = actual.getSpecies();
    if (!Objects.areEqual(actualSpecies, species)) {
      failWithMessage(assertjErrorMessage, actual, species, actualSpecies);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder's stagingSystem is equal to the given one.
   * @param stagingSystem the given stagingSystem to compare the actual GAIndividual.Builder's stagingSystem to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder's stagingSystem is not equal to the given one.
   */
  public GAIndividualBuilderAssert hasStagingSystem(String stagingSystem) {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting stagingSystem of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualStagingSystem = actual.getStagingSystem();
    if (!Objects.areEqual(actualStagingSystem, stagingSystem)) {
      failWithMessage(assertjErrorMessage, actual, stagingSystem, actualStagingSystem);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder's strain is equal to the given one.
   * @param strain the given strain to compare the actual GAIndividual.Builder's strain to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder's strain is not equal to the given one.
   */
  public GAIndividualBuilderAssert hasStrain(String strain) {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting strain of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualStrain = actual.getStrain();
    if (!Objects.areEqual(actualStrain, strain)) {
      failWithMessage(assertjErrorMessage, actual, strain, actualStrain);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder's updated is equal to the given one.
   * @param updated the given updated to compare the actual GAIndividual.Builder's updated to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder's updated is not equal to the given one.
   */
  public GAIndividualBuilderAssert hasUpdated(Long updated) {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting updated of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualUpdated = actual.getUpdated();
    if (!Objects.areEqual(actualUpdated, updated)) {
      failWithMessage(assertjErrorMessage, actual, updated, actualUpdated);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder has clinical treatment.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder does not have clinical treatment.
   */
  public GAIndividualBuilderAssert hasClinicalTreatment() {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasClinicalTreatment()) {
      failWithMessage("\nExpecting that actual GAIndividual.Builder has clinical treatment but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder does not have clinical treatment.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder has clinical treatment.
   */
  public GAIndividualBuilderAssert doesNotHaveClinicalTreatment() {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasClinicalTreatment()) {
      failWithMessage("\nExpecting that actual GAIndividual.Builder does not have clinical treatment but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder has created.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder does not have created.
   */
  public GAIndividualBuilderAssert hasCreated() {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasCreated()) {
      failWithMessage("\nExpecting that actual GAIndividual.Builder has created but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder does not have created.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder has created.
   */
  public GAIndividualBuilderAssert doesNotHaveCreated() {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasCreated()) {
      failWithMessage("\nExpecting that actual GAIndividual.Builder does not have created but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder has date of birth.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder does not have date of birth.
   */
  public GAIndividualBuilderAssert hasDateOfBirth() {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasDateOfBirth()) {
      failWithMessage("\nExpecting that actual GAIndividual.Builder has date of birth but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder does not have date of birth.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder has date of birth.
   */
  public GAIndividualBuilderAssert doesNotHaveDateOfBirth() {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasDateOfBirth()) {
      failWithMessage("\nExpecting that actual GAIndividual.Builder does not have date of birth but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder has description.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder does not have description.
   */
  public GAIndividualBuilderAssert hasDescription() {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasDescription()) {
      failWithMessage("\nExpecting that actual GAIndividual.Builder has description but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder does not have description.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder has description.
   */
  public GAIndividualBuilderAssert doesNotHaveDescription() {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasDescription()) {
      failWithMessage("\nExpecting that actual GAIndividual.Builder does not have description but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder has developmental stage.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder does not have developmental stage.
   */
  public GAIndividualBuilderAssert hasDevelopmentalStage() {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasDevelopmentalStage()) {
      failWithMessage("\nExpecting that actual GAIndividual.Builder has developmental stage but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder does not have developmental stage.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder has developmental stage.
   */
  public GAIndividualBuilderAssert doesNotHaveDevelopmentalStage() {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasDevelopmentalStage()) {
      failWithMessage("\nExpecting that actual GAIndividual.Builder does not have developmental stage but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder has diseases.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder does not have diseases.
   */
  public GAIndividualBuilderAssert hasDiseases() {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasDiseases()) {
      failWithMessage("\nExpecting that actual GAIndividual.Builder has diseases but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder does not have diseases.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder has diseases.
   */
  public GAIndividualBuilderAssert doesNotHaveDiseases() {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasDiseases()) {
      failWithMessage("\nExpecting that actual GAIndividual.Builder does not have diseases but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder has group ids.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder does not have group ids.
   */
  public GAIndividualBuilderAssert hasGroupIds() {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasGroupIds()) {
      failWithMessage("\nExpecting that actual GAIndividual.Builder has group ids but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder does not have group ids.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder has group ids.
   */
  public GAIndividualBuilderAssert doesNotHaveGroupIds() {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasGroupIds()) {
      failWithMessage("\nExpecting that actual GAIndividual.Builder does not have group ids but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder has id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder does not have id.
   */
  public GAIndividualBuilderAssert hasId() {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasId()) {
      failWithMessage("\nExpecting that actual GAIndividual.Builder has id but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder does not have id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder has id.
   */
  public GAIndividualBuilderAssert doesNotHaveId() {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasId()) {
      failWithMessage("\nExpecting that actual GAIndividual.Builder does not have id but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder has info.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder does not have info.
   */
  public GAIndividualBuilderAssert hasInfo() {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasInfo()) {
      failWithMessage("\nExpecting that actual GAIndividual.Builder has info but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder does not have info.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder has info.
   */
  public GAIndividualBuilderAssert doesNotHaveInfo() {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasInfo()) {
      failWithMessage("\nExpecting that actual GAIndividual.Builder does not have info but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder has name.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder does not have name.
   */
  public GAIndividualBuilderAssert hasName() {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasName()) {
      failWithMessage("\nExpecting that actual GAIndividual.Builder has name but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder does not have name.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder has name.
   */
  public GAIndividualBuilderAssert doesNotHaveName() {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasName()) {
      failWithMessage("\nExpecting that actual GAIndividual.Builder does not have name but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder has phenotypes.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder does not have phenotypes.
   */
  public GAIndividualBuilderAssert hasPhenotypes() {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasPhenotypes()) {
      failWithMessage("\nExpecting that actual GAIndividual.Builder has phenotypes but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder does not have phenotypes.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder has phenotypes.
   */
  public GAIndividualBuilderAssert doesNotHavePhenotypes() {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasPhenotypes()) {
      failWithMessage("\nExpecting that actual GAIndividual.Builder does not have phenotypes but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder has sex.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder does not have sex.
   */
  public GAIndividualBuilderAssert hasSex() {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasSex()) {
      failWithMessage("\nExpecting that actual GAIndividual.Builder has sex but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder does not have sex.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder has sex.
   */
  public GAIndividualBuilderAssert doesNotHaveSex() {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasSex()) {
      failWithMessage("\nExpecting that actual GAIndividual.Builder does not have sex but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder has species.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder does not have species.
   */
  public GAIndividualBuilderAssert hasSpecies() {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasSpecies()) {
      failWithMessage("\nExpecting that actual GAIndividual.Builder has species but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder does not have species.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder has species.
   */
  public GAIndividualBuilderAssert doesNotHaveSpecies() {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasSpecies()) {
      failWithMessage("\nExpecting that actual GAIndividual.Builder does not have species but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder has staging system.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder does not have staging system.
   */
  public GAIndividualBuilderAssert hasStagingSystem() {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasStagingSystem()) {
      failWithMessage("\nExpecting that actual GAIndividual.Builder has staging system but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder does not have staging system.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder has staging system.
   */
  public GAIndividualBuilderAssert doesNotHaveStagingSystem() {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasStagingSystem()) {
      failWithMessage("\nExpecting that actual GAIndividual.Builder does not have staging system but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder has strain.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder does not have strain.
   */
  public GAIndividualBuilderAssert hasStrain() {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasStrain()) {
      failWithMessage("\nExpecting that actual GAIndividual.Builder has strain but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder does not have strain.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder has strain.
   */
  public GAIndividualBuilderAssert doesNotHaveStrain() {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasStrain()) {
      failWithMessage("\nExpecting that actual GAIndividual.Builder does not have strain but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder has updated.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder does not have updated.
   */
  public GAIndividualBuilderAssert hasUpdated() {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasUpdated()) {
      failWithMessage("\nExpecting that actual GAIndividual.Builder has updated but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAIndividual.Builder does not have updated.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAIndividual.Builder has updated.
   */
  public GAIndividualBuilderAssert doesNotHaveUpdated() {
    // check that actual GAIndividual.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasUpdated()) {
      failWithMessage("\nExpecting that actual GAIndividual.Builder does not have updated but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
