package org.ga4gh;

/**
 * {@link GASearchIndividualGroupsRequest.Builder} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GASearchIndividualGroupsRequestBuilderAssert extends AbstractAssert<GASearchIndividualGroupsRequestBuilderAssert, GASearchIndividualGroupsRequest.Builder> {

  /**
   * Creates a new <code>{@link GASearchIndividualGroupsRequestBuilderAssert}</code> to make assertions on actual GASearchIndividualGroupsRequest.Builder.
   * @param actual the GASearchIndividualGroupsRequest.Builder we want to make assertions on.
   */
  public GASearchIndividualGroupsRequestBuilderAssert(GASearchIndividualGroupsRequest.Builder actual) {
    super(actual, GASearchIndividualGroupsRequestBuilderAssert.class);
  }

  /**
   * An entry point for GASearchIndividualGroupsRequestBuilderAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGASearchIndividualGroupsRequest.Builder)</code> and get specific assertion with code completion.
   * @param actual the GASearchIndividualGroupsRequest.Builder we want to make assertions on.
   * @return a new <code>{@link GASearchIndividualGroupsRequestBuilderAssert}</code>
   */
  public static GASearchIndividualGroupsRequestBuilderAssert assertThat(GASearchIndividualGroupsRequest.Builder actual) {
    return new GASearchIndividualGroupsRequestBuilderAssert(actual);
  }

  /**
   * Verifies that the actual GASearchIndividualGroupsRequest.Builder's name is equal to the given one.
   * @param name the given name to compare the actual GASearchIndividualGroupsRequest.Builder's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchIndividualGroupsRequest.Builder's name is not equal to the given one.
   */
  public GASearchIndividualGroupsRequestBuilderAssert hasName(String name) {
    // check that actual GASearchIndividualGroupsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchIndividualGroupsRequest.Builder's pageSize is equal to the given one.
   * @param pageSize the given pageSize to compare the actual GASearchIndividualGroupsRequest.Builder's pageSize to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchIndividualGroupsRequest.Builder's pageSize is not equal to the given one.
   */
  public GASearchIndividualGroupsRequestBuilderAssert hasPageSize(Integer pageSize) {
    // check that actual GASearchIndividualGroupsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting pageSize of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualPageSize = actual.getPageSize();
    if (!Objects.areEqual(actualPageSize, pageSize)) {
      failWithMessage(assertjErrorMessage, actual, pageSize, actualPageSize);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchIndividualGroupsRequest.Builder's pageToken is equal to the given one.
   * @param pageToken the given pageToken to compare the actual GASearchIndividualGroupsRequest.Builder's pageToken to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchIndividualGroupsRequest.Builder's pageToken is not equal to the given one.
   */
  public GASearchIndividualGroupsRequestBuilderAssert hasPageToken(String pageToken) {
    // check that actual GASearchIndividualGroupsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting pageToken of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualPageToken = actual.getPageToken();
    if (!Objects.areEqual(actualPageToken, pageToken)) {
      failWithMessage(assertjErrorMessage, actual, pageToken, actualPageToken);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchIndividualGroupsRequest.Builder has name.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchIndividualGroupsRequest.Builder does not have name.
   */
  public GASearchIndividualGroupsRequestBuilderAssert hasName() {
    // check that actual GASearchIndividualGroupsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasName()) {
      failWithMessage("\nExpecting that actual GASearchIndividualGroupsRequest.Builder has name but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchIndividualGroupsRequest.Builder does not have name.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchIndividualGroupsRequest.Builder has name.
   */
  public GASearchIndividualGroupsRequestBuilderAssert doesNotHaveName() {
    // check that actual GASearchIndividualGroupsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasName()) {
      failWithMessage("\nExpecting that actual GASearchIndividualGroupsRequest.Builder does not have name but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchIndividualGroupsRequest.Builder has page size.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchIndividualGroupsRequest.Builder does not have page size.
   */
  public GASearchIndividualGroupsRequestBuilderAssert hasPageSize() {
    // check that actual GASearchIndividualGroupsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasPageSize()) {
      failWithMessage("\nExpecting that actual GASearchIndividualGroupsRequest.Builder has page size but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchIndividualGroupsRequest.Builder does not have page size.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchIndividualGroupsRequest.Builder has page size.
   */
  public GASearchIndividualGroupsRequestBuilderAssert doesNotHavePageSize() {
    // check that actual GASearchIndividualGroupsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasPageSize()) {
      failWithMessage("\nExpecting that actual GASearchIndividualGroupsRequest.Builder does not have page size but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchIndividualGroupsRequest.Builder has page token.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchIndividualGroupsRequest.Builder does not have page token.
   */
  public GASearchIndividualGroupsRequestBuilderAssert hasPageToken() {
    // check that actual GASearchIndividualGroupsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasPageToken()) {
      failWithMessage("\nExpecting that actual GASearchIndividualGroupsRequest.Builder has page token but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchIndividualGroupsRequest.Builder does not have page token.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchIndividualGroupsRequest.Builder has page token.
   */
  public GASearchIndividualGroupsRequestBuilderAssert doesNotHavePageToken() {
    // check that actual GASearchIndividualGroupsRequest.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasPageToken()) {
      failWithMessage("\nExpecting that actual GASearchIndividualGroupsRequest.Builder does not have page token but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
