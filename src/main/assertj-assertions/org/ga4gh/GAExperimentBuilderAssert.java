package org.ga4gh;

/**
 * {@link GAExperiment.Builder} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GAExperimentBuilderAssert extends AbstractAssert<GAExperimentBuilderAssert, GAExperiment.Builder> {

  /**
   * Creates a new <code>{@link GAExperimentBuilderAssert}</code> to make assertions on actual GAExperiment.Builder.
   * @param actual the GAExperiment.Builder we want to make assertions on.
   */
  public GAExperimentBuilderAssert(GAExperiment.Builder actual) {
    super(actual, GAExperimentBuilderAssert.class);
  }

  /**
   * An entry point for GAExperimentBuilderAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGAExperiment.Builder)</code> and get specific assertion with code completion.
   * @param actual the GAExperiment.Builder we want to make assertions on.
   * @return a new <code>{@link GAExperimentBuilderAssert}</code>
   */
  public static GAExperimentBuilderAssert assertThat(GAExperiment.Builder actual) {
    return new GAExperimentBuilderAssert(actual);
  }

  /**
   * Verifies that the actual GAExperiment.Builder's created is equal to the given one.
   * @param created the given created to compare the actual GAExperiment.Builder's created to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder's created is not equal to the given one.
   */
  public GAExperimentBuilderAssert hasCreated(Long created) {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting created of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualCreated = actual.getCreated();
    if (!Objects.areEqual(actualCreated, created)) {
      failWithMessage(assertjErrorMessage, actual, created, actualCreated);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder's description is equal to the given one.
   * @param description the given description to compare the actual GAExperiment.Builder's description to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder's description is not equal to the given one.
   */
  public GAExperimentBuilderAssert hasDescription(String description) {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualDescription = actual.getDescription();
    if (!Objects.areEqual(actualDescription, description)) {
      failWithMessage(assertjErrorMessage, actual, description, actualDescription);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder's id is equal to the given one.
   * @param id the given id to compare the actual GAExperiment.Builder's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder's id is not equal to the given one.
   */
  public GAExperimentBuilderAssert hasId(String id) {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder's info is equal to the given one.
   * @param info the given info to compare the actual GAExperiment.Builder's info to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder's info is not equal to the given one.
   */
  public GAExperimentBuilderAssert hasInfo(java.util.Map info) {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting info of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.util.Map actualInfo = actual.getInfo();
    if (!Objects.areEqual(actualInfo, info)) {
      failWithMessage(assertjErrorMessage, actual, info, actualInfo);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder's instrumentDataFile is equal to the given one.
   * @param instrumentDataFile the given instrumentDataFile to compare the actual GAExperiment.Builder's instrumentDataFile to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder's instrumentDataFile is not equal to the given one.
   */
  public GAExperimentBuilderAssert hasInstrumentDataFile(String instrumentDataFile) {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting instrumentDataFile of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualInstrumentDataFile = actual.getInstrumentDataFile();
    if (!Objects.areEqual(actualInstrumentDataFile, instrumentDataFile)) {
      failWithMessage(assertjErrorMessage, actual, instrumentDataFile, actualInstrumentDataFile);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder's instrumentModel is equal to the given one.
   * @param instrumentModel the given instrumentModel to compare the actual GAExperiment.Builder's instrumentModel to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder's instrumentModel is not equal to the given one.
   */
  public GAExperimentBuilderAssert hasInstrumentModel(String instrumentModel) {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting instrumentModel of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualInstrumentModel = actual.getInstrumentModel();
    if (!Objects.areEqual(actualInstrumentModel, instrumentModel)) {
      failWithMessage(assertjErrorMessage, actual, instrumentModel, actualInstrumentModel);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder's library is equal to the given one.
   * @param library the given library to compare the actual GAExperiment.Builder's library to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder's library is not equal to the given one.
   */
  public GAExperimentBuilderAssert hasLibrary(String library) {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting library of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualLibrary = actual.getLibrary();
    if (!Objects.areEqual(actualLibrary, library)) {
      failWithMessage(assertjErrorMessage, actual, library, actualLibrary);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder's libraryLayout is equal to the given one.
   * @param libraryLayout the given libraryLayout to compare the actual GAExperiment.Builder's libraryLayout to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder's libraryLayout is not equal to the given one.
   */
  public GAExperimentBuilderAssert hasLibraryLayout(String libraryLayout) {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting libraryLayout of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualLibraryLayout = actual.getLibraryLayout();
    if (!Objects.areEqual(actualLibraryLayout, libraryLayout)) {
      failWithMessage(assertjErrorMessage, actual, libraryLayout, actualLibraryLayout);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder's molecule is equal to the given one.
   * @param molecule the given molecule to compare the actual GAExperiment.Builder's molecule to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder's molecule is not equal to the given one.
   */
  public GAExperimentBuilderAssert hasMolecule(String molecule) {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting molecule of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualMolecule = actual.getMolecule();
    if (!Objects.areEqual(actualMolecule, molecule)) {
      failWithMessage(assertjErrorMessage, actual, molecule, actualMolecule);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder's name is equal to the given one.
   * @param name the given name to compare the actual GAExperiment.Builder's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder's name is not equal to the given one.
   */
  public GAExperimentBuilderAssert hasName(String name) {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder's platformUnit is equal to the given one.
   * @param platformUnit the given platformUnit to compare the actual GAExperiment.Builder's platformUnit to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder's platformUnit is not equal to the given one.
   */
  public GAExperimentBuilderAssert hasPlatformUnit(String platformUnit) {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting platformUnit of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualPlatformUnit = actual.getPlatformUnit();
    if (!Objects.areEqual(actualPlatformUnit, platformUnit)) {
      failWithMessage(assertjErrorMessage, actual, platformUnit, actualPlatformUnit);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder's runDate is equal to the given one.
   * @param runDate the given runDate to compare the actual GAExperiment.Builder's runDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder's runDate is not equal to the given one.
   */
  public GAExperimentBuilderAssert hasRunDate(Long runDate) {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting runDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualRunDate = actual.getRunDate();
    if (!Objects.areEqual(actualRunDate, runDate)) {
      failWithMessage(assertjErrorMessage, actual, runDate, actualRunDate);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder's selection is equal to the given one.
   * @param selection the given selection to compare the actual GAExperiment.Builder's selection to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder's selection is not equal to the given one.
   */
  public GAExperimentBuilderAssert hasSelection(String selection) {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting selection of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualSelection = actual.getSelection();
    if (!Objects.areEqual(actualSelection, selection)) {
      failWithMessage(assertjErrorMessage, actual, selection, actualSelection);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder's sequencingCenter is equal to the given one.
   * @param sequencingCenter the given sequencingCenter to compare the actual GAExperiment.Builder's sequencingCenter to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder's sequencingCenter is not equal to the given one.
   */
  public GAExperimentBuilderAssert hasSequencingCenter(String sequencingCenter) {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting sequencingCenter of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualSequencingCenter = actual.getSequencingCenter();
    if (!Objects.areEqual(actualSequencingCenter, sequencingCenter)) {
      failWithMessage(assertjErrorMessage, actual, sequencingCenter, actualSequencingCenter);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder's strategy is equal to the given one.
   * @param strategy the given strategy to compare the actual GAExperiment.Builder's strategy to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder's strategy is not equal to the given one.
   */
  public GAExperimentBuilderAssert hasStrategy(String strategy) {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting strategy of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualStrategy = actual.getStrategy();
    if (!Objects.areEqual(actualStrategy, strategy)) {
      failWithMessage(assertjErrorMessage, actual, strategy, actualStrategy);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder's updated is equal to the given one.
   * @param updated the given updated to compare the actual GAExperiment.Builder's updated to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder's updated is not equal to the given one.
   */
  public GAExperimentBuilderAssert hasUpdated(Long updated) {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting updated of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualUpdated = actual.getUpdated();
    if (!Objects.areEqual(actualUpdated, updated)) {
      failWithMessage(assertjErrorMessage, actual, updated, actualUpdated);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder has created.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder does not have created.
   */
  public GAExperimentBuilderAssert hasCreated() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasCreated()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder has created but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder does not have created.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder has created.
   */
  public GAExperimentBuilderAssert doesNotHaveCreated() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasCreated()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder does not have created but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder has description.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder does not have description.
   */
  public GAExperimentBuilderAssert hasDescription() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasDescription()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder has description but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder does not have description.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder has description.
   */
  public GAExperimentBuilderAssert doesNotHaveDescription() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasDescription()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder does not have description but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder has id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder does not have id.
   */
  public GAExperimentBuilderAssert hasId() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasId()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder has id but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder does not have id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder has id.
   */
  public GAExperimentBuilderAssert doesNotHaveId() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasId()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder does not have id but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder has info.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder does not have info.
   */
  public GAExperimentBuilderAssert hasInfo() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasInfo()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder has info but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder does not have info.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder has info.
   */
  public GAExperimentBuilderAssert doesNotHaveInfo() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasInfo()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder does not have info but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder has instrument data file.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder does not have instrument data file.
   */
  public GAExperimentBuilderAssert hasInstrumentDataFile() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasInstrumentDataFile()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder has instrument data file but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder does not have instrument data file.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder has instrument data file.
   */
  public GAExperimentBuilderAssert doesNotHaveInstrumentDataFile() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasInstrumentDataFile()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder does not have instrument data file but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder has instrument model.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder does not have instrument model.
   */
  public GAExperimentBuilderAssert hasInstrumentModel() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasInstrumentModel()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder has instrument model but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder does not have instrument model.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder has instrument model.
   */
  public GAExperimentBuilderAssert doesNotHaveInstrumentModel() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasInstrumentModel()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder does not have instrument model but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder has library.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder does not have library.
   */
  public GAExperimentBuilderAssert hasLibrary() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasLibrary()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder has library but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder does not have library.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder has library.
   */
  public GAExperimentBuilderAssert doesNotHaveLibrary() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasLibrary()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder does not have library but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder has library layout.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder does not have library layout.
   */
  public GAExperimentBuilderAssert hasLibraryLayout() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasLibraryLayout()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder has library layout but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder does not have library layout.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder has library layout.
   */
  public GAExperimentBuilderAssert doesNotHaveLibraryLayout() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasLibraryLayout()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder does not have library layout but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder has molecule.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder does not have molecule.
   */
  public GAExperimentBuilderAssert hasMolecule() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasMolecule()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder has molecule but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder does not have molecule.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder has molecule.
   */
  public GAExperimentBuilderAssert doesNotHaveMolecule() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasMolecule()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder does not have molecule but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder has name.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder does not have name.
   */
  public GAExperimentBuilderAssert hasName() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasName()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder has name but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder does not have name.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder has name.
   */
  public GAExperimentBuilderAssert doesNotHaveName() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasName()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder does not have name but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder has platform unit.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder does not have platform unit.
   */
  public GAExperimentBuilderAssert hasPlatformUnit() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasPlatformUnit()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder has platform unit but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder does not have platform unit.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder has platform unit.
   */
  public GAExperimentBuilderAssert doesNotHavePlatformUnit() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasPlatformUnit()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder does not have platform unit but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder has run date.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder does not have run date.
   */
  public GAExperimentBuilderAssert hasRunDate() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasRunDate()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder has run date but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder does not have run date.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder has run date.
   */
  public GAExperimentBuilderAssert doesNotHaveRunDate() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasRunDate()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder does not have run date but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder has selection.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder does not have selection.
   */
  public GAExperimentBuilderAssert hasSelection() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasSelection()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder has selection but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder does not have selection.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder has selection.
   */
  public GAExperimentBuilderAssert doesNotHaveSelection() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasSelection()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder does not have selection but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder has sequencing center.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder does not have sequencing center.
   */
  public GAExperimentBuilderAssert hasSequencingCenter() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasSequencingCenter()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder has sequencing center but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder does not have sequencing center.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder has sequencing center.
   */
  public GAExperimentBuilderAssert doesNotHaveSequencingCenter() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasSequencingCenter()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder does not have sequencing center but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder has strategy.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder does not have strategy.
   */
  public GAExperimentBuilderAssert hasStrategy() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasStrategy()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder has strategy but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder does not have strategy.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder has strategy.
   */
  public GAExperimentBuilderAssert doesNotHaveStrategy() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasStrategy()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder does not have strategy but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder has updated.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder does not have updated.
   */
  public GAExperimentBuilderAssert hasUpdated() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasUpdated()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder has updated but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment.Builder does not have updated.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment.Builder has updated.
   */
  public GAExperimentBuilderAssert doesNotHaveUpdated() {
    // check that actual GAExperiment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasUpdated()) {
      failWithMessage("\nExpecting that actual GAExperiment.Builder does not have updated but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
