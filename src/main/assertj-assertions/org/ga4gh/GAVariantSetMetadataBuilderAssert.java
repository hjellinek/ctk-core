package org.ga4gh;

/**
 * {@link GAVariantSetMetadata.Builder} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GAVariantSetMetadataBuilderAssert extends AbstractAssert<GAVariantSetMetadataBuilderAssert, GAVariantSetMetadata.Builder> {

  /**
   * Creates a new <code>{@link GAVariantSetMetadataBuilderAssert}</code> to make assertions on actual GAVariantSetMetadata.Builder.
   * @param actual the GAVariantSetMetadata.Builder we want to make assertions on.
   */
  public GAVariantSetMetadataBuilderAssert(GAVariantSetMetadata.Builder actual) {
    super(actual, GAVariantSetMetadataBuilderAssert.class);
  }

  /**
   * An entry point for GAVariantSetMetadataBuilderAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGAVariantSetMetadata.Builder)</code> and get specific assertion with code completion.
   * @param actual the GAVariantSetMetadata.Builder we want to make assertions on.
   * @return a new <code>{@link GAVariantSetMetadataBuilderAssert}</code>
   */
  public static GAVariantSetMetadataBuilderAssert assertThat(GAVariantSetMetadata.Builder actual) {
    return new GAVariantSetMetadataBuilderAssert(actual);
  }

  /**
   * Verifies that the actual GAVariantSetMetadata.Builder's description is equal to the given one.
   * @param description the given description to compare the actual GAVariantSetMetadata.Builder's description to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAVariantSetMetadata.Builder's description is not equal to the given one.
   */
  public GAVariantSetMetadataBuilderAssert hasDescription(String description) {
    // check that actual GAVariantSetMetadata.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualDescription = actual.getDescription();
    if (!Objects.areEqual(actualDescription, description)) {
      failWithMessage(assertjErrorMessage, actual, description, actualDescription);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAVariantSetMetadata.Builder's id is equal to the given one.
   * @param id the given id to compare the actual GAVariantSetMetadata.Builder's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAVariantSetMetadata.Builder's id is not equal to the given one.
   */
  public GAVariantSetMetadataBuilderAssert hasId(String id) {
    // check that actual GAVariantSetMetadata.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAVariantSetMetadata.Builder's info is equal to the given one.
   * @param info the given info to compare the actual GAVariantSetMetadata.Builder's info to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAVariantSetMetadata.Builder's info is not equal to the given one.
   */
  public GAVariantSetMetadataBuilderAssert hasInfo(java.util.Map info) {
    // check that actual GAVariantSetMetadata.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting info of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.util.Map actualInfo = actual.getInfo();
    if (!Objects.areEqual(actualInfo, info)) {
      failWithMessage(assertjErrorMessage, actual, info, actualInfo);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAVariantSetMetadata.Builder's key is equal to the given one.
   * @param key the given key to compare the actual GAVariantSetMetadata.Builder's key to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAVariantSetMetadata.Builder's key is not equal to the given one.
   */
  public GAVariantSetMetadataBuilderAssert hasKey(String key) {
    // check that actual GAVariantSetMetadata.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting key of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualKey = actual.getKey();
    if (!Objects.areEqual(actualKey, key)) {
      failWithMessage(assertjErrorMessage, actual, key, actualKey);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAVariantSetMetadata.Builder's number is equal to the given one.
   * @param number the given number to compare the actual GAVariantSetMetadata.Builder's number to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAVariantSetMetadata.Builder's number is not equal to the given one.
   */
  public GAVariantSetMetadataBuilderAssert hasNumber(String number) {
    // check that actual GAVariantSetMetadata.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting number of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualNumber = actual.getNumber();
    if (!Objects.areEqual(actualNumber, number)) {
      failWithMessage(assertjErrorMessage, actual, number, actualNumber);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAVariantSetMetadata.Builder's type is equal to the given one.
   * @param type the given type to compare the actual GAVariantSetMetadata.Builder's type to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAVariantSetMetadata.Builder's type is not equal to the given one.
   */
  public GAVariantSetMetadataBuilderAssert hasType(String type) {
    // check that actual GAVariantSetMetadata.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting type of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualType = actual.getType();
    if (!Objects.areEqual(actualType, type)) {
      failWithMessage(assertjErrorMessage, actual, type, actualType);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAVariantSetMetadata.Builder's value is equal to the given one.
   * @param value the given value to compare the actual GAVariantSetMetadata.Builder's value to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAVariantSetMetadata.Builder's value is not equal to the given one.
   */
  public GAVariantSetMetadataBuilderAssert hasValue(String value) {
    // check that actual GAVariantSetMetadata.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting value of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualValue = actual.getValue();
    if (!Objects.areEqual(actualValue, value)) {
      failWithMessage(assertjErrorMessage, actual, value, actualValue);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAVariantSetMetadata.Builder has description.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAVariantSetMetadata.Builder does not have description.
   */
  public GAVariantSetMetadataBuilderAssert hasDescription() {
    // check that actual GAVariantSetMetadata.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasDescription()) {
      failWithMessage("\nExpecting that actual GAVariantSetMetadata.Builder has description but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAVariantSetMetadata.Builder does not have description.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAVariantSetMetadata.Builder has description.
   */
  public GAVariantSetMetadataBuilderAssert doesNotHaveDescription() {
    // check that actual GAVariantSetMetadata.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasDescription()) {
      failWithMessage("\nExpecting that actual GAVariantSetMetadata.Builder does not have description but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAVariantSetMetadata.Builder has id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAVariantSetMetadata.Builder does not have id.
   */
  public GAVariantSetMetadataBuilderAssert hasId() {
    // check that actual GAVariantSetMetadata.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasId()) {
      failWithMessage("\nExpecting that actual GAVariantSetMetadata.Builder has id but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAVariantSetMetadata.Builder does not have id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAVariantSetMetadata.Builder has id.
   */
  public GAVariantSetMetadataBuilderAssert doesNotHaveId() {
    // check that actual GAVariantSetMetadata.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasId()) {
      failWithMessage("\nExpecting that actual GAVariantSetMetadata.Builder does not have id but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAVariantSetMetadata.Builder has info.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAVariantSetMetadata.Builder does not have info.
   */
  public GAVariantSetMetadataBuilderAssert hasInfo() {
    // check that actual GAVariantSetMetadata.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasInfo()) {
      failWithMessage("\nExpecting that actual GAVariantSetMetadata.Builder has info but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAVariantSetMetadata.Builder does not have info.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAVariantSetMetadata.Builder has info.
   */
  public GAVariantSetMetadataBuilderAssert doesNotHaveInfo() {
    // check that actual GAVariantSetMetadata.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasInfo()) {
      failWithMessage("\nExpecting that actual GAVariantSetMetadata.Builder does not have info but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAVariantSetMetadata.Builder has key.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAVariantSetMetadata.Builder does not have key.
   */
  public GAVariantSetMetadataBuilderAssert hasKey() {
    // check that actual GAVariantSetMetadata.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasKey()) {
      failWithMessage("\nExpecting that actual GAVariantSetMetadata.Builder has key but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAVariantSetMetadata.Builder does not have key.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAVariantSetMetadata.Builder has key.
   */
  public GAVariantSetMetadataBuilderAssert doesNotHaveKey() {
    // check that actual GAVariantSetMetadata.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasKey()) {
      failWithMessage("\nExpecting that actual GAVariantSetMetadata.Builder does not have key but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAVariantSetMetadata.Builder has number.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAVariantSetMetadata.Builder does not have number.
   */
  public GAVariantSetMetadataBuilderAssert hasNumber() {
    // check that actual GAVariantSetMetadata.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasNumber()) {
      failWithMessage("\nExpecting that actual GAVariantSetMetadata.Builder has number but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAVariantSetMetadata.Builder does not have number.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAVariantSetMetadata.Builder has number.
   */
  public GAVariantSetMetadataBuilderAssert doesNotHaveNumber() {
    // check that actual GAVariantSetMetadata.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasNumber()) {
      failWithMessage("\nExpecting that actual GAVariantSetMetadata.Builder does not have number but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAVariantSetMetadata.Builder has type.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAVariantSetMetadata.Builder does not have type.
   */
  public GAVariantSetMetadataBuilderAssert hasType() {
    // check that actual GAVariantSetMetadata.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasType()) {
      failWithMessage("\nExpecting that actual GAVariantSetMetadata.Builder has type but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAVariantSetMetadata.Builder does not have type.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAVariantSetMetadata.Builder has type.
   */
  public GAVariantSetMetadataBuilderAssert doesNotHaveType() {
    // check that actual GAVariantSetMetadata.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasType()) {
      failWithMessage("\nExpecting that actual GAVariantSetMetadata.Builder does not have type but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAVariantSetMetadata.Builder has value.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAVariantSetMetadata.Builder does not have value.
   */
  public GAVariantSetMetadataBuilderAssert hasValue() {
    // check that actual GAVariantSetMetadata.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasValue()) {
      failWithMessage("\nExpecting that actual GAVariantSetMetadata.Builder has value but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAVariantSetMetadata.Builder does not have value.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAVariantSetMetadata.Builder has value.
   */
  public GAVariantSetMetadataBuilderAssert doesNotHaveValue() {
    // check that actual GAVariantSetMetadata.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasValue()) {
      failWithMessage("\nExpecting that actual GAVariantSetMetadata.Builder does not have value but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
