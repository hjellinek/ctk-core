package org.ga4gh;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link GASearchVariantsResponse} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GASearchVariantsResponseAssert extends AbstractAssert<GASearchVariantsResponseAssert, GASearchVariantsResponse> {

  /**
   * Creates a new <code>{@link GASearchVariantsResponseAssert}</code> to make assertions on actual GASearchVariantsResponse.
   * @param actual the GASearchVariantsResponse we want to make assertions on.
   */
  public GASearchVariantsResponseAssert(GASearchVariantsResponse actual) {
    super(actual, GASearchVariantsResponseAssert.class);
  }

  /**
   * An entry point for GASearchVariantsResponseAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGASearchVariantsResponse)</code> and get specific assertion with code completion.
   * @param actual the GASearchVariantsResponse we want to make assertions on.
   * @return a new <code>{@link GASearchVariantsResponseAssert}</code>
   */
  public static GASearchVariantsResponseAssert assertThat(GASearchVariantsResponse actual) {
    return new GASearchVariantsResponseAssert(actual);
  }

  /**
   * Verifies that the actual GASearchVariantsResponse's classSchema is equal to the given one.
   * @param classSchema the given classSchema to compare the actual GASearchVariantsResponse's classSchema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchVariantsResponse's classSchema is not equal to the given one.
   */
  public GASearchVariantsResponseAssert hasClassSchema(org.apache.avro.Schema classSchema) {
    // check that actual GASearchVariantsResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classSchema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualClassSchema = actual.getClassSchema();
    if (!Objects.areEqual(actualClassSchema, classSchema)) {
      failWithMessage(assertjErrorMessage, actual, classSchema, actualClassSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchVariantsResponse's nextPageToken is equal to the given one.
   * @param nextPageToken the given nextPageToken to compare the actual GASearchVariantsResponse's nextPageToken to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchVariantsResponse's nextPageToken is not equal to the given one.
   */
  public GASearchVariantsResponseAssert hasNextPageToken(String nextPageToken) {
    // check that actual GASearchVariantsResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting nextPageToken of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualNextPageToken = actual.getNextPageToken();
    if (!Objects.areEqual(actualNextPageToken, nextPageToken)) {
      failWithMessage(assertjErrorMessage, actual, nextPageToken, actualNextPageToken);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchVariantsResponse's schema is equal to the given one.
   * @param schema the given schema to compare the actual GASearchVariantsResponse's schema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchVariantsResponse's schema is not equal to the given one.
   */
  public GASearchVariantsResponseAssert hasSchema(org.apache.avro.Schema schema) {
    // check that actual GASearchVariantsResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting schema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualSchema = actual.getSchema();
    if (!Objects.areEqual(actualSchema, schema)) {
      failWithMessage(assertjErrorMessage, actual, schema, actualSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchVariantsResponse's variants contains the given GAVariant elements.
   * @param variants the given elements that should be contained in actual GASearchVariantsResponse's variants.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchVariantsResponse's variants does not contain all given GAVariant elements.
   */
  public GASearchVariantsResponseAssert hasVariants(GAVariant... variants) {
    // check that actual GASearchVariantsResponse we want to make assertions on is not null.
    isNotNull();

    // check that given GAVariant varargs is not null.
    if (variants == null) failWithMessage("Expecting variants parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getVariants(), variants);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchVariantsResponse's variants contains <b>only<b> the given GAVariant elements and nothing else in whatever order.
   * @param variants the given elements that should be contained in actual GASearchVariantsResponse's variants.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchVariantsResponse's variants does not contain all given GAVariant elements.
   */
  public GASearchVariantsResponseAssert hasOnlyVariants(GAVariant... variants) {
    // check that actual GASearchVariantsResponse we want to make assertions on is not null.
    isNotNull();

    // check that given GAVariant varargs is not null.
    if (variants == null) failWithMessage("Expecting variants parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getVariants(), variants);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchVariantsResponse's variants does not contain the given GAVariant elements.
   *
   * @param variants the given elements that should not be in actual GASearchVariantsResponse's variants.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchVariantsResponse's variants contains any given GAVariant elements.
   */
  public GASearchVariantsResponseAssert doesNotHaveVariants(GAVariant... variants) {
    // check that actual GASearchVariantsResponse we want to make assertions on is not null.
    isNotNull();

    // check that given GAVariant varargs is not null.
    if (variants == null) failWithMessage("Expecting variants parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getVariants(), variants);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchVariantsResponse has no variants.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchVariantsResponse's variants is not empty.
   */
  public GASearchVariantsResponseAssert hasNoVariants() {
    // check that actual GASearchVariantsResponse we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have variants but had :\n  <%s>";
    
    // check
    if (actual.getVariants().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getVariants());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  



}
