### Target server configuration setup

# set tap.junit.results for TAP results dir, defaults to "target/"
### CTK control of what tests get executed
# name of java package to scan for classes matching the patterns
ctk.testpackage=org.ga4gh.cts

# pattern matching on test (or testsuite) names
ctk.pattern.testclass=.*IT.*
ctk.pattern.testsuite=.*TestSuite.*

#comma-seperated list of patterns
#ctk.matchstr=${ctk.pattern.testclass},${ctk.pattern.testsuite}
# TODO running Suites leads to "URI not hierarchical" error
ctk.matchstr=${ctk.pattern.testclass}

# the ant "build file" we use to run junit, junit reporter or whatever
# when run from command line (doesn't currently affect output when running maven)
ctk.antfile=lib/antRunTests.xml

# the testjar property is evaluated with respect to the ${basedir} see by ant,
# which is already in "./lib"
# when run from command line (doesn't currently affect output when running maven)
ctk.testjar=cts-java-0.5.1-SNAPSHOT-tests.jar

# this title (with ctk.tgt.urlRoot appended) goes on top of each HTML results page
# when run from command line (doesn't currently affect output when running maven)
ctk.reporttitle=CTK Test Results of

# scripts are a planned extension, these don't do anything yet
ctk.scripts.before=
ctk.scripts.after=

# temporarily not used
#ctk.logging.systest=SYSTEST
#ctk.logging.systest.traffic=SYSTEST.TRAFFIC

### Spring/framework control
#
# turn off the Spring cmd-line banner
spring.main.show-banner=false
# configure PropertiesLauncher to look in a 'lib' dir under the launch dir for test jars
# so if you launch using java -jar ... then the <CWD>/lib dir will be added to the classpath
loader.path=lib,tests
# configure the logging framework to load a control file from the lib dir, if present
# (else will load from the resources path in the jar package)
logging.config=lib/log4j2.xml

