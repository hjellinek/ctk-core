<?xml version="1.0" encoding="UTF-8"?>
<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <name>testpack</name>
    <description>tests to verify a GA4GH data server v0.5.1 implementation</description>

    <groupId>org.ga4gh</groupId>
    <artifactId>ctk-testpack</artifactId>
    <version>0.5.1-SNAPSHOT</version>
    <packaging>jar</packaging>

    <parent>
        <groupId>org.ga4gh</groupId>
        <artifactId>ctk-parent</artifactId>
        <version>0.5.1-SNAPSHOT</version>
        <relativePath>../parent</relativePath>
    </parent>
    <!--
    <scm>
        <connection>scm:git:https://github.com/ga4gh/...</connection>
        <developerConnection>scm:git:https://github.com/ga4gh/schemas</developerConnection>
        <url>https://github.com/ga4gh/schemas</url>
    </scm>
    -->

    <properties>
        <spring.boot.version>1.3.0.M1</spring.boot.version>
    </properties>

    <developers>
        <developer>
            <id>wstidolph</id>
            <name>Wayne Stidolph</name>
            <email>wayne@stidolph.com</email>
            <url>http://wayne.stidolph.com</url>
        </developer>
    </developers>
    <contributors>
        <contributor>
            <name>Jeltje van Baren</name>
            <email>jeltje.van.baren@gmail.com</email>
        </contributor>
    </contributors>

    <!-- TODO consider moving all the Spring stuff to its own POM -->
    <!-- (you don't need this if you are using a .RELEASE version) -->
    <repositories>
        <repository>
            <id>spring-snapshots</id>
            <url>http://repo.spring.io/snapshot</url>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>spring-milestones</id>
            <url>http://repo.spring.io/milestone</url>
        </repository>
    </repositories>
    <pluginRepositories>
        <pluginRepository>
            <id>spring-snapshots</id>
            <url>http://repo.spring.io/snapshot</url>
        </pluginRepository>
        <pluginRepository>
            <id>spring-milestones</id>
            <url>http://repo.spring.io/milestone</url>
        </pluginRepository>
    </pluginRepositories>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <!-- Import dependency management from Spring Boot -->
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring.boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <dependencies>
        <!--   if we were going to be a 'normal' spring boot app
               but I want to depend on the ctk parent to ensure same versions
               of JSON libs etc across the CTK so we comment this out and just
               use spring boot dependency management
               <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-parent</artifactId>
                    <version>${spring.boot.version}</version>
                </dependency>-->
        <dependency>
            <!-- The core Spring Boot starter, including
            auto-configuration support, logging and YAML -->
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
            <version>${spring.boot.version}</version>
            <!-- std logging for Spring Boot is logback, but I
            want to use log4j2 in the CTK so we exclude the default logging
            here and add in log4j2 later -->
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <!-- Support for common test dependencies, including JUnit, Hamcrest
            and Mockito along with the spring-test module. -->
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <version>${spring.boot.version}</version>
        </dependency>
        <!-- turn on @ConfigurationProcessor so we can have ctk.* automatic naming -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- CTK uses log4j2, some of the tooling is more common than Logback -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-log4j2</artifactId>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>org.apache.avro</groupId>
            <artifactId>avro</artifactId>
            <version>${avro.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.avro</groupId>
            <artifactId>avro-ipc</artifactId>
            <version>${avro.version}</version>
        </dependency>

        <!-- need Reflections to dynamically get the
             test classes in the attached Test jar -->
        <dependency>
            <groupId>org.reflections</groupId>
            <artifactId>reflections</artifactId>
            <version>0.9.10</version>
        </dependency>

        <!-- use tap4j to get Test Anything Protocol support -->
        <dependency>
            <groupId>org.tap4j</groupId>
            <artifactId>tap4j-ext</artifactId>
        </dependency>

        <!-- lots of utility stuff! -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>${guava.version}</version>
        </dependency>
        <dependency>
            <!-- provide the google JSON support, easier than
            Jackson for handling the 'normal' JSON to Avro class
            deserialization -->
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>${gson.version}</version>
        </dependency>

        <!-- lombok saves us some typing in the COnfig class -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.16.4</version>
        </dependency>

        <dependency>
            <!-- transitively brings in jackson-databind, so this
            triggers log4j2 support for hide_log4j2.json and log4j2.jsm config,
            as well as providing Jackson-based JSON processing if we want it -->
            <groupId>com.fasterxml.jackson.jaxrs</groupId>
            <artifactId>jackson-jaxrs-json-provider</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.dataformat</groupId>
            <artifactId>jackson-dataformat-yaml</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.dataformat</groupId>
            <artifactId>jackson-dataformat-avro</artifactId>
        </dependency>

        <!-- bring in the GA4GH schema -->
        <!--        <dependency>
                    <groupId>org.ga4gh</groupId>
                    <artifactId>ga4gh-format</artifactId>
                </dependency>-->
        <dependency> <!-- also provides ga4gh schema we run against -->
            <groupId>org.ga4gh</groupId>
            <artifactId>ctk-transport</artifactId>
            <version>0.5.1-SNAPSHOT</version>
        </dependency>
    </dependencies>

    <build>
        <defaultGoal>install</defaultGoal>
        <plugins>

            <!-- make the jar executable -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring.boot.version}</version>
                <configuration>
                    <!-- add the test classes to the config so that mavn spring-boot:run
                         finds them without having to build the jars and use that loader! -->
                    <folders>
                        <folder>${project.build.testOutputDirectory}</folder>
                    </folders>
                </configuration>

                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                        <configuration>
                            <!-- ZIP layout uses the PropertiesLauncher
                            so in addition to looking in lib/ for jars the launcher
                            also looks wherever the 'loader.path' property points to
                            (loader.path: a comma-separated list of directories to
                            append to the classpath (containing file resources
                            and/or nested archives in *.jar or *.zip) -->
                            <layout>ZIP</layout>
                            <!-- <classifier>exec</classifier> -->
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- build a jar including all test classes and resources -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.6</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>test-jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin> <!-- spring boot brings this in, too, but I need to exclude the systests -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.18.1</version>
                <configuration>
                    <useFile>false</useFile>
                    <includes>
                        <include>**/*Spec.java</include>
                        <include>**/*Test.java</include>
                    </includes>
                    <excludes>
                        <!-- surefire for unit tests, so skip the integration tests -->
                        <!-- they will be run by the 'failsafe' plugin -->
                        <exclude>%regex[.*.systests.*]</exclude>
                    </excludes>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>2.18.1</version>
                <configuration>
                    <properties>
                        <property>
                            <!-- hook in the TAP framework for future reporting integration -->
                            <name>listener</name>
                            <value>
                                org.tap4j.ext.junit.listener.TapListenerClass,org.tap4j.ext.junit.listener.TapListenerSuite
                            </value>
                        </property>
                        <systemPropertyValues>
                            <tap.junit.results>target/tap4j</tap.junit.results>
                        </systemPropertyValues>
                    </properties>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                        <configuration>
                            <encoding>UTF-8</encoding>
                            <!-- disable forking for easy debugging -->
                            <!-- TODO make a mvn profile 'devel' for this, enable parallel in prod -->
                            <forkCount>0</forkCount>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.3.2</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
        </plugins>
    </build>
    <reporting>
        <plugins>
            <plugin>

                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-report-plugin</artifactId>
                <version>2.18.1</version>
                <reportSets>
                    <reportSet>
                        <!-- report on the 'failsafe' integration tests (the SYSTESTS -->
                        <!-- assembles the reports, doesn't run the tests! -->
                        <id>integration-tests</id>
                        <reports>
                            <report>
                                failsafe-report-only
                            </report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jxr-plugin</artifactId>
                <version>2.5</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>2.10.3</version>
                <configuration>
                    <failOnError>false</failOnError>
                </configuration>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>javadoc-no-fork</report>
                            <report>test-javadoc-no-fork</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
        </plugins>
    </reporting>

</project>
