package org.ga4gh;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link GAReadAlignment.Builder} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GAReadAlignmentBuilderAssert extends AbstractAssert<GAReadAlignmentBuilderAssert, GAReadAlignment.Builder> {

  /**
   * Creates a new <code>{@link GAReadAlignmentBuilderAssert}</code> to make assertions on actual GAReadAlignment.Builder.
   * @param actual the GAReadAlignment.Builder we want to make assertions on.
   */
  public GAReadAlignmentBuilderAssert(GAReadAlignment.Builder actual) {
    super(actual, GAReadAlignmentBuilderAssert.class);
  }

  /**
   * An entry point for GAReadAlignmentBuilderAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGAReadAlignment.Builder)</code> and get specific assertion with code completion.
   * @param actual the GAReadAlignment.Builder we want to make assertions on.
   * @return a new <code>{@link GAReadAlignmentBuilderAssert}</code>
   */
  public static GAReadAlignmentBuilderAssert assertThat(GAReadAlignment.Builder actual) {
    return new GAReadAlignmentBuilderAssert(actual);
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder's alignedQuality contains the given Integer elements.
   * @param alignedQuality the given elements that should be contained in actual GAReadAlignment.Builder's alignedQuality.
   * @return this assertion object.
   * @throws AssertionError if the actual GAReadAlignment.Builder's alignedQuality does not contain all given Integer elements.
   */
  public GAReadAlignmentBuilderAssert hasAlignedQuality(Integer... alignedQuality) {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given Integer varargs is not null.
    if (alignedQuality == null) failWithMessage("Expecting alignedQuality parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getAlignedQuality(), alignedQuality);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder's alignedQuality contains <b>only<b> the given Integer elements and nothing else in whatever order.
   * @param alignedQuality the given elements that should be contained in actual GAReadAlignment.Builder's alignedQuality.
   * @return this assertion object.
   * @throws AssertionError if the actual GAReadAlignment.Builder's alignedQuality does not contain all given Integer elements.
   */
  public GAReadAlignmentBuilderAssert hasOnlyAlignedQuality(Integer... alignedQuality) {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given Integer varargs is not null.
    if (alignedQuality == null) failWithMessage("Expecting alignedQuality parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getAlignedQuality(), alignedQuality);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder's alignedQuality does not contain the given Integer elements.
   *
   * @param alignedQuality the given elements that should not be in actual GAReadAlignment.Builder's alignedQuality.
   * @return this assertion object.
   * @throws AssertionError if the actual GAReadAlignment.Builder's alignedQuality contains any given Integer elements.
   */
  public GAReadAlignmentBuilderAssert doesNotHaveAlignedQuality(Integer... alignedQuality) {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given Integer varargs is not null.
    if (alignedQuality == null) failWithMessage("Expecting alignedQuality parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getAlignedQuality(), alignedQuality);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder has no alignedQuality.
   * @return this assertion object.
   * @throws AssertionError if the actual GAReadAlignment.Builder's alignedQuality is not empty.
   */
  public GAReadAlignmentBuilderAssert hasNoAlignedQuality() {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have alignedQuality but had :\n  <%s>";
    
    // check
    if (actual.getAlignedQuality().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getAlignedQuality());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual GAReadAlignment.Builder's alignedSequence is equal to the given one.
   * @param alignedSequence the given alignedSequence to compare the actual GAReadAlignment.Builder's alignedSequence to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder's alignedSequence is not equal to the given one.
   */
  public GAReadAlignmentBuilderAssert hasAlignedSequence(String alignedSequence) {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting alignedSequence of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualAlignedSequence = actual.getAlignedSequence();
    if (!Objects.areEqual(actualAlignedSequence, alignedSequence)) {
      failWithMessage(assertjErrorMessage, actual, alignedSequence, actualAlignedSequence);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder's alignment is equal to the given one.
   * @param alignment the given alignment to compare the actual GAReadAlignment.Builder's alignment to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder's alignment is not equal to the given one.
   */
  public GAReadAlignmentBuilderAssert hasAlignment(GALinearAlignment alignment) {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting alignment of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    GALinearAlignment actualAlignment = actual.getAlignment();
    if (!Objects.areEqual(actualAlignment, alignment)) {
      failWithMessage(assertjErrorMessage, actual, alignment, actualAlignment);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder's duplicateFragment is equal to the given one.
   * @param duplicateFragment the given duplicateFragment to compare the actual GAReadAlignment.Builder's duplicateFragment to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder's duplicateFragment is not equal to the given one.
   */
  public GAReadAlignmentBuilderAssert hasDuplicateFragment(Boolean duplicateFragment) {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting duplicateFragment of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Boolean actualDuplicateFragment = actual.getDuplicateFragment();
    if (!Objects.areEqual(actualDuplicateFragment, duplicateFragment)) {
      failWithMessage(assertjErrorMessage, actual, duplicateFragment, actualDuplicateFragment);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder's failedVendorQualityChecks is equal to the given one.
   * @param failedVendorQualityChecks the given failedVendorQualityChecks to compare the actual GAReadAlignment.Builder's failedVendorQualityChecks to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder's failedVendorQualityChecks is not equal to the given one.
   */
  public GAReadAlignmentBuilderAssert hasFailedVendorQualityChecks(Boolean failedVendorQualityChecks) {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting failedVendorQualityChecks of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Boolean actualFailedVendorQualityChecks = actual.getFailedVendorQualityChecks();
    if (!Objects.areEqual(actualFailedVendorQualityChecks, failedVendorQualityChecks)) {
      failWithMessage(assertjErrorMessage, actual, failedVendorQualityChecks, actualFailedVendorQualityChecks);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder's fragmentLength is equal to the given one.
   * @param fragmentLength the given fragmentLength to compare the actual GAReadAlignment.Builder's fragmentLength to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder's fragmentLength is not equal to the given one.
   */
  public GAReadAlignmentBuilderAssert hasFragmentLength(Integer fragmentLength) {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting fragmentLength of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualFragmentLength = actual.getFragmentLength();
    if (!Objects.areEqual(actualFragmentLength, fragmentLength)) {
      failWithMessage(assertjErrorMessage, actual, fragmentLength, actualFragmentLength);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder's fragmentName is equal to the given one.
   * @param fragmentName the given fragmentName to compare the actual GAReadAlignment.Builder's fragmentName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder's fragmentName is not equal to the given one.
   */
  public GAReadAlignmentBuilderAssert hasFragmentName(String fragmentName) {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting fragmentName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualFragmentName = actual.getFragmentName();
    if (!Objects.areEqual(actualFragmentName, fragmentName)) {
      failWithMessage(assertjErrorMessage, actual, fragmentName, actualFragmentName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder's id is equal to the given one.
   * @param id the given id to compare the actual GAReadAlignment.Builder's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder's id is not equal to the given one.
   */
  public GAReadAlignmentBuilderAssert hasId(String id) {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder's info is equal to the given one.
   * @param info the given info to compare the actual GAReadAlignment.Builder's info to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder's info is not equal to the given one.
   */
  public GAReadAlignmentBuilderAssert hasInfo(java.util.Map info) {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting info of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.util.Map actualInfo = actual.getInfo();
    if (!Objects.areEqual(actualInfo, info)) {
      failWithMessage(assertjErrorMessage, actual, info, actualInfo);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder's nextMatePosition is equal to the given one.
   * @param nextMatePosition the given nextMatePosition to compare the actual GAReadAlignment.Builder's nextMatePosition to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder's nextMatePosition is not equal to the given one.
   */
  public GAReadAlignmentBuilderAssert hasNextMatePosition(GAPosition nextMatePosition) {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting nextMatePosition of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    GAPosition actualNextMatePosition = actual.getNextMatePosition();
    if (!Objects.areEqual(actualNextMatePosition, nextMatePosition)) {
      failWithMessage(assertjErrorMessage, actual, nextMatePosition, actualNextMatePosition);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder's numberReads is equal to the given one.
   * @param numberReads the given numberReads to compare the actual GAReadAlignment.Builder's numberReads to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder's numberReads is not equal to the given one.
   */
  public GAReadAlignmentBuilderAssert hasNumberReads(Integer numberReads) {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting numberReads of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualNumberReads = actual.getNumberReads();
    if (!Objects.areEqual(actualNumberReads, numberReads)) {
      failWithMessage(assertjErrorMessage, actual, numberReads, actualNumberReads);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder's properPlacement is equal to the given one.
   * @param properPlacement the given properPlacement to compare the actual GAReadAlignment.Builder's properPlacement to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder's properPlacement is not equal to the given one.
   */
  public GAReadAlignmentBuilderAssert hasProperPlacement(Boolean properPlacement) {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting properPlacement of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Boolean actualProperPlacement = actual.getProperPlacement();
    if (!Objects.areEqual(actualProperPlacement, properPlacement)) {
      failWithMessage(assertjErrorMessage, actual, properPlacement, actualProperPlacement);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder's readGroupId is equal to the given one.
   * @param readGroupId the given readGroupId to compare the actual GAReadAlignment.Builder's readGroupId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder's readGroupId is not equal to the given one.
   */
  public GAReadAlignmentBuilderAssert hasReadGroupId(String readGroupId) {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting readGroupId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualReadGroupId = actual.getReadGroupId();
    if (!Objects.areEqual(actualReadGroupId, readGroupId)) {
      failWithMessage(assertjErrorMessage, actual, readGroupId, actualReadGroupId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder's readNumber is equal to the given one.
   * @param readNumber the given readNumber to compare the actual GAReadAlignment.Builder's readNumber to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder's readNumber is not equal to the given one.
   */
  public GAReadAlignmentBuilderAssert hasReadNumber(Integer readNumber) {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting readNumber of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualReadNumber = actual.getReadNumber();
    if (!Objects.areEqual(actualReadNumber, readNumber)) {
      failWithMessage(assertjErrorMessage, actual, readNumber, actualReadNumber);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder's secondaryAlignment is equal to the given one.
   * @param secondaryAlignment the given secondaryAlignment to compare the actual GAReadAlignment.Builder's secondaryAlignment to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder's secondaryAlignment is not equal to the given one.
   */
  public GAReadAlignmentBuilderAssert hasSecondaryAlignment(Boolean secondaryAlignment) {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting secondaryAlignment of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Boolean actualSecondaryAlignment = actual.getSecondaryAlignment();
    if (!Objects.areEqual(actualSecondaryAlignment, secondaryAlignment)) {
      failWithMessage(assertjErrorMessage, actual, secondaryAlignment, actualSecondaryAlignment);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder's supplementaryAlignment is equal to the given one.
   * @param supplementaryAlignment the given supplementaryAlignment to compare the actual GAReadAlignment.Builder's supplementaryAlignment to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder's supplementaryAlignment is not equal to the given one.
   */
  public GAReadAlignmentBuilderAssert hasSupplementaryAlignment(Boolean supplementaryAlignment) {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting supplementaryAlignment of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Boolean actualSupplementaryAlignment = actual.getSupplementaryAlignment();
    if (!Objects.areEqual(actualSupplementaryAlignment, supplementaryAlignment)) {
      failWithMessage(assertjErrorMessage, actual, supplementaryAlignment, actualSupplementaryAlignment);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder has aligned quality.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder does not have aligned quality.
   */
  public GAReadAlignmentBuilderAssert hasAlignedQuality() {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasAlignedQuality()) {
      failWithMessage("\nExpecting that actual GAReadAlignment.Builder has aligned quality but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder does not have aligned quality.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder has aligned quality.
   */
  public GAReadAlignmentBuilderAssert doesNotHaveAlignedQuality() {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasAlignedQuality()) {
      failWithMessage("\nExpecting that actual GAReadAlignment.Builder does not have aligned quality but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder has aligned sequence.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder does not have aligned sequence.
   */
  public GAReadAlignmentBuilderAssert hasAlignedSequence() {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasAlignedSequence()) {
      failWithMessage("\nExpecting that actual GAReadAlignment.Builder has aligned sequence but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder does not have aligned sequence.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder has aligned sequence.
   */
  public GAReadAlignmentBuilderAssert doesNotHaveAlignedSequence() {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasAlignedSequence()) {
      failWithMessage("\nExpecting that actual GAReadAlignment.Builder does not have aligned sequence but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder has alignment.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder does not have alignment.
   */
  public GAReadAlignmentBuilderAssert hasAlignment() {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasAlignment()) {
      failWithMessage("\nExpecting that actual GAReadAlignment.Builder has alignment but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder does not have alignment.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder has alignment.
   */
  public GAReadAlignmentBuilderAssert doesNotHaveAlignment() {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasAlignment()) {
      failWithMessage("\nExpecting that actual GAReadAlignment.Builder does not have alignment but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder has duplicate fragment.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder does not have duplicate fragment.
   */
  public GAReadAlignmentBuilderAssert hasDuplicateFragment() {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasDuplicateFragment()) {
      failWithMessage("\nExpecting that actual GAReadAlignment.Builder has duplicate fragment but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder does not have duplicate fragment.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder has duplicate fragment.
   */
  public GAReadAlignmentBuilderAssert doesNotHaveDuplicateFragment() {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasDuplicateFragment()) {
      failWithMessage("\nExpecting that actual GAReadAlignment.Builder does not have duplicate fragment but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder has failed vendor quality checks.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder does not have failed vendor quality checks.
   */
  public GAReadAlignmentBuilderAssert hasFailedVendorQualityChecks() {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasFailedVendorQualityChecks()) {
      failWithMessage("\nExpecting that actual GAReadAlignment.Builder has failed vendor quality checks but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder does not have failed vendor quality checks.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder has failed vendor quality checks.
   */
  public GAReadAlignmentBuilderAssert doesNotHaveFailedVendorQualityChecks() {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasFailedVendorQualityChecks()) {
      failWithMessage("\nExpecting that actual GAReadAlignment.Builder does not have failed vendor quality checks but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder has fragment length.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder does not have fragment length.
   */
  public GAReadAlignmentBuilderAssert hasFragmentLength() {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasFragmentLength()) {
      failWithMessage("\nExpecting that actual GAReadAlignment.Builder has fragment length but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder does not have fragment length.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder has fragment length.
   */
  public GAReadAlignmentBuilderAssert doesNotHaveFragmentLength() {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasFragmentLength()) {
      failWithMessage("\nExpecting that actual GAReadAlignment.Builder does not have fragment length but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder has fragment name.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder does not have fragment name.
   */
  public GAReadAlignmentBuilderAssert hasFragmentName() {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasFragmentName()) {
      failWithMessage("\nExpecting that actual GAReadAlignment.Builder has fragment name but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder does not have fragment name.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder has fragment name.
   */
  public GAReadAlignmentBuilderAssert doesNotHaveFragmentName() {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasFragmentName()) {
      failWithMessage("\nExpecting that actual GAReadAlignment.Builder does not have fragment name but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder has id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder does not have id.
   */
  public GAReadAlignmentBuilderAssert hasId() {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasId()) {
      failWithMessage("\nExpecting that actual GAReadAlignment.Builder has id but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder does not have id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder has id.
   */
  public GAReadAlignmentBuilderAssert doesNotHaveId() {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasId()) {
      failWithMessage("\nExpecting that actual GAReadAlignment.Builder does not have id but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder has info.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder does not have info.
   */
  public GAReadAlignmentBuilderAssert hasInfo() {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasInfo()) {
      failWithMessage("\nExpecting that actual GAReadAlignment.Builder has info but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder does not have info.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder has info.
   */
  public GAReadAlignmentBuilderAssert doesNotHaveInfo() {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasInfo()) {
      failWithMessage("\nExpecting that actual GAReadAlignment.Builder does not have info but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder has next mate position.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder does not have next mate position.
   */
  public GAReadAlignmentBuilderAssert hasNextMatePosition() {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasNextMatePosition()) {
      failWithMessage("\nExpecting that actual GAReadAlignment.Builder has next mate position but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder does not have next mate position.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder has next mate position.
   */
  public GAReadAlignmentBuilderAssert doesNotHaveNextMatePosition() {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasNextMatePosition()) {
      failWithMessage("\nExpecting that actual GAReadAlignment.Builder does not have next mate position but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder has number reads.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder does not have number reads.
   */
  public GAReadAlignmentBuilderAssert hasNumberReads() {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasNumberReads()) {
      failWithMessage("\nExpecting that actual GAReadAlignment.Builder has number reads but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder does not have number reads.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder has number reads.
   */
  public GAReadAlignmentBuilderAssert doesNotHaveNumberReads() {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasNumberReads()) {
      failWithMessage("\nExpecting that actual GAReadAlignment.Builder does not have number reads but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder has proper placement.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder does not have proper placement.
   */
  public GAReadAlignmentBuilderAssert hasProperPlacement() {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasProperPlacement()) {
      failWithMessage("\nExpecting that actual GAReadAlignment.Builder has proper placement but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder does not have proper placement.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder has proper placement.
   */
  public GAReadAlignmentBuilderAssert doesNotHaveProperPlacement() {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasProperPlacement()) {
      failWithMessage("\nExpecting that actual GAReadAlignment.Builder does not have proper placement but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder has read group id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder does not have read group id.
   */
  public GAReadAlignmentBuilderAssert hasReadGroupId() {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasReadGroupId()) {
      failWithMessage("\nExpecting that actual GAReadAlignment.Builder has read group id but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder does not have read group id.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder has read group id.
   */
  public GAReadAlignmentBuilderAssert doesNotHaveReadGroupId() {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasReadGroupId()) {
      failWithMessage("\nExpecting that actual GAReadAlignment.Builder does not have read group id but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder has read number.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder does not have read number.
   */
  public GAReadAlignmentBuilderAssert hasReadNumber() {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasReadNumber()) {
      failWithMessage("\nExpecting that actual GAReadAlignment.Builder has read number but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder does not have read number.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder has read number.
   */
  public GAReadAlignmentBuilderAssert doesNotHaveReadNumber() {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasReadNumber()) {
      failWithMessage("\nExpecting that actual GAReadAlignment.Builder does not have read number but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder has secondary alignment.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder does not have secondary alignment.
   */
  public GAReadAlignmentBuilderAssert hasSecondaryAlignment() {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasSecondaryAlignment()) {
      failWithMessage("\nExpecting that actual GAReadAlignment.Builder has secondary alignment but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder does not have secondary alignment.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder has secondary alignment.
   */
  public GAReadAlignmentBuilderAssert doesNotHaveSecondaryAlignment() {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasSecondaryAlignment()) {
      failWithMessage("\nExpecting that actual GAReadAlignment.Builder does not have secondary alignment but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder has supplementary alignment.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder does not have supplementary alignment.
   */
  public GAReadAlignmentBuilderAssert hasSupplementaryAlignment() {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasSupplementaryAlignment()) {
      failWithMessage("\nExpecting that actual GAReadAlignment.Builder has supplementary alignment but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadAlignment.Builder does not have supplementary alignment.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadAlignment.Builder has supplementary alignment.
   */
  public GAReadAlignmentBuilderAssert doesNotHaveSupplementaryAlignment() {
    // check that actual GAReadAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasSupplementaryAlignment()) {
      failWithMessage("\nExpecting that actual GAReadAlignment.Builder does not have supplementary alignment but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
