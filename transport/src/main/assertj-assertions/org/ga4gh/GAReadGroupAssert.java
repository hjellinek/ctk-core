package org.ga4gh;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link GAReadGroup} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GAReadGroupAssert extends AbstractAssert<GAReadGroupAssert, GAReadGroup> {

  /**
   * Creates a new <code>{@link GAReadGroupAssert}</code> to make assertions on actual GAReadGroup.
   * @param actual the GAReadGroup we want to make assertions on.
   */
  public GAReadGroupAssert(GAReadGroup actual) {
    super(actual, GAReadGroupAssert.class);
  }

  /**
   * An entry point for GAReadGroupAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGAReadGroup)</code> and get specific assertion with code completion.
   * @param actual the GAReadGroup we want to make assertions on.
   * @return a new <code>{@link GAReadGroupAssert}</code>
   */
  public static GAReadGroupAssert assertThat(GAReadGroup actual) {
    return new GAReadGroupAssert(actual);
  }

  /**
   * Verifies that the actual GAReadGroup's classSchema is equal to the given one.
   * @param classSchema the given classSchema to compare the actual GAReadGroup's classSchema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadGroup's classSchema is not equal to the given one.
   */
  public GAReadGroupAssert hasClassSchema(org.apache.avro.Schema classSchema) {
    // check that actual GAReadGroup we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classSchema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualClassSchema = actual.getClassSchema();
    if (!Objects.areEqual(actualClassSchema, classSchema)) {
      failWithMessage(assertjErrorMessage, actual, classSchema, actualClassSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadGroup's created is equal to the given one.
   * @param created the given created to compare the actual GAReadGroup's created to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadGroup's created is not equal to the given one.
   */
  public GAReadGroupAssert hasCreated(Long created) {
    // check that actual GAReadGroup we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting created of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualCreated = actual.getCreated();
    if (!Objects.areEqual(actualCreated, created)) {
      failWithMessage(assertjErrorMessage, actual, created, actualCreated);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadGroup's datasetId is equal to the given one.
   * @param datasetId the given datasetId to compare the actual GAReadGroup's datasetId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadGroup's datasetId is not equal to the given one.
   */
  public GAReadGroupAssert hasDatasetId(String datasetId) {
    // check that actual GAReadGroup we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting datasetId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualDatasetId = actual.getDatasetId();
    if (!Objects.areEqual(actualDatasetId, datasetId)) {
      failWithMessage(assertjErrorMessage, actual, datasetId, actualDatasetId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadGroup's description is equal to the given one.
   * @param description the given description to compare the actual GAReadGroup's description to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadGroup's description is not equal to the given one.
   */
  public GAReadGroupAssert hasDescription(String description) {
    // check that actual GAReadGroup we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualDescription = actual.getDescription();
    if (!Objects.areEqual(actualDescription, description)) {
      failWithMessage(assertjErrorMessage, actual, description, actualDescription);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadGroup's experiment is equal to the given one.
   * @param experiment the given experiment to compare the actual GAReadGroup's experiment to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadGroup's experiment is not equal to the given one.
   */
  public GAReadGroupAssert hasExperiment(GAExperiment experiment) {
    // check that actual GAReadGroup we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting experiment of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    GAExperiment actualExperiment = actual.getExperiment();
    if (!Objects.areEqual(actualExperiment, experiment)) {
      failWithMessage(assertjErrorMessage, actual, experiment, actualExperiment);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadGroup's id is equal to the given one.
   * @param id the given id to compare the actual GAReadGroup's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadGroup's id is not equal to the given one.
   */
  public GAReadGroupAssert hasId(String id) {
    // check that actual GAReadGroup we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadGroup's info is equal to the given one.
   * @param info the given info to compare the actual GAReadGroup's info to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadGroup's info is not equal to the given one.
   */
  public GAReadGroupAssert hasInfo(java.util.Map info) {
    // check that actual GAReadGroup we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting info of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.util.Map actualInfo = actual.getInfo();
    if (!Objects.areEqual(actualInfo, info)) {
      failWithMessage(assertjErrorMessage, actual, info, actualInfo);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadGroup's name is equal to the given one.
   * @param name the given name to compare the actual GAReadGroup's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadGroup's name is not equal to the given one.
   */
  public GAReadGroupAssert hasName(String name) {
    // check that actual GAReadGroup we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadGroup's predictedInsertSize is equal to the given one.
   * @param predictedInsertSize the given predictedInsertSize to compare the actual GAReadGroup's predictedInsertSize to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadGroup's predictedInsertSize is not equal to the given one.
   */
  public GAReadGroupAssert hasPredictedInsertSize(Integer predictedInsertSize) {
    // check that actual GAReadGroup we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting predictedInsertSize of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualPredictedInsertSize = actual.getPredictedInsertSize();
    if (!Objects.areEqual(actualPredictedInsertSize, predictedInsertSize)) {
      failWithMessage(assertjErrorMessage, actual, predictedInsertSize, actualPredictedInsertSize);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadGroup's programs contains the given GAProgram elements.
   * @param programs the given elements that should be contained in actual GAReadGroup's programs.
   * @return this assertion object.
   * @throws AssertionError if the actual GAReadGroup's programs does not contain all given GAProgram elements.
   */
  public GAReadGroupAssert hasPrograms(GAProgram... programs) {
    // check that actual GAReadGroup we want to make assertions on is not null.
    isNotNull();

    // check that given GAProgram varargs is not null.
    if (programs == null) failWithMessage("Expecting programs parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getPrograms(), programs);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadGroup's programs contains <b>only<b> the given GAProgram elements and nothing else in whatever order.
   * @param programs the given elements that should be contained in actual GAReadGroup's programs.
   * @return this assertion object.
   * @throws AssertionError if the actual GAReadGroup's programs does not contain all given GAProgram elements.
   */
  public GAReadGroupAssert hasOnlyPrograms(GAProgram... programs) {
    // check that actual GAReadGroup we want to make assertions on is not null.
    isNotNull();

    // check that given GAProgram varargs is not null.
    if (programs == null) failWithMessage("Expecting programs parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getPrograms(), programs);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadGroup's programs does not contain the given GAProgram elements.
   *
   * @param programs the given elements that should not be in actual GAReadGroup's programs.
   * @return this assertion object.
   * @throws AssertionError if the actual GAReadGroup's programs contains any given GAProgram elements.
   */
  public GAReadGroupAssert doesNotHavePrograms(GAProgram... programs) {
    // check that actual GAReadGroup we want to make assertions on is not null.
    isNotNull();

    // check that given GAProgram varargs is not null.
    if (programs == null) failWithMessage("Expecting programs parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getPrograms(), programs);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadGroup has no programs.
   * @return this assertion object.
   * @throws AssertionError if the actual GAReadGroup's programs is not empty.
   */
  public GAReadGroupAssert hasNoPrograms() {
    // check that actual GAReadGroup we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have programs but had :\n  <%s>";
    
    // check
    if (actual.getPrograms().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getPrograms());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual GAReadGroup's referenceSetId is equal to the given one.
   * @param referenceSetId the given referenceSetId to compare the actual GAReadGroup's referenceSetId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadGroup's referenceSetId is not equal to the given one.
   */
  public GAReadGroupAssert hasReferenceSetId(String referenceSetId) {
    // check that actual GAReadGroup we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting referenceSetId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualReferenceSetId = actual.getReferenceSetId();
    if (!Objects.areEqual(actualReferenceSetId, referenceSetId)) {
      failWithMessage(assertjErrorMessage, actual, referenceSetId, actualReferenceSetId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadGroup's sampleId is equal to the given one.
   * @param sampleId the given sampleId to compare the actual GAReadGroup's sampleId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadGroup's sampleId is not equal to the given one.
   */
  public GAReadGroupAssert hasSampleId(String sampleId) {
    // check that actual GAReadGroup we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting sampleId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualSampleId = actual.getSampleId();
    if (!Objects.areEqual(actualSampleId, sampleId)) {
      failWithMessage(assertjErrorMessage, actual, sampleId, actualSampleId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadGroup's schema is equal to the given one.
   * @param schema the given schema to compare the actual GAReadGroup's schema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadGroup's schema is not equal to the given one.
   */
  public GAReadGroupAssert hasSchema(org.apache.avro.Schema schema) {
    // check that actual GAReadGroup we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting schema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualSchema = actual.getSchema();
    if (!Objects.areEqual(actualSchema, schema)) {
      failWithMessage(assertjErrorMessage, actual, schema, actualSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAReadGroup's updated is equal to the given one.
   * @param updated the given updated to compare the actual GAReadGroup's updated to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAReadGroup's updated is not equal to the given one.
   */
  public GAReadGroupAssert hasUpdated(Long updated) {
    // check that actual GAReadGroup we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting updated of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualUpdated = actual.getUpdated();
    if (!Objects.areEqual(actualUpdated, updated)) {
      failWithMessage(assertjErrorMessage, actual, updated, actualUpdated);
    }

    // return the current assertion for method chaining
    return this;
  }













}
