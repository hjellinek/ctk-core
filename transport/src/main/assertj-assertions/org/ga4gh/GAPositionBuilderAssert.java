package org.ga4gh;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link GAPosition.Builder} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GAPositionBuilderAssert extends AbstractAssert<GAPositionBuilderAssert, GAPosition.Builder> {

  /**
   * Creates a new <code>{@link GAPositionBuilderAssert}</code> to make assertions on actual GAPosition.Builder.
   * @param actual the GAPosition.Builder we want to make assertions on.
   */
  public GAPositionBuilderAssert(GAPosition.Builder actual) {
    super(actual, GAPositionBuilderAssert.class);
  }

  /**
   * An entry point for GAPositionBuilderAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGAPosition.Builder)</code> and get specific assertion with code completion.
   * @param actual the GAPosition.Builder we want to make assertions on.
   * @return a new <code>{@link GAPositionBuilderAssert}</code>
   */
  public static GAPositionBuilderAssert assertThat(GAPosition.Builder actual) {
    return new GAPositionBuilderAssert(actual);
  }

  /**
   * Verifies that the actual GAPosition.Builder's position is equal to the given one.
   * @param position the given position to compare the actual GAPosition.Builder's position to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAPosition.Builder's position is not equal to the given one.
   */
  public GAPositionBuilderAssert hasPosition(Long position) {
    // check that actual GAPosition.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting position of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualPosition = actual.getPosition();
    if (!Objects.areEqual(actualPosition, position)) {
      failWithMessage(assertjErrorMessage, actual, position, actualPosition);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAPosition.Builder's referenceName is equal to the given one.
   * @param referenceName the given referenceName to compare the actual GAPosition.Builder's referenceName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAPosition.Builder's referenceName is not equal to the given one.
   */
  public GAPositionBuilderAssert hasReferenceName(String referenceName) {
    // check that actual GAPosition.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting referenceName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualReferenceName = actual.getReferenceName();
    if (!Objects.areEqual(actualReferenceName, referenceName)) {
      failWithMessage(assertjErrorMessage, actual, referenceName, actualReferenceName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAPosition.Builder's reverseStrand is equal to the given one.
   * @param reverseStrand the given reverseStrand to compare the actual GAPosition.Builder's reverseStrand to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAPosition.Builder's reverseStrand is not equal to the given one.
   */
  public GAPositionBuilderAssert hasReverseStrand(Boolean reverseStrand) {
    // check that actual GAPosition.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting reverseStrand of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Boolean actualReverseStrand = actual.getReverseStrand();
    if (!Objects.areEqual(actualReverseStrand, reverseStrand)) {
      failWithMessage(assertjErrorMessage, actual, reverseStrand, actualReverseStrand);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAPosition.Builder has position.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAPosition.Builder does not have position.
   */
  public GAPositionBuilderAssert hasPosition() {
    // check that actual GAPosition.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasPosition()) {
      failWithMessage("\nExpecting that actual GAPosition.Builder has position but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAPosition.Builder does not have position.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAPosition.Builder has position.
   */
  public GAPositionBuilderAssert doesNotHavePosition() {
    // check that actual GAPosition.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasPosition()) {
      failWithMessage("\nExpecting that actual GAPosition.Builder does not have position but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAPosition.Builder has reference name.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAPosition.Builder does not have reference name.
   */
  public GAPositionBuilderAssert hasReferenceName() {
    // check that actual GAPosition.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasReferenceName()) {
      failWithMessage("\nExpecting that actual GAPosition.Builder has reference name but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAPosition.Builder does not have reference name.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAPosition.Builder has reference name.
   */
  public GAPositionBuilderAssert doesNotHaveReferenceName() {
    // check that actual GAPosition.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasReferenceName()) {
      failWithMessage("\nExpecting that actual GAPosition.Builder does not have reference name but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAPosition.Builder has reverse strand.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAPosition.Builder does not have reverse strand.
   */
  public GAPositionBuilderAssert hasReverseStrand() {
    // check that actual GAPosition.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasReverseStrand()) {
      failWithMessage("\nExpecting that actual GAPosition.Builder has reverse strand but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAPosition.Builder does not have reverse strand.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAPosition.Builder has reverse strand.
   */
  public GAPositionBuilderAssert doesNotHaveReverseStrand() {
    // check that actual GAPosition.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasReverseStrand()) {
      failWithMessage("\nExpecting that actual GAPosition.Builder does not have reverse strand but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
