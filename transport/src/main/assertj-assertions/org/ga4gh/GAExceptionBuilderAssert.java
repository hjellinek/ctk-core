package org.ga4gh;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link GAException.Builder} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GAExceptionBuilderAssert extends AbstractAssert<GAExceptionBuilderAssert, GAException.Builder> {

  /**
   * Creates a new <code>{@link GAExceptionBuilderAssert}</code> to make assertions on actual GAException.Builder.
   * @param actual the GAException.Builder we want to make assertions on.
   */
  public GAExceptionBuilderAssert(GAException.Builder actual) {
    super(actual, GAExceptionBuilderAssert.class);
  }

  /**
   * An entry point for GAExceptionBuilderAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGAException.Builder)</code> and get specific assertion with code completion.
   * @param actual the GAException.Builder we want to make assertions on.
   * @return a new <code>{@link GAExceptionBuilderAssert}</code>
   */
  public static GAExceptionBuilderAssert assertThat(GAException.Builder actual) {
    return new GAExceptionBuilderAssert(actual);
  }

  /**
   * Verifies that the actual GAException.Builder's cause is equal to the given one.
   * @param cause the given cause to compare the actual GAException.Builder's cause to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAException.Builder's cause is not equal to the given one.
   */
  public GAExceptionBuilderAssert hasCause(Throwable cause) {
    // check that actual GAException.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting cause of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Throwable actualCause = actual.getCause();
    if (!Objects.areEqual(actualCause, cause)) {
      failWithMessage(assertjErrorMessage, actual, cause, actualCause);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAException.Builder's errorCode is equal to the given one.
   * @param errorCode the given errorCode to compare the actual GAException.Builder's errorCode to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAException.Builder's errorCode is not equal to the given one.
   */
  public GAExceptionBuilderAssert hasErrorCode(Integer errorCode) {
    // check that actual GAException.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting errorCode of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualErrorCode = actual.getErrorCode();
    if (!Objects.areEqual(actualErrorCode, errorCode)) {
      failWithMessage(assertjErrorMessage, actual, errorCode, actualErrorCode);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAException.Builder's message$ is equal to the given one.
   * @param message$ the given message$ to compare the actual GAException.Builder's message$ to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAException.Builder's message$ is not equal to the given one.
   */
  public GAExceptionBuilderAssert hasMessage$(String message$) {
    // check that actual GAException.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting message$ of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualMessage$ = actual.getMessage$();
    if (!Objects.areEqual(actualMessage$, message$)) {
      failWithMessage(assertjErrorMessage, actual, message$, actualMessage$);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAException.Builder's value is equal to the given one.
   * @param value the given value to compare the actual GAException.Builder's value to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAException.Builder's value is not equal to the given one.
   */
  public GAExceptionBuilderAssert hasValue(Object value) {
    // check that actual GAException.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting value of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualValue = actual.getValue();
    if (!Objects.areEqual(actualValue, value)) {
      failWithMessage(assertjErrorMessage, actual, value, actualValue);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAException.Builder has cause.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAException.Builder does not have cause.
   */
  public GAExceptionBuilderAssert hasCause() {
    // check that actual GAException.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasCause()) {
      failWithMessage("\nExpecting that actual GAException.Builder has cause but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAException.Builder does not have cause.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAException.Builder has cause.
   */
  public GAExceptionBuilderAssert doesNotHaveCause() {
    // check that actual GAException.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasCause()) {
      failWithMessage("\nExpecting that actual GAException.Builder does not have cause but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAException.Builder has error code.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAException.Builder does not have error code.
   */
  public GAExceptionBuilderAssert hasErrorCode() {
    // check that actual GAException.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasErrorCode()) {
      failWithMessage("\nExpecting that actual GAException.Builder has error code but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAException.Builder does not have error code.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAException.Builder has error code.
   */
  public GAExceptionBuilderAssert doesNotHaveErrorCode() {
    // check that actual GAException.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasErrorCode()) {
      failWithMessage("\nExpecting that actual GAException.Builder does not have error code but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAException.Builder has message$.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAException.Builder does not have message$.
   */
  public GAExceptionBuilderAssert hasMessage$() {
    // check that actual GAException.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasMessage$()) {
      failWithMessage("\nExpecting that actual GAException.Builder has message$ but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAException.Builder does not have message$.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAException.Builder has message$.
   */
  public GAExceptionBuilderAssert doesNotHaveMessage$() {
    // check that actual GAException.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasMessage$()) {
      failWithMessage("\nExpecting that actual GAException.Builder does not have message$ but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAException.Builder has value.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAException.Builder does not have value.
   */
  public GAExceptionBuilderAssert hasValue() {
    // check that actual GAException.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasValue()) {
      failWithMessage("\nExpecting that actual GAException.Builder has value but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAException.Builder does not have value.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAException.Builder has value.
   */
  public GAExceptionBuilderAssert doesNotHaveValue() {
    // check that actual GAException.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasValue()) {
      failWithMessage("\nExpecting that actual GAException.Builder does not have value but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
