package org.ga4gh;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link GAExperiment} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GAExperimentAssert extends AbstractAssert<GAExperimentAssert, GAExperiment> {

  /**
   * Creates a new <code>{@link GAExperimentAssert}</code> to make assertions on actual GAExperiment.
   * @param actual the GAExperiment we want to make assertions on.
   */
  public GAExperimentAssert(GAExperiment actual) {
    super(actual, GAExperimentAssert.class);
  }

  /**
   * An entry point for GAExperimentAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGAExperiment)</code> and get specific assertion with code completion.
   * @param actual the GAExperiment we want to make assertions on.
   * @return a new <code>{@link GAExperimentAssert}</code>
   */
  public static GAExperimentAssert assertThat(GAExperiment actual) {
    return new GAExperimentAssert(actual);
  }

  /**
   * Verifies that the actual GAExperiment's classSchema is equal to the given one.
   * @param classSchema the given classSchema to compare the actual GAExperiment's classSchema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment's classSchema is not equal to the given one.
   */
  public GAExperimentAssert hasClassSchema(org.apache.avro.Schema classSchema) {
    // check that actual GAExperiment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classSchema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualClassSchema = actual.getClassSchema();
    if (!Objects.areEqual(actualClassSchema, classSchema)) {
      failWithMessage(assertjErrorMessage, actual, classSchema, actualClassSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment's instrumentModel is equal to the given one.
   * @param instrumentModel the given instrumentModel to compare the actual GAExperiment's instrumentModel to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment's instrumentModel is not equal to the given one.
   */
  public GAExperimentAssert hasInstrumentModel(String instrumentModel) {
    // check that actual GAExperiment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting instrumentModel of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualInstrumentModel = actual.getInstrumentModel();
    if (!Objects.areEqual(actualInstrumentModel, instrumentModel)) {
      failWithMessage(assertjErrorMessage, actual, instrumentModel, actualInstrumentModel);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment's libraryId is equal to the given one.
   * @param libraryId the given libraryId to compare the actual GAExperiment's libraryId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment's libraryId is not equal to the given one.
   */
  public GAExperimentAssert hasLibraryId(String libraryId) {
    // check that actual GAExperiment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting libraryId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualLibraryId = actual.getLibraryId();
    if (!Objects.areEqual(actualLibraryId, libraryId)) {
      failWithMessage(assertjErrorMessage, actual, libraryId, actualLibraryId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment's platformUnit is equal to the given one.
   * @param platformUnit the given platformUnit to compare the actual GAExperiment's platformUnit to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment's platformUnit is not equal to the given one.
   */
  public GAExperimentAssert hasPlatformUnit(String platformUnit) {
    // check that actual GAExperiment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting platformUnit of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualPlatformUnit = actual.getPlatformUnit();
    if (!Objects.areEqual(actualPlatformUnit, platformUnit)) {
      failWithMessage(assertjErrorMessage, actual, platformUnit, actualPlatformUnit);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment's schema is equal to the given one.
   * @param schema the given schema to compare the actual GAExperiment's schema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment's schema is not equal to the given one.
   */
  public GAExperimentAssert hasSchema(org.apache.avro.Schema schema) {
    // check that actual GAExperiment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting schema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualSchema = actual.getSchema();
    if (!Objects.areEqual(actualSchema, schema)) {
      failWithMessage(assertjErrorMessage, actual, schema, actualSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAExperiment's sequencingCenter is equal to the given one.
   * @param sequencingCenter the given sequencingCenter to compare the actual GAExperiment's sequencingCenter to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAExperiment's sequencingCenter is not equal to the given one.
   */
  public GAExperimentAssert hasSequencingCenter(String sequencingCenter) {
    // check that actual GAExperiment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting sequencingCenter of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualSequencingCenter = actual.getSequencingCenter();
    if (!Objects.areEqual(actualSequencingCenter, sequencingCenter)) {
      failWithMessage(assertjErrorMessage, actual, sequencingCenter, actualSequencingCenter);
    }

    // return the current assertion for method chaining
    return this;
  }





}
