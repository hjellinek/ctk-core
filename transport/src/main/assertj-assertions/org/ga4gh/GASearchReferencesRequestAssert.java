package org.ga4gh;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link GASearchReferencesRequest} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GASearchReferencesRequestAssert extends AbstractAssert<GASearchReferencesRequestAssert, GASearchReferencesRequest> {

  /**
   * Creates a new <code>{@link GASearchReferencesRequestAssert}</code> to make assertions on actual GASearchReferencesRequest.
   * @param actual the GASearchReferencesRequest we want to make assertions on.
   */
  public GASearchReferencesRequestAssert(GASearchReferencesRequest actual) {
    super(actual, GASearchReferencesRequestAssert.class);
  }

  /**
   * An entry point for GASearchReferencesRequestAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGASearchReferencesRequest)</code> and get specific assertion with code completion.
   * @param actual the GASearchReferencesRequest we want to make assertions on.
   * @return a new <code>{@link GASearchReferencesRequestAssert}</code>
   */
  public static GASearchReferencesRequestAssert assertThat(GASearchReferencesRequest actual) {
    return new GASearchReferencesRequestAssert(actual);
  }

  /**
   * Verifies that the actual GASearchReferencesRequest's accessions contains the given String elements.
   * @param accessions the given elements that should be contained in actual GASearchReferencesRequest's accessions.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchReferencesRequest's accessions does not contain all given String elements.
   */
  public GASearchReferencesRequestAssert hasAccessions(String... accessions) {
    // check that actual GASearchReferencesRequest we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (accessions == null) failWithMessage("Expecting accessions parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getAccessions(), accessions);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchReferencesRequest's accessions contains <b>only<b> the given String elements and nothing else in whatever order.
   * @param accessions the given elements that should be contained in actual GASearchReferencesRequest's accessions.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchReferencesRequest's accessions does not contain all given String elements.
   */
  public GASearchReferencesRequestAssert hasOnlyAccessions(String... accessions) {
    // check that actual GASearchReferencesRequest we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (accessions == null) failWithMessage("Expecting accessions parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getAccessions(), accessions);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchReferencesRequest's accessions does not contain the given String elements.
   *
   * @param accessions the given elements that should not be in actual GASearchReferencesRequest's accessions.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchReferencesRequest's accessions contains any given String elements.
   */
  public GASearchReferencesRequestAssert doesNotHaveAccessions(String... accessions) {
    // check that actual GASearchReferencesRequest we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (accessions == null) failWithMessage("Expecting accessions parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getAccessions(), accessions);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchReferencesRequest has no accessions.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchReferencesRequest's accessions is not empty.
   */
  public GASearchReferencesRequestAssert hasNoAccessions() {
    // check that actual GASearchReferencesRequest we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have accessions but had :\n  <%s>";
    
    // check
    if (actual.getAccessions().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getAccessions());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual GASearchReferencesRequest's classSchema is equal to the given one.
   * @param classSchema the given classSchema to compare the actual GASearchReferencesRequest's classSchema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchReferencesRequest's classSchema is not equal to the given one.
   */
  public GASearchReferencesRequestAssert hasClassSchema(org.apache.avro.Schema classSchema) {
    // check that actual GASearchReferencesRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classSchema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualClassSchema = actual.getClassSchema();
    if (!Objects.areEqual(actualClassSchema, classSchema)) {
      failWithMessage(assertjErrorMessage, actual, classSchema, actualClassSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchReferencesRequest's md5checksums contains the given String elements.
   * @param md5checksums the given elements that should be contained in actual GASearchReferencesRequest's md5checksums.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchReferencesRequest's md5checksums does not contain all given String elements.
   */
  public GASearchReferencesRequestAssert hasMd5checksums(String... md5checksums) {
    // check that actual GASearchReferencesRequest we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (md5checksums == null) failWithMessage("Expecting md5checksums parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getMd5checksums(), md5checksums);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchReferencesRequest's md5checksums contains <b>only<b> the given String elements and nothing else in whatever order.
   * @param md5checksums the given elements that should be contained in actual GASearchReferencesRequest's md5checksums.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchReferencesRequest's md5checksums does not contain all given String elements.
   */
  public GASearchReferencesRequestAssert hasOnlyMd5checksums(String... md5checksums) {
    // check that actual GASearchReferencesRequest we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (md5checksums == null) failWithMessage("Expecting md5checksums parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getMd5checksums(), md5checksums);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchReferencesRequest's md5checksums does not contain the given String elements.
   *
   * @param md5checksums the given elements that should not be in actual GASearchReferencesRequest's md5checksums.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchReferencesRequest's md5checksums contains any given String elements.
   */
  public GASearchReferencesRequestAssert doesNotHaveMd5checksums(String... md5checksums) {
    // check that actual GASearchReferencesRequest we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (md5checksums == null) failWithMessage("Expecting md5checksums parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getMd5checksums(), md5checksums);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchReferencesRequest has no md5checksums.
   * @return this assertion object.
   * @throws AssertionError if the actual GASearchReferencesRequest's md5checksums is not empty.
   */
  public GASearchReferencesRequestAssert hasNoMd5checksums() {
    // check that actual GASearchReferencesRequest we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have md5checksums but had :\n  <%s>";
    
    // check
    if (actual.getMd5checksums().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getMd5checksums());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual GASearchReferencesRequest's pageSize is equal to the given one.
   * @param pageSize the given pageSize to compare the actual GASearchReferencesRequest's pageSize to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchReferencesRequest's pageSize is not equal to the given one.
   */
  public GASearchReferencesRequestAssert hasPageSize(Integer pageSize) {
    // check that actual GASearchReferencesRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting pageSize of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualPageSize = actual.getPageSize();
    if (!Objects.areEqual(actualPageSize, pageSize)) {
      failWithMessage(assertjErrorMessage, actual, pageSize, actualPageSize);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchReferencesRequest's pageToken is equal to the given one.
   * @param pageToken the given pageToken to compare the actual GASearchReferencesRequest's pageToken to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchReferencesRequest's pageToken is not equal to the given one.
   */
  public GASearchReferencesRequestAssert hasPageToken(String pageToken) {
    // check that actual GASearchReferencesRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting pageToken of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualPageToken = actual.getPageToken();
    if (!Objects.areEqual(actualPageToken, pageToken)) {
      failWithMessage(assertjErrorMessage, actual, pageToken, actualPageToken);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GASearchReferencesRequest's schema is equal to the given one.
   * @param schema the given schema to compare the actual GASearchReferencesRequest's schema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GASearchReferencesRequest's schema is not equal to the given one.
   */
  public GASearchReferencesRequestAssert hasSchema(org.apache.avro.Schema schema) {
    // check that actual GASearchReferencesRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting schema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualSchema = actual.getSchema();
    if (!Objects.areEqual(actualSchema, schema)) {
      failWithMessage(assertjErrorMessage, actual, schema, actualSchema);
    }

    // return the current assertion for method chaining
    return this;
  }





}
