package org.ga4gh;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link GALinearAlignment.Builder} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GALinearAlignmentBuilderAssert extends AbstractAssert<GALinearAlignmentBuilderAssert, GALinearAlignment.Builder> {

  /**
   * Creates a new <code>{@link GALinearAlignmentBuilderAssert}</code> to make assertions on actual GALinearAlignment.Builder.
   * @param actual the GALinearAlignment.Builder we want to make assertions on.
   */
  public GALinearAlignmentBuilderAssert(GALinearAlignment.Builder actual) {
    super(actual, GALinearAlignmentBuilderAssert.class);
  }

  /**
   * An entry point for GALinearAlignmentBuilderAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGALinearAlignment.Builder)</code> and get specific assertion with code completion.
   * @param actual the GALinearAlignment.Builder we want to make assertions on.
   * @return a new <code>{@link GALinearAlignmentBuilderAssert}</code>
   */
  public static GALinearAlignmentBuilderAssert assertThat(GALinearAlignment.Builder actual) {
    return new GALinearAlignmentBuilderAssert(actual);
  }

  /**
   * Verifies that the actual GALinearAlignment.Builder's cigar contains the given GACigarUnit elements.
   * @param cigar the given elements that should be contained in actual GALinearAlignment.Builder's cigar.
   * @return this assertion object.
   * @throws AssertionError if the actual GALinearAlignment.Builder's cigar does not contain all given GACigarUnit elements.
   */
  public GALinearAlignmentBuilderAssert hasCigar(GACigarUnit... cigar) {
    // check that actual GALinearAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given GACigarUnit varargs is not null.
    if (cigar == null) failWithMessage("Expecting cigar parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getCigar(), cigar);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GALinearAlignment.Builder's cigar contains <b>only<b> the given GACigarUnit elements and nothing else in whatever order.
   * @param cigar the given elements that should be contained in actual GALinearAlignment.Builder's cigar.
   * @return this assertion object.
   * @throws AssertionError if the actual GALinearAlignment.Builder's cigar does not contain all given GACigarUnit elements.
   */
  public GALinearAlignmentBuilderAssert hasOnlyCigar(GACigarUnit... cigar) {
    // check that actual GALinearAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given GACigarUnit varargs is not null.
    if (cigar == null) failWithMessage("Expecting cigar parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getCigar(), cigar);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GALinearAlignment.Builder's cigar does not contain the given GACigarUnit elements.
   *
   * @param cigar the given elements that should not be in actual GALinearAlignment.Builder's cigar.
   * @return this assertion object.
   * @throws AssertionError if the actual GALinearAlignment.Builder's cigar contains any given GACigarUnit elements.
   */
  public GALinearAlignmentBuilderAssert doesNotHaveCigar(GACigarUnit... cigar) {
    // check that actual GALinearAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check that given GACigarUnit varargs is not null.
    if (cigar == null) failWithMessage("Expecting cigar parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getCigar(), cigar);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GALinearAlignment.Builder has no cigar.
   * @return this assertion object.
   * @throws AssertionError if the actual GALinearAlignment.Builder's cigar is not empty.
   */
  public GALinearAlignmentBuilderAssert hasNoCigar() {
    // check that actual GALinearAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have cigar but had :\n  <%s>";
    
    // check
    if (actual.getCigar().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getCigar());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual GALinearAlignment.Builder's mappingQuality is equal to the given one.
   * @param mappingQuality the given mappingQuality to compare the actual GALinearAlignment.Builder's mappingQuality to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GALinearAlignment.Builder's mappingQuality is not equal to the given one.
   */
  public GALinearAlignmentBuilderAssert hasMappingQuality(Integer mappingQuality) {
    // check that actual GALinearAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting mappingQuality of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualMappingQuality = actual.getMappingQuality();
    if (!Objects.areEqual(actualMappingQuality, mappingQuality)) {
      failWithMessage(assertjErrorMessage, actual, mappingQuality, actualMappingQuality);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GALinearAlignment.Builder's position is equal to the given one.
   * @param position the given position to compare the actual GALinearAlignment.Builder's position to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GALinearAlignment.Builder's position is not equal to the given one.
   */
  public GALinearAlignmentBuilderAssert hasPosition(GAPosition position) {
    // check that actual GALinearAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting position of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    GAPosition actualPosition = actual.getPosition();
    if (!Objects.areEqual(actualPosition, position)) {
      failWithMessage(assertjErrorMessage, actual, position, actualPosition);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GALinearAlignment.Builder has cigar.
   * @return this assertion object.
   * @throws AssertionError - if the actual GALinearAlignment.Builder does not have cigar.
   */
  public GALinearAlignmentBuilderAssert hasCigar() {
    // check that actual GALinearAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasCigar()) {
      failWithMessage("\nExpecting that actual GALinearAlignment.Builder has cigar but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GALinearAlignment.Builder does not have cigar.
   * @return this assertion object.
   * @throws AssertionError - if the actual GALinearAlignment.Builder has cigar.
   */
  public GALinearAlignmentBuilderAssert doesNotHaveCigar() {
    // check that actual GALinearAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasCigar()) {
      failWithMessage("\nExpecting that actual GALinearAlignment.Builder does not have cigar but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GALinearAlignment.Builder has mapping quality.
   * @return this assertion object.
   * @throws AssertionError - if the actual GALinearAlignment.Builder does not have mapping quality.
   */
  public GALinearAlignmentBuilderAssert hasMappingQuality() {
    // check that actual GALinearAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasMappingQuality()) {
      failWithMessage("\nExpecting that actual GALinearAlignment.Builder has mapping quality but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GALinearAlignment.Builder does not have mapping quality.
   * @return this assertion object.
   * @throws AssertionError - if the actual GALinearAlignment.Builder has mapping quality.
   */
  public GALinearAlignmentBuilderAssert doesNotHaveMappingQuality() {
    // check that actual GALinearAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasMappingQuality()) {
      failWithMessage("\nExpecting that actual GALinearAlignment.Builder does not have mapping quality but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GALinearAlignment.Builder has position.
   * @return this assertion object.
   * @throws AssertionError - if the actual GALinearAlignment.Builder does not have position.
   */
  public GALinearAlignmentBuilderAssert hasPosition() {
    // check that actual GALinearAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasPosition()) {
      failWithMessage("\nExpecting that actual GALinearAlignment.Builder has position but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GALinearAlignment.Builder does not have position.
   * @return this assertion object.
   * @throws AssertionError - if the actual GALinearAlignment.Builder has position.
   */
  public GALinearAlignmentBuilderAssert doesNotHavePosition() {
    // check that actual GALinearAlignment.Builder we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasPosition()) {
      failWithMessage("\nExpecting that actual GALinearAlignment.Builder does not have position but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
