package org.ga4gh;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link BEACONRequest} specific assertions - Generated by CustomAssertionGenerator.
 */
public class BEACONRequestAssert extends AbstractAssert<BEACONRequestAssert, BEACONRequest> {

  /**
   * Creates a new <code>{@link BEACONRequestAssert}</code> to make assertions on actual BEACONRequest.
   * @param actual the BEACONRequest we want to make assertions on.
   */
  public BEACONRequestAssert(BEACONRequest actual) {
    super(actual, BEACONRequestAssert.class);
  }

  /**
   * An entry point for BEACONRequestAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myBEACONRequest)</code> and get specific assertion with code completion.
   * @param actual the BEACONRequest we want to make assertions on.
   * @return a new <code>{@link BEACONRequestAssert}</code>
   */
  public static BEACONRequestAssert assertThat(BEACONRequest actual) {
    return new BEACONRequestAssert(actual);
  }

  /**
   * Verifies that the actual BEACONRequest's allele is equal to the given one.
   * @param allele the given allele to compare the actual BEACONRequest's allele to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BEACONRequest's allele is not equal to the given one.
   */
  public BEACONRequestAssert hasAllele(String allele) {
    // check that actual BEACONRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting allele of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualAllele = actual.getAllele();
    if (!Objects.areEqual(actualAllele, allele)) {
      failWithMessage(assertjErrorMessage, actual, allele, actualAllele);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BEACONRequest's chromosome is equal to the given one.
   * @param chromosome the given chromosome to compare the actual BEACONRequest's chromosome to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BEACONRequest's chromosome is not equal to the given one.
   */
  public BEACONRequestAssert hasChromosome(String chromosome) {
    // check that actual BEACONRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting chromosome of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualChromosome = actual.getChromosome();
    if (!Objects.areEqual(actualChromosome, chromosome)) {
      failWithMessage(assertjErrorMessage, actual, chromosome, actualChromosome);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BEACONRequest's classSchema is equal to the given one.
   * @param classSchema the given classSchema to compare the actual BEACONRequest's classSchema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BEACONRequest's classSchema is not equal to the given one.
   */
  public BEACONRequestAssert hasClassSchema(org.apache.avro.Schema classSchema) {
    // check that actual BEACONRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classSchema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualClassSchema = actual.getClassSchema();
    if (!Objects.areEqual(actualClassSchema, classSchema)) {
      failWithMessage(assertjErrorMessage, actual, classSchema, actualClassSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BEACONRequest's coordinate is equal to the given one.
   * @param coordinate the given coordinate to compare the actual BEACONRequest's coordinate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BEACONRequest's coordinate is not equal to the given one.
   */
  public BEACONRequestAssert hasCoordinate(Long coordinate) {
    // check that actual BEACONRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting coordinate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualCoordinate = actual.getCoordinate();
    if (!Objects.areEqual(actualCoordinate, coordinate)) {
      failWithMessage(assertjErrorMessage, actual, coordinate, actualCoordinate);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BEACONRequest's populationId is equal to the given one.
   * @param populationId the given populationId to compare the actual BEACONRequest's populationId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BEACONRequest's populationId is not equal to the given one.
   */
  public BEACONRequestAssert hasPopulationId(String populationId) {
    // check that actual BEACONRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting populationId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualPopulationId = actual.getPopulationId();
    if (!Objects.areEqual(actualPopulationId, populationId)) {
      failWithMessage(assertjErrorMessage, actual, populationId, actualPopulationId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BEACONRequest's referenceVersion is equal to the given one.
   * @param referenceVersion the given referenceVersion to compare the actual BEACONRequest's referenceVersion to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BEACONRequest's referenceVersion is not equal to the given one.
   */
  public BEACONRequestAssert hasReferenceVersion(String referenceVersion) {
    // check that actual BEACONRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting referenceVersion of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualReferenceVersion = actual.getReferenceVersion();
    if (!Objects.areEqual(actualReferenceVersion, referenceVersion)) {
      failWithMessage(assertjErrorMessage, actual, referenceVersion, actualReferenceVersion);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BEACONRequest's schema is equal to the given one.
   * @param schema the given schema to compare the actual BEACONRequest's schema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BEACONRequest's schema is not equal to the given one.
   */
  public BEACONRequestAssert hasSchema(org.apache.avro.Schema schema) {
    // check that actual BEACONRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting schema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualSchema = actual.getSchema();
    if (!Objects.areEqual(actualSchema, schema)) {
      failWithMessage(assertjErrorMessage, actual, schema, actualSchema);
    }

    // return the current assertion for method chaining
    return this;
  }






}
